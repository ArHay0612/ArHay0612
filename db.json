{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/git1.x.jpg","path":"images/git1.x.jpg","modified":0,"renderable":0},{"_id":"source/images/git2.x.jpg","path":"images/git2.x.jpg","modified":0,"renderable":0},{"_id":"source/images/eslint.png","path":"images/eslint.png","modified":0,"renderable":0},{"_id":"source/images/prettier.png","path":"images/prettier.png","modified":0,"renderable":0},{"_id":"source/images/vscode.1.30.png","path":"images/vscode.1.30.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/images/hls-result.png","path":"images/hls-result.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/clicklove.js","path":"js/src/clicklove.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/fireworks.js","path":"js/src/fireworks.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"source/images/rtmp-result.png","path":"images/rtmp-result.png","modified":0,"renderable":0},{"_id":"themes/next/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"source/images/m3u8-res.png","path":"images/m3u8-res.png","modified":0,"renderable":0},{"_id":"source/images/push_rtmp_res.png","path":"images/push_rtmp_res.png","modified":0,"renderable":0},{"_id":"source/images/rtsp_to_rtsp.png","path":"images/rtsp_to_rtsp.png","modified":0,"renderable":0},{"_id":"source/images/push_to_rtsp.png","path":"images/push_to_rtsp.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"source/images/push_to_rtmp.png","path":"images/push_to_rtmp.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"source/images/build_push_rtsp.jpg","path":"images/build_push_rtsp.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/photo.gif","path":"images/photo.gif","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"source/avatar/avator.jpg","path":"avatar/avator.jpg","modified":0,"renderable":0},{"_id":"source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1567409842949},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1567409842949},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1567409842949},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1567409842949},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1567409842949},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1567409842949},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1567409842953},{"_id":"themes/next/_config.yml","hash":"d13b530b9c2d755e84137199209da36ad4353bfa","modified":1567423438336},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1567409842949},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1567409842953},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1567409842977},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1567409842949},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1567409842949},{"_id":"source/_posts/Linux下安装nodejs.md","hash":"db3b9a6de862da1a4a879049bbd5eab9b4a5d0c0","modified":1567409842921},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1567409842953},{"_id":"source/_posts/Linux增加使用文件代替swap分区分方法.md","hash":"7aa0da35c6220e65ce9cb69ca288b7c1db8c715b","modified":1567409842921},{"_id":"source/_posts/Linux常用压缩解压缩.md","hash":"f91b0432af288552c42330d97c712552fabae7f7","modified":1567409842921},{"_id":"source/_posts/MySQL中utf8和utf8mb4区别对emoji支持.md","hash":"98397826bba1cb5d1caee7edecad793e73416d83","modified":1567409842921},{"_id":"source/_posts/MySQL字段值默认不区分大小写问题.md","hash":"ea38fa7ee6d5ee3779986b57c605bcc768305dae","modified":1567409842921},{"_id":"source/_posts/MySQL新版本设置root密码和重置root密码.md","hash":"3477b23f7a144d57209b77a39962a515e84a0286","modified":1567409842921},{"_id":"source/_posts/MySQL设置用户远程登录.md","hash":"25fe967b530703769393430c9e4fa744ee788fac","modified":1567409842921},{"_id":"source/_posts/Shell基础.md","hash":"49732ee09708799be653f788f1db0c2cb235227f","modified":1567409842921},{"_id":"source/_posts/JDK.md","hash":"5b058153f99c8e159741862c6f7104b72bb7dc64","modified":1567409842921},{"_id":"source/_posts/Linux下安装maven.md","hash":"5218396106e4b135815deec384064f70a440764e","modified":1567409842921},{"_id":"source/_posts/atom配置vue前端开发环境.md","hash":"cb1aae7ffe45183f7a243132ff81c5ffcb037df9","modified":1567409842921},{"_id":"source/_posts/axis2调用webservice.md","hash":"f63f24f9d80bc981d60f98fc7bc24217c6621927","modified":1567409842921},{"_id":"source/_posts/debian系系统编译CuraEngine引擎.md","hash":"4121e75321e9800dc2b0292e3e861cba1e18bc15","modified":1567409842921},{"_id":"source/_posts/deepin-linux下初识docker.md","hash":"92abf1705c118b8560b8e8d556bec6631e79b996","modified":1567409842921},{"_id":"source/_posts/git常用的使用总结.md","hash":"8bdfd9837c2f28eb2cd78bd11cdf192fb38ec5c4","modified":1567409842921},{"_id":"source/_posts/java实现图片的灰度化处理.md","hash":"3f3b2bff850079f531fc80ef7622ef7e40815d1a","modified":1567409842921},{"_id":"source/_posts/linux下nginx部署配置多站点.md","hash":"de5c57e13d42c95d31c472485fad52c739763c71","modified":1567409842921},{"_id":"source/_posts/linux使用systemd方式添加开机自动执行脚本.md","hash":"ebb75ff07159054d3c5f2d610cbf69d8010e54d8","modified":1567409842921},{"_id":"source/_posts/nginx限制某个IP同一时间段的访问次数.md","hash":"1cd7dfe8fcc2ed6b2bc1762367282750904ea14a","modified":1567409842921},{"_id":"source/_posts/linux系统之间远程连接和传输文件.md","hash":"47ead8cb32654d2cc355a0216261cea5056256cd","modified":1567409842921},{"_id":"source/_posts/nginx-rtmp-module-ffmpeg视频推流和rtsp转rtmp及hls.md","hash":"11decd27ad6548431d72b5690c71c57456da97bb","modified":1567409842921},{"_id":"source/_posts/pdfbox解析PDF文件.md","hash":"a8cc231c6b6b59d4d779a7c7d758576bff0a3760","modified":1567409842921},{"_id":"source/_posts/tomcat解决java-lang-IllegalArgumentException-Invalid-character异常.md","hash":"9f71e417dc5ca30eed2d6e0a8053f280337c55b5","modified":1567409842921},{"_id":"source/_posts/vscode配置前端vue开发环境.md","hash":"2395e1913f3ab9a8fb4576cfe5e799b44a3f786e","modified":1567409842921},{"_id":"source/_posts/基于vue组件实现web端页面调用摄像头拍照.md","hash":"6ac6b8e47c8d1169957c0ad286f837dd58172908","modified":1567409842921},{"_id":"source/_posts/编译安装nginx添加rtmp模块.md","hash":"411b404954a3787a68f0b3194bf2eaacabbc5c94","modified":1567409842921},{"_id":"source/_posts/远程tomcat配置jconsole连接监测jvm参数.md","hash":"27fdd3e10b5189746ab69a0681755f725fdaf936","modified":1567409842921},{"_id":"source/images/git1.x.jpg","hash":"554a219078b2011cf4a4d720097aa3de496c2bc7","modified":1567409842929},{"_id":"source/images/git2.x.jpg","hash":"a60fa4a4d305105f17dc2591eea0ba46d7578d1f","modified":1567409842929},{"_id":"source/images/eslint.png","hash":"d96f83e95db59002459180d878c30b2eee09671a","modified":1567409842929},{"_id":"source/images/prettier.png","hash":"5926d8e888835484036add4e16541c41eb3c6406","modified":1567409842945},{"_id":"source/tags/index.md","hash":"8cba82cb54c1006d2648e3f9337cc0e3103dbc25","modified":1567409842949},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1567409842953},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1567409842953},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1567409842953},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1567409842953},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1567409842953},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1567409842953},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1567409842953},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1567409842953},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1567409842953},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1567409842953},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1567409842953},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1567409842953},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1567409842953},{"_id":"themes/next/layout/_layout.swig","hash":"a7989efffb3e578c87bd6777b25789cdea7b235c","modified":1567409842953},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1567409842953},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1567409842953},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1567409842953},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1567409842977},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1567409842977},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1567409842977},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1567409842977},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1567409842977},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1567409842977},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1567409842977},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1567409843029},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1567409843033},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1567409843033},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1567409842977},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1567409842977},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1567409842993},{"_id":"source/images/vscode.1.30.png","hash":"283dfd9e7d2e876c13bfa34d9ad476316e83ebe5","modified":1567409842949},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1567409842953},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1567409842953},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1567409842953},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1567409842953},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1567409842953},{"_id":"themes/next/layout/_macro/post.swig","hash":"4aa7eda227587e8a33d477c77e7d3ae463c0de18","modified":1567409842953},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1567409842953},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1567409842953},{"_id":"themes/next/layout/_partials/comments.swig","hash":"1af6e6ab15a2ad07bdffa75225f1b33ce21e018e","modified":1567409842953},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1567409842953},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1567409842953},{"_id":"themes/next/layout/_partials/header.swig","hash":"ee82eb42a8dcb5f256dde7b2969fdb1f63342fb0","modified":1567409842953},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1567409842953},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1567409842953},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1567409842953},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1567409842953},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1567409842953},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1567409842953},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1567409842973},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1567409842973},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1567409842977},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1567409842977},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1567409842977},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1567409842977},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1567409842977},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1567409842977},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1567409842977},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1567409842977},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1567409842977},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1567409842977},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1567409842977},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1567409842993},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1567409842993},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1567409842993},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1567409842993},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1567409842993},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1567409842993},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1567409842993},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1567409842993},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1567409842993},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1567409842993},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1567409842993},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1567409842993},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1567409842993},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1567409842993},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1567409842993},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1567409842993},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1567409842993},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1567409842993},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1567409842993},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1567409842953},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1567409842953},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1567409842981},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1567409842981},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1567409842981},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1567409842993},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1567409842993},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1567409842973},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1567409842973},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1567409842977},{"_id":"source/images/hls-result.png","hash":"f4774c41b82aa0a02e95285dddfe8476aeec7ff1","modified":1567409842933},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1567409842953},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1567409842953},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1567409842953},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1567409842953},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1567409842953},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1567409842953},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1567409842953},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1567409842953},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1567409842953},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1567409842953},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1567409842969},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1567409842973},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1567409842969},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"b66f4a2e3134ed844394808821ef25718c6262e1","modified":1567409842973},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1567409842973},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1567409842973},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1567409842973},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1567409842973},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1567409842973},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1567409842973},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1567409842973},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1567409842973},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1567409842973},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1567409842977},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"8015a4fa2c2e37b4459b5a3657521cbfb1fd7d25","modified":1567409842981},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1567409842981},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1567409842981},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1567409842981},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1567409842993},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1567409842993},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1567409842993},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1567409842993},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1567409842993},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1567409842993},{"_id":"themes/next/source/js/src/clicklove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1567409842993},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1567409842993},{"_id":"themes/next/source/js/src/fireworks.js","hash":"ed2d0a5ad306a2745b7c8180b69e36b78d4b0698","modified":1567409842993},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1567409842993},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1567409842993},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1567409842993},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1567409842993},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1567409842993},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1567409842993},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1567409842997},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1567409843013},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1567409842997},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1567409843013},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1567409842993},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1567409843013},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1567409843013},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1567409843013},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1567409843013},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1567409843013},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1567409843013},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1567409843013},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1567409843013},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1567409843013},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1567409843013},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1567409843021},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1567409843025},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1567409843025},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1567409843025},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1567409843025},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1567409843025},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1567409843025},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1567409843025},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1567409843025},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1567409843025},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1567409843025},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1567409843025},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1567409843025},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1567409843025},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1567409843025},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1567409843025},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1567409843025},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1567409843025},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1567409843025},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1567409843025},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1567409843025},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1567409843025},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1567409843025},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1567409843025},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1567409843025},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1567409843025},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1567409843025},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1567409843029},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1567409843029},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1567409843029},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1567409843029},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1567409843029},{"_id":"source/images/rtmp-result.png","hash":"e3907881f94f08adbd78521c62790cd9de503a39","modified":1567409842949},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1567409842973},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1567409842973},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1567409842973},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1567409842973},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1567409842973},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1567409842973},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1567409842973},{"_id":"themes/next/layout/_third-party/comments/utterances.swig","hash":"2d24cd3d139dadf40581ab4b69a44932c91d1a7e","modified":1567409842973},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1567409842973},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1567409842973},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1567409842977},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1567409842977},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1567409842977},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1567409843013},{"_id":"themes/next/source/images/favicon.png","hash":"75a552e992da1b7e6a957905100803beff2eaa4e","modified":1567409842993},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1567409842953},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1567409842953},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1567409843025},{"_id":"source/images/m3u8-res.png","hash":"b9c164956f380d006bb9e4abb7240d252360baa1","modified":1567409842933},{"_id":"source/images/push_rtmp_res.png","hash":"afaa47fa0de44289ac30a384e74f10ca65ba260d","modified":1567409842945},{"_id":"source/images/rtsp_to_rtsp.png","hash":"f939a3f0df70d24fe477c6c36b6827f189f097f2","modified":1567409842949},{"_id":"source/images/push_to_rtsp.png","hash":"ac24c9193c13de755b822fdf2b9013f4d9ad5188","modified":1567409842949},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1567409842977},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1567409842981},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1567409842981},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1567409842981},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1567409842981},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1567409842981},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1567409842981},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1567409842981},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1567409842981},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1567409842981},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1567409842981},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1567409842981},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1567409842981},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1567409842981},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1567409842981},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1567409842993},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1567409842993},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1567409842993},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1567409842993},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1567409842993},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1567409842993},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1567409842993},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1567409842993},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1567409842993},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"2e3b766efb1d4c2191178da251c6bbe572950b83","modified":1567409842993},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1567409842993},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1567409842997},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1567409842993},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1567409842997},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1567409842997},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1567409842981},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1567409842981},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1567409843013},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1567409843013},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1567409843017},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1567409843017},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1567409843017},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1567409843029},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1567409843029},{"_id":"source/avatar/wukong.jpeg","hash":"add13c1dd46d2321470a1007e1d1f419b635c1d1","modified":1567409842925},{"_id":"source/images/push_to_rtmp.png","hash":"f69ae437ea0589f93ed48151019d44a65e752f4c","modified":1567409842949},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1567409843013},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1567409843013},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1567409843013},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1567409843013},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1567409843013},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1567409843013},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1567409843013},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1567409843013},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1567409843013},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1567409842977},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1567409842977},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1567409842997},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1567409843021},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1567409843021},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1567409843029},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"9e50227297c42a90aba5b18c61095f3579a02ad1","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1567409842981},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1567409842981},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1567409842981},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1567409842981},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1567409842981},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1567409842981},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1567409842981},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1567409842981},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1567409842981},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1567409842981},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1567409842981},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1567409842981},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1567409842981},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1567409842981},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1567409842981},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1567409842981},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1567409842981},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1567409842981},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1567409842981},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1567409842981},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1567409842981},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1567409842981},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1567409842993},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1567409842997},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1567409842997},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1567409842997},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1567409842997},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1567409842997},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1567409842977},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1567409842977},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1567409843017},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1567409843017},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1567409843021},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1567409843013},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1567409843013},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1567409843013},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1567409843013},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1567409843013},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1567409843013},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1567409843001},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1567409843029},{"_id":"source/images/build_push_rtsp.jpg","hash":"c8650f50dafac3573190921e1f556ae909b990fd","modified":1567409842929},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1567409843021},{"_id":"source/images/photo.gif","hash":"980a75ec13a510a52be715ea8da7d6921856a871","modified":1567409842945},{"_id":"public/./public/search.xml","hash":"66b217d9066f1162eb6924450149bf46e97cb989","modified":1567423040274},{"_id":"public/tags/index.html","hash":"bd247994e8f68d0d0d3dba9b19a3b098d9302cef","modified":1567423457791},{"_id":"public/2019/06/26/linux使用systemd方式添加开机自动执行脚本/index.html","hash":"2430332a25b53ccc12d4c543f606232963f9c3c0","modified":1567423457791},{"_id":"public/2019/06/01/编译安装nginx添加rtmp模块/index.html","hash":"2c2b142946d924427ef66e9cec8d8773e9fe1a6f","modified":1567423457791},{"_id":"public/2019/05/31/nginx-rtmp-module-ffmpeg视频推流和rtsp转rtmp及hls/index.html","hash":"88a8738b878973b72ac0f0730ebb634b3c905820","modified":1567423457791},{"_id":"public/2019/05/29/deepin-linux下初识docker/index.html","hash":"db50054b5026bba8c13930bb406f3ed8cb3a53eb","modified":1567423457791},{"_id":"public/2019/05/14/pdfbox解析PDF文件/index.html","hash":"ba71eb1e35ab447778e8fe9cdd44d79a7eb5f234","modified":1567423457792},{"_id":"public/2019/04/27/MySQL中utf8和utf8mb4区别对emoji支持/index.html","hash":"044e7ba154707e48db391329b515b80d0e773609","modified":1567423457792},{"_id":"public/2019/04/22/nginx限制某个IP同一时间段的访问次数/index.html","hash":"b6bb6e07ac908595fb12e6be63670711cecdc093","modified":1567423457792},{"_id":"public/2019/03/16/git常用的使用总结/index.html","hash":"51ab716beb8215a94572fd5783223d5960defa06","modified":1567423457792},{"_id":"public/2019/02/21/tomcat解决java-lang-IllegalArgumentException-Invalid-character异常/index.html","hash":"9863ba3f695a35b11a3ade4521f98efe6e7fde46","modified":1567423457792},{"_id":"public/2019/01/17/基于vue组件实现web端页面调用摄像头拍照/index.html","hash":"53d1f9fcadee5527f83642c3b3f817c4557deecd","modified":1567423457792},{"_id":"public/2018/12/13/vscode配置前端vue开发环境/index.html","hash":"1e5feab2c5dc07a727cacea5076acc4934c8747a","modified":1567423457792},{"_id":"public/2018/12/11/axis2调用webservice/index.html","hash":"15dea73f21903bd22c4eb438495b586ed3f69553","modified":1567423457792},{"_id":"public/2018/09/05/debian系系统编译CuraEngine引擎/index.html","hash":"c6c81af3a421bb92d906cea080fd9a0b08bdb436","modified":1567423457792},{"_id":"public/2018/08/20/远程tomcat配置jconsole连接监测jvm参数/index.html","hash":"f476079c294a34e606190ce055e63e77f4630893","modified":1567423457792},{"_id":"public/2018/08/07/linux系统之间远程连接和传输文件/index.html","hash":"926790b1a7b0aec2e8aa8c16f93c864926539bce","modified":1567423457792},{"_id":"public/2018/08/03/MySQL新版本设置root密码和重置root密码/index.html","hash":"5ec3dc6957afffb851eb7de1833accd5a12ea25f","modified":1567423457792},{"_id":"public/2018/06/25/atom配置vue前端开发环境/index.html","hash":"9aa447a3a10d48c58f1d1c34082b53fd1aa5490e","modified":1567423457793},{"_id":"public/2018/06/12/java实现图片的灰度化处理/index.html","hash":"e1b118850039ad737582153d9d60adabb699cfa7","modified":1567423457793},{"_id":"public/2018/06/12/MySQL设置用户远程登录/index.html","hash":"660cd6f12526977e80a87dfe49a63cfe695fe6e0","modified":1567423457793},{"_id":"public/2018/05/20/Shell基础/index.html","hash":"f306df1ce594ba61b808f1145582ef40a3e9bbef","modified":1567423457793},{"_id":"public/2018/05/20/Linux常用压缩解压缩/index.html","hash":"810d297a55201cdc0ff6db242a882a6802eaa765","modified":1567423457793},{"_id":"public/2018/05/13/linux下nginx部署配置多站点/index.html","hash":"1aa9d932c11ce852d493601951e3c850b87ddf4b","modified":1567423457793},{"_id":"public/2018/05/13/Linux下安装maven/index.html","hash":"cafba495c156dc856dafc290aadd8655c3354863","modified":1567423457793},{"_id":"public/2018/05/13/JDK/index.html","hash":"a8b329b68d6958b3920e34759ce8ca0213288c8d","modified":1567423457793},{"_id":"public/2018/05/13/Linux增加使用文件代替swap分区分方法/index.html","hash":"d99ef0c99362939e5620b988c31a2d98673a8a5a","modified":1567423457793},{"_id":"public/2018/05/13/MySQL字段值默认不区分大小写问题/index.html","hash":"14624647b6ed795043bbb6712e31841682bfadae","modified":1567423457793},{"_id":"public/2018/05/12/Linux下安装nodejs/index.html","hash":"f3a832664ef7c24e12b5ab9a8c78b793a70440c9","modified":1567423457793},{"_id":"public/archives/index.html","hash":"7edef2ed55351454b3e4607acb585bfe222d4250","modified":1567423457793},{"_id":"public/archives/page/2/index.html","hash":"532fa38c402d4528a542c1d557f1c6543fbef9e6","modified":1567423457793},{"_id":"public/archives/page/3/index.html","hash":"a6d3f26d37a5d6be9adb11dc821a8da4bc760d90","modified":1567423457794},{"_id":"public/archives/2018/index.html","hash":"a1d76bb01e4241a13cd44c66e178651fe2fb296f","modified":1567423457794},{"_id":"public/archives/2018/page/2/index.html","hash":"79535f387b39b1826063a00d034bea58d641b6a1","modified":1567423457794},{"_id":"public/archives/2018/05/index.html","hash":"9ef92695f2fc780856c7da2d5f0941e9afba1e38","modified":1567423457794},{"_id":"public/archives/2018/06/index.html","hash":"e2207c5d5266498e282b2fd065c897c0ab89939c","modified":1567423457794},{"_id":"public/archives/2018/08/index.html","hash":"b78535ab567e6d7fceb65202cc565661acb63644","modified":1567423457794},{"_id":"public/archives/2018/09/index.html","hash":"150edb8c8d35e3c7f14ae7729cf50897562a2690","modified":1567423457794},{"_id":"public/archives/2018/12/index.html","hash":"ee3e9127ff0bfb163d9d9a5e1875aa1b2069e3b9","modified":1567423457794},{"_id":"public/archives/2019/index.html","hash":"7e7a009bf038ce65ff5bff24c4368c8c913108c3","modified":1567423457794},{"_id":"public/archives/2019/01/index.html","hash":"c6a4dd43c08d4340f44bb34bd5e3a7b59abb9e21","modified":1567423457794},{"_id":"public/archives/2019/02/index.html","hash":"2c4131b38ab95b28c899b4beb2045b504e6c8439","modified":1567423457794},{"_id":"public/archives/2019/03/index.html","hash":"50edd93e5042779e02b7ffed51d84886dc0f967b","modified":1567423457794},{"_id":"public/archives/2019/04/index.html","hash":"3f2ca7b9b86f4b839feffe8179c305da65977818","modified":1567423457795},{"_id":"public/archives/2019/05/index.html","hash":"48335eb9e5d006a45cf4e1b890a566a5b6afeacc","modified":1567423457795},{"_id":"public/archives/2019/06/index.html","hash":"9f69ec9cf573ad07bb2515d145f7037c37353295","modified":1567423457795},{"_id":"public/index.html","hash":"dc8957e060db22581d0693805d9fc8725ffb05b4","modified":1567423457795},{"_id":"public/page/2/index.html","hash":"f1dde634a925e1819a8e384b252704a4abeae8ed","modified":1567423457795},{"_id":"public/page/3/index.html","hash":"e343b3fa62f81f763304dcfd9e192497a0666e3f","modified":1567423457795},{"_id":"public/tags/linux/index.html","hash":"ae5a2f319b160b3877ace4cbae9dce03313a27f2","modified":1567423457795},{"_id":"public/tags/linux/page/2/index.html","hash":"a85232479559db2dd57d60b480e3b743bbd66711","modified":1567423457795},{"_id":"public/tags/nodejs/index.html","hash":"cc9eb0f88ca237d3fc6e2b1aa91a33c280771d1d","modified":1567423457795},{"_id":"public/tags/swap/index.html","hash":"67e770f2dc64ebd66738c6d8e2845b5390d43c59","modified":1567423457795},{"_id":"public/tags/MySQL/index.html","hash":"979a39bd756b67c92d0fc0b252a961132d09a729","modified":1567423457795},{"_id":"public/tags/shell/index.html","hash":"4a0d31537b71b0534dc3e0f787499eee484bf874","modified":1567423457795},{"_id":"public/tags/java/index.html","hash":"3d1b16947ca2d5cfd8db609dcf7ae197990f6104","modified":1567423457795},{"_id":"public/tags/jdk/index.html","hash":"0b02995fe84aa000d9dd99ef77e321c0267ad5db","modified":1567423457796},{"_id":"public/tags/maven/index.html","hash":"b3bf84bb0e90603c93c81e1e3a400377265f5d0c","modified":1567423457796},{"_id":"public/tags/atom/index.html","hash":"67209f92102dc7db2ce5c1e1a50b18f1e4277f62","modified":1567423457796},{"_id":"public/tags/axis2/index.html","hash":"09b6dd00eb07e07ed74d87e3be0ea9ea14c9bcbf","modified":1567423457796},{"_id":"public/tags/WebService/index.html","hash":"91cbe9c824fef9063902a5dcbbf9783dd8fee41d","modified":1567423457796},{"_id":"public/tags/docker/index.html","hash":"6f12b2099aa801d61454e5e47285e80e34d06790","modified":1567423457796},{"_id":"public/tags/Git/index.html","hash":"3a74bdec228b5ee50da6b5458db48aeb0bec4779","modified":1567423457796},{"_id":"public/tags/nginx/index.html","hash":"6f30701d8c538c68b66570f86c4c60838163a482","modified":1567423457796},{"_id":"public/tags/rtmp/index.html","hash":"7cf1f60fedea378c620520d535d08935a917affb","modified":1567423457796},{"_id":"public/tags/rtsp/index.html","hash":"05f185d969cacbe39b750db03043cc82027eae5c","modified":1567423457796},{"_id":"public/tags/ffmpeg/index.html","hash":"3c37da6864e2d5c75fb34e493682e4e46b96f0d5","modified":1567423457796},{"_id":"public/tags/pdfbox/index.html","hash":"a0f1110df4d27d07c5f79459498179f6b8e37d30","modified":1567423457796},{"_id":"public/tags/pdf/index.html","hash":"3aec977f5f252646097f75974cf42052307eabda","modified":1567423457796},{"_id":"public/tags/tomcat/index.html","hash":"b9d174ca05b31a35a7d6cb5bf39aad874a78cc1c","modified":1567423457797},{"_id":"public/tags/vscode/index.html","hash":"22434f41d0fbffa70080ddeac0d3cbf458c604fc","modified":1567423457797},{"_id":"public/tags/vue/index.html","hash":"013561eacdbaed48913dac0d0df5c04215326823","modified":1567423457797},{"_id":"public/tags/web/index.html","hash":"287e6862b0f039bf0d7bd1bb9a824bb720c3e0d4","modified":1567423457797},{"_id":"public/tags/jconsole/index.html","hash":"31ebecd4477e70f756bc211c6e1ac5fd09b58e49","modified":1567423457797},{"_id":"public/tags/jvm/index.html","hash":"29a8e1a9864c0e34ca77c19a9afb7c462c99013a","modified":1567423457797},{"_id":"public/images/git1.x.jpg","hash":"554a219078b2011cf4a4d720097aa3de496c2bc7","modified":1567423040352},{"_id":"public/images/git2.x.jpg","hash":"a60fa4a4d305105f17dc2591eea0ba46d7578d1f","modified":1567423040353},{"_id":"public/images/eslint.png","hash":"d96f83e95db59002459180d878c30b2eee09671a","modified":1567423040353},{"_id":"public/images/prettier.png","hash":"5926d8e888835484036add4e16541c41eb3c6406","modified":1567423040353},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1567423040353},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1567423040353},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1567423040353},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1567423040353},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1567423040353},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1567423040353},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1567423040353},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1567423040353},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1567423040353},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1567423040353},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1567423040353},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1567423040354},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1567423040353},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1567423040354},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1567423040354},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1567423040354},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1567423040354},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1567423040354},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1567423040354},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1567423040354},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1567423040354},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1567423040354},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1567423040354},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1567423040354},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1567423040354},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1567423040354},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1567423040355},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1567423040355},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1567423040355},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1567423040355},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1567423040355},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1567423040355},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1567423040355},{"_id":"public/images/vscode.1.30.png","hash":"283dfd9e7d2e876c13bfa34d9ad476316e83ebe5","modified":1567423041027},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1567423041033},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1567423041044},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1567423041057},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1567423041057},{"_id":"public/js/src/clicklove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1567423041057},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1567423041057},{"_id":"public/js/src/fireworks.js","hash":"ed2d0a5ad306a2745b7c8180b69e36b78d4b0698","modified":1567423041057},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1567423041057},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1567423041057},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1567423041057},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1567423041058},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1567423041058},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1567423041058},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1567423041058},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1567423041058},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1567423041058},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1567423041058},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1567423041058},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1567423041058},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1567423041058},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1567423041058},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1567423041058},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1567423041058},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1567423041058},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1567423041058},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1567423041059},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1567423041059},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1567423041059},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1567423041059},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1567423041059},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1567423041059},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1567423041059},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1567423041059},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1567423041059},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1567423041059},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1567423041059},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1567423041059},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1567423041059},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1567423041059},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1567423041059},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1567423041059},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1567423041060},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1567423041060},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1567423041060},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1567423041060},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1567423041060},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1567423041060},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1567423041060},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1567423041060},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1567423041060},{"_id":"public/lib/fastclick/README.html","hash":"287b2e24cae1f7d01877dda79b76c24f81123895","modified":1567423041060},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1567423041060},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bfb6e229fc36e493d45499b4ac30a7c298786ab4","modified":1567423041060},{"_id":"public/css/main.css","hash":"2e70eae1b45a1f164c018208cd7913ef51ed811b","modified":1567423041060},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1567423041060},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1567423041060},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1567423041060},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1567423041061},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1567423041061},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1567423041061},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1567423041061},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1567423041061},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1567423041061},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1567423041061},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1567423041061},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1567423041061},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1567423041061},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1567423041061},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1567423041061},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1567423041062},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1567423041062},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1567423041062},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1567423041062},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1567423041062},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1567423041063},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1567423041063},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1567423041063},{"_id":"public/images/favicon.png","hash":"bf952c6228f82a7ecf3a71ac19396c1a5bd7f123","modified":1567423040354},{"_id":"public/images/hls-result.png","hash":"f4774c41b82aa0a02e95285dddfe8476aeec7ff1","modified":1567423041136},{"_id":"public/images/rtmp-result.png","hash":"e3907881f94f08adbd78521c62790cd9de503a39","modified":1567423041186},{"_id":"public/images/m3u8-res.png","hash":"b9c164956f380d006bb9e4abb7240d252360baa1","modified":1567423041191},{"_id":"public/images/push_rtmp_res.png","hash":"afaa47fa0de44289ac30a384e74f10ca65ba260d","modified":1567423041191},{"_id":"public/images/push_to_rtsp.png","hash":"ac24c9193c13de755b822fdf2b9013f4d9ad5188","modified":1567423041192},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1567423041192},{"_id":"public/images/rtsp_to_rtsp.png","hash":"f939a3f0df70d24fe477c6c36b6827f189f097f2","modified":1567423041192},{"_id":"public/avatar/wukong.jpeg","hash":"add13c1dd46d2321470a1007e1d1f419b635c1d1","modified":1567412138027},{"_id":"public/images/push_to_rtmp.png","hash":"f69ae437ea0589f93ed48151019d44a65e752f4c","modified":1567423041204},{"_id":"public/images/build_push_rtsp.jpg","hash":"c8650f50dafac3573190921e1f556ae909b990fd","modified":1567423041243},{"_id":"public/images/photo.gif","hash":"980a75ec13a510a52be715ea8da7d6921856a871","modified":1567423041268},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1567413411000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1567413411000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1567413411000},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1567413411000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1567413411000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1567413411000},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1567413411000},{"_id":"themes/yilia/_config.yml","hash":"c3a1694c111e2e1f05a174bd893fe951038fbda2","modified":1567413411000},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1567413411000},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1567413411000},{"_id":"source/_posts/abc.md","hash":"6250ba3589bd3052e2a1bbd6ca343d309f940430","modified":1567412221780},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1567413411000},{"_id":"themes/yilia/.git/config","hash":"45dbf7cad960774e3ebd63f878005463a78e4c69","modified":1567413411000},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1567412859000},{"_id":"themes/yilia/.git/index","hash":"fe0fa964aebf2412e8f7be22d2682858f4226e66","modified":1567413411000},{"_id":"themes/yilia/.git/packed-refs","hash":"76b1aa9479dd3de329935b6d94a6624c5f716d23","modified":1567413411000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1567413411000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1567413411000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1567413411000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1567413411000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1567413411000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1567413411000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1567413411000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1567413411000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1567413411000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1567413411000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1567413411000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1567413411000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1567413411000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1567413411000},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1567413411000},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1567413411000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1567413411000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1567413411000},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1567413411000},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1567413411000},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1567413411000},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1567412859000},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1567412859000},{"_id":"themes/yilia/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1567412859000},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1567412859000},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1567412859000},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1567412859000},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1567412859000},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1567412859000},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1567412859000},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1567412859000},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1567412859000},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1567412859000},{"_id":"themes/yilia/.git/logs/HEAD","hash":"b9e9ddb06e8ededa6ad6bce383487af69e6e6ba0","modified":1567413411000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1567413411000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1567413411000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1567413411000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1567413411000},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1567413411000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1567413411000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1567413411000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1567413411000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1567413411000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1567413411000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1567413411000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1567413411000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1567413411000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1567413411000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1567413411000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1567413411000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1567413411000},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1567413411000},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1567413411000},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1567413411000},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1567413411000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1567413411000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1567413411000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1567413411000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1567413411000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1567413411000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1567413411000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1567413411000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1567413411000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1567413411000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1567413411000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1567413411000},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1567413411000},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1567413411000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1567413411000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1567413411000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1567413411000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1567413411000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1567413411000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1567413411000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1567413411000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1567413411000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1567413411000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1567413411000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1567413411000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1567413411000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1567413411000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1567413411000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1567413411000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1567413411000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1567413411000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1567413411000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1567413411000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1567413411000},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1567413411000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1567413411000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1567413411000},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1567413411000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1567413411000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1567413411000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1567413411000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1567413411000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1567413411000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1567413411000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1567413411000},{"_id":"themes/yilia/.git/objects/pack/pack-ec06102690f7a44be8f45936bca61b5a6f780e18.idx","hash":"f4c4e798017e27cbf3244cb55afbebc435b619ed","modified":1567413411000},{"_id":"themes/yilia/.git/refs/heads/master","hash":"4ed77da1a2617db0e77c3e3e190a1c79c16dfb9a","modified":1567413411000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1567413411000},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1567413411000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1567413411000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1567413411000},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1567413411000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1567413411000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1567413411000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1567413411000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1567413411000},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1567413411000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1567413411000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1567413411000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1567413411000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1567413411000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1567413411000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1567413411000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1567413411000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1567413411000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1567413411000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1567413411000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1567413411000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1567413411000},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"b9e9ddb06e8ededa6ad6bce383487af69e6e6ba0","modified":1567413411000},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1567413411000},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"b9e9ddb06e8ededa6ad6bce383487af69e6e6ba0","modified":1567413411000},{"_id":"themes/yilia/.git/objects/pack/pack-ec06102690f7a44be8f45936bca61b5a6f780e18.pack","hash":"df0c9bc87d05cfe2721c1f163e4432e075d4a6f5","modified":1567413411000},{"_id":"public/2019/09/02/abc/index.html","hash":"e6a799ed22b33f9ab29bbe7449715c37def19e7f","modified":1567417554512},{"_id":"public/archives/2019/page/2/index.html","hash":"c4cb11dc293859de4146388dafd89de2e52d68dd","modified":1567417554519},{"_id":"public/archives/2019/09/index.html","hash":"2c41555b048e80f7078235e4e0a3aa052739716e","modified":1567417554520},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1567423040355},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1567423040355},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1567423040355},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1567423040355},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1567423040355},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1567423040355},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1567423040355},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1567423040356},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1567423040355},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1567423041063},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1567423041063},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1567423041063},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1567423041062},{"_id":"public/content.json","hash":"cdfb4578c57a29ae076d39d477f8c190178ad25a","modified":1567423457747},{"_id":"themes/hexo-theme-material/.eslintrc.json","hash":"83ddc0cdc18f28b967795b8dac0421a52cdf7ece","modified":1567415164000},{"_id":"themes/hexo-theme-material/.gitignore","hash":"dd9e9495fc7ce09c026f7fdcef45cf8ddfde40d8","modified":1567415164000},{"_id":"themes/hexo-theme-material/.travis.yml","hash":"10a09fe2b341ccad5b97d4bd9cc2c1c03e1863a3","modified":1567415164000},{"_id":"themes/hexo-theme-material/CONTRIBUTING.md","hash":"148f555e47d4725fe1faac775107a4d7b03f7136","modified":1567415164000},{"_id":"themes/hexo-theme-material/CONTRIBUTING.zh-cn.md","hash":"ef3ccef0451d6ac616b3a35fbfedb6abd35e6b41","modified":1567415164000},{"_id":"themes/hexo-theme-material/LICENSE","hash":"12d81f50767d4e09aa7877da077ad9d1b915d75b","modified":1567415164000},{"_id":"themes/hexo-theme-material/README.md","hash":"e50bd84c62bdf8ee9035c534b560cb9a682a3c11","modified":1567415164000},{"_id":"themes/hexo-theme-material/_config.template.yml","hash":"5bdee99a74a2f5b1927b55b6a4fdb6a82f47dbc1","modified":1567415164000},{"_id":"themes/hexo-theme-material/contributing.json","hash":"1bc0871b1c7822b82533b614090ac0ab7c55282c","modified":1567415164000},{"_id":"themes/hexo-theme-material/lint.sh","hash":"49c3a65f8ca65754ec7fefcd2dcb6adc187f3856","modified":1567415164000},{"_id":"themes/hexo-theme-material/package.json","hash":"35274ddcf345997103e83f33a80fc036c74e4ee5","modified":1567415164000},{"_id":"themes/hexo-theme-material/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1567415164000},{"_id":"themes/hexo-theme-material/.git/config","hash":"25f809f40d4db61edb7a01aa9b2214c00a747153","modified":1567415164000},{"_id":"themes/hexo-theme-material/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1567414194000},{"_id":"themes/hexo-theme-material/.git/index","hash":"3809bfcf5d14db28fa6e61a88ef5015b96a54c33","modified":1567415164000},{"_id":"themes/hexo-theme-material/.git/packed-refs","hash":"c357c49658412ad7e995e08b99790e2f32fdd4c1","modified":1567415164000},{"_id":"themes/hexo-theme-material/.github/ISSUE_TEMPLATE.md","hash":"52a733a4d2e21a9c4d719495a0353c6719484f9f","modified":1567415164000},{"_id":"themes/hexo-theme-material/.github/PULL_REQUEST_TEMPLATE.md","hash":"f2a3a0b929c0909ab99c96fb82853c2c2d67961a","modified":1567415164000},{"_id":"themes/hexo-theme-material/languages/ar.yml","hash":"472d71f052e08f3c03b15dd67d11ad41f2eee7bf","modified":1567415164000},{"_id":"themes/hexo-theme-material/languages/de.yml","hash":"bce37d066ffa82f3e249d41d0ee883c913cc2c5f","modified":1567415164000},{"_id":"themes/hexo-theme-material/languages/en.yml","hash":"b59136a1b4d0a77e550b0e7e2e430cac44230dd3","modified":1567415164000},{"_id":"themes/hexo-theme-material/languages/es.yml","hash":"d35f5411bc87277cc2d3a58d9499ddb9cfd46f1b","modified":1567415164000},{"_id":"themes/hexo-theme-material/languages/fr.yml","hash":"f456cf31a72d97f2f18e3bb6cf735285d2b9d2c5","modified":1567415164000},{"_id":"themes/hexo-theme-material/languages/ja.yml","hash":"768b8330c9c73287efd475e68741ce4ebad29fd1","modified":1567415164000},{"_id":"themes/hexo-theme-material/languages/ko.yml","hash":"97526bf1fe67dc3fe50b20a64f94bac0d3dba673","modified":1567415164000},{"_id":"themes/hexo-theme-material/languages/ms.yml","hash":"237a39bbfcce33e7b918f6c5dc0f01bc79900262","modified":1567415164000},{"_id":"themes/hexo-theme-material/languages/nl_NL.yml","hash":"b71e59807716185627d6b9b84e44a79401df639f","modified":1567415164000},{"_id":"themes/hexo-theme-material/languages/pt-BR.yml","hash":"a070c2c4d0d3d54f8ca70513cff73c3f7c306db1","modified":1567415164000},{"_id":"themes/hexo-theme-material/languages/ru.yml","hash":"fbff2cf48dbde45adcad781e2fd6c30b523a4ac1","modified":1567415164000},{"_id":"themes/hexo-theme-material/languages/zh-CN.yml","hash":"c188cad1a16ab0651e2d2d03cb3fa79962cf65ff","modified":1567415164000},{"_id":"themes/hexo-theme-material/languages/zh-TW.yml","hash":"ec55953f0330f81bf1ffb37ff34de258dfda642a","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/index.ejs","hash":"a2b586b5bacd595360ddf29c11ef0a2998a01935","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/layout.ejs","hash":"ea811e2dc752e131a18dd999f2f1f4addb4b48bb","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/post.ejs","hash":"4dd572a9e84f3a6baa5e3f16d270e58e3cd31a23","modified":1567415164000},{"_id":"themes/hexo-theme-material/scripts/helper.js","hash":"e7111a8b1f0ab5bf3466378c48c260a4f6e527d6","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/Isolation-post-info.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1567415164000},{"_id":"themes/hexo-theme-material/scripts/lib/font_lsload.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1567415164000},{"_id":"themes/hexo-theme-material/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1567414194000},{"_id":"themes/hexo-theme-material/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1567414194000},{"_id":"themes/hexo-theme-material/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1567414194000},{"_id":"themes/hexo-theme-material/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1567414194000},{"_id":"themes/hexo-theme-material/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1567414194000},{"_id":"themes/hexo-theme-material/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1567414194000},{"_id":"themes/hexo-theme-material/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1567414194000},{"_id":"themes/hexo-theme-material/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1567414194000},{"_id":"themes/hexo-theme-material/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1567414194000},{"_id":"themes/hexo-theme-material/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1567414194000},{"_id":"themes/hexo-theme-material/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1567414194000},{"_id":"themes/hexo-theme-material/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1567414194000},{"_id":"themes/hexo-theme-material/.git/logs/HEAD","hash":"e81c2b16dee47d9edc1caa850dfc5f2228aeddd8","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/Paradox-post-thumbnail.ejs","hash":"6f1e9a85c089ce98a36a2954839fb9ce3e53739e","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/Paradox-post-info.ejs","hash":"125cfa5cd9e6e1ca5e958026fdd42f3c3141e34f","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/Isolation-post_entry.ejs","hash":"134dc82320b7aed7d4d78960be63e16c5c4a30fb","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/Paradox-post_entry-thumbnail.ejs","hash":"4d740eba338517d4e10d011a157cdefad45a8e1f","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/comment.ejs","hash":"c9fb1f98a18ca484cb52d60e2ad2bad25b56dfb2","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/Paradox-search.ejs","hash":"18a6971b04feccd124a096b8c7cecf1fd4bb914e","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/Paradox-post_entry.ejs","hash":"5f4d67e5bd70f635203706cf344b036d891073e6","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/blog_info.ejs","hash":"5e95796e6f9a81163554ca4198573860f7328d4e","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/daily_pic.ejs","hash":"e780fbdb79b5e27091c408545cfd5b64892c9b01","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/config_css.ejs","hash":"2b1e27faa0446a5e756e61ddf3e969e50948f1ce","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/config_font.ejs","hash":"f1439e7c22378c45ebfd9c04101e7511153699a3","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/footer-left.ejs","hash":"65c1ee9c6faef3d630564cabdb3278c94602b3d7","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/footer_top.ejs","hash":"9eaace4feb951c96c0033e7271497f3f300d2476","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/footer.ejs","hash":"e9633d1112d8369251b6c82f9c44b4231b813df9","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/footer-option.ejs","hash":"be20394eaeaf2d20db28946b948962c839da6ea9","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/isolate-sns_list.ejs","hash":"fc5f03ebb847f85975676a9dfee8870e7c908008","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/isolate_info.ejs","hash":"b8ec76716bfa2e6513b4df6814fe8676536a94c1","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/import_js.ejs","hash":"1638830cae8039c1979f3ae6783de9061380b9a5","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/head.ejs","hash":"6cb3de048e08ece3d280d36c4e06766aa6266eb1","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/post-content.ejs","hash":"ad626e3b60bc4a17bacff02cf9b0a8beaba2ad1e","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/post-header.ejs","hash":"b0b8973c48db6376a24d4b4b1d2eb15d18d6508c","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/post-nav.ejs","hash":"3b6d4568cc46f60c697ad9ec85a4aa5971f3eecc","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/sidebar-footer_image.ejs","hash":"b9157d2072028a1db3c3419f76bde6637e85cf0e","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/sidebar-footer.ejs","hash":"6c3486b846473e0d58666f7a8720f5bf4a14e030","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/post-info-share.ejs","hash":"9f28d62bf728c2bd89411688426a65d7ee55400c","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/sidebar-header.ejs","hash":"06295e01092f55504d30a343c3fdc5091280e495","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/sidebar-navigation.ejs","hash":"ff44901fdfdd952174b0d22e86df7163d7fba9ba","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/sidebar.ejs","hash":"c5ce6136e82895cb80dab8a918a7cdf2fe820fea","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/structured-data.ejs","hash":"e845df290185dc300cc4edcc08b50fddc5b6909b","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_partial/toc_button.ejs","hash":"688c3fc12e2548ff27fe60688f79dcce2881fd50","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/dnsprefetch.ejs","hash":"a6950132a5b3c073c9679645b93413a5ac7adb51","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/leancloud-views_num.ejs","hash":"e27baba6a2de406463735d276606b15fb40f5eba","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/mathjax.ejs","hash":"b68befe1fea84739c8429c344e570a8bc0357401","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/leancloud-views.ejs","hash":"211dc183b8e84f71b2c25b3ac6659d162d81662b","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/nprogress.ejs","hash":"901a64600854b312209287c702278183600e06b9","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/page-gallery.ejs","hash":"6331adcfad97d49e1820e42dc12a6f402c8b9c81","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/page-links.ejs","hash":"0ebe18e4326f921d6010df8479a08c2d403ba717","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/page-tagcloud.ejs","hash":"e71de74e4067cc4e6aef1e09ac429c92bcd178b3","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/qrcode.ejs","hash":"3212e5d29fe8490c5d9a844ec9c2ce9925532de8","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/page-timeline.ejs","hash":"9fa0195e08d9fd40aa0333e9279c98bc65acf604","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/search-local-js.ejs","hash":"f42cc040adf47fc7d74f64b0be3c3230e8a3339e","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/search-swiftype-js.ejs","hash":"7ad1e843e620ccd9b3c041dccfdcee97921247a1","modified":1567415164000},{"_id":"themes/hexo-theme-material/scripts/lib/get_file_hex.js","hash":"eb3b9a45f8ca45ef40d5421baef7d4484023982c","modified":1567415164000},{"_id":"themes/hexo-theme-material/scripts/lib/js_hex.js","hash":"2704583aa036d538544ce31c2e924c0c125309dd","modified":1567415164000},{"_id":"themes/hexo-theme-material/scripts/lib/css_lsload.js","hash":"179f5f5e3297a7fb7d90545ddd94eb468a11046e","modified":1567415164000},{"_id":"themes/hexo-theme-material/scripts/lib/path_for.js","hash":"f944e3b53a468962121aa3357cc0bc18ac27a34c","modified":1567415164000},{"_id":"themes/hexo-theme-material/scripts/lib/js_lsload.js","hash":"72f885b13fe0028a0e2acb7168dcc66e39ea1592","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/disqus-proxy.css","hash":"770776d8cec27cd5661bdfd59eff9af263439989","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/leancloud-like.ejs","hash":"e4780fe3bbb049db38d694fc18dee13d799bd51d","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/fontawesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/material-icons.css","hash":"f6f95fe5190f3c65931847246621fb83754eb00c","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify.css","hash":"c395f20ee64e80c2b6b15c7dade02f9aaaeab2c8","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify.min.css","hash":"62edd8f08656463b0e077dcf893faa3cc8eb5fe4","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/js/Valine.min.js","hash":"6a287a99a772a0ea8f98b133523429c9250cc67f","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/js/hanabi-browser-bundle.js","hash":"d646647bda386140c8315d60e3ff4ddbdb15c1ea","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/js/MathJax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/js/lsloader.js","hash":"2b14e57784fb6b5f58d71584189c61af45f393e8","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/js/lsloader.min.js","hash":"1a68a8d267948ea8475245b7d365a1a1bd8f732e","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/js/prettify.min.js","hash":"69908fe0a09cee107c25cb5d769b861723e7b7bb","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/material.css","hash":"068e2b00f686157b6e8b78b9b808112adbedf4de","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/material.min.css","hash":"1a19febb9214ab689b02f5bb8ccb23579e6c1181","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/style.min.css","hash":"feec7397cdef3776701505bc2afe6df3291ece5a","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/style.css","hash":"a499a32b44c86c63e1d848ea6a0b4f3d89f52e73","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/js/js.js","hash":"d919314cdfe92664462d67738ff9f4aaad0afb8c","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/js/js.min.js","hash":"ad613dad94f0e82e5c4ed179de43de2ac709143c","modified":1567415164000},{"_id":"themes/hexo-theme-material/.git/refs/heads/master","hash":"660f7f9af6ae2c9f455c888af8087c2848e9404d","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/analytics/cnzz-analytics.ejs","hash":"1765e3dcd92961292f40d1812e593186c77b17ef","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/analytics/baidu-analytics.ejs","hash":"3866a7fead3c1f94a517f1f9d629f092670b1520","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/analytics/google-analytics.ejs","hash":"3b10ebf524baf0c24b22dcd110b39d15c5acb9b5","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-cave-dark.min.css","hash":"cb0156cdc36500a26b232ae1c81fdc880eba85e7","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-cave-light.min.css","hash":"4b62dc45aa351b071d6a434dc54fe8c2e15c85cc","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-estuary-dark.min.css","hash":"7e3a065cafeb3acc1d7178f64ef4265f5d5ad2b9","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-dune-dark.min.css","hash":"c5094d99ca0e619d97860c88211bf908fdf830b1","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-dune-light.min.css","hash":"b3ad98483e4d5bde72d52a15423d98e0d086db09","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-estuary-light.min.css","hash":"1d12d8f7fa9c122a186ee76fdf681c191a68f104","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-forest-dark.min.css","hash":"9296b851a5b66785a60afa5da5fe9080bda96bf5","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-forest-light.min.css","hash":"3532f6e86bf4afbba05f7a074b791b73174f9622","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-heath-dark.min.css","hash":"954309acd7918422382a3ff2f9c2988aec0ff956","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-heath-light.min.css","hash":"a67199fa580b3aa2df031e5d2028929d29ca3b45","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-lakeside-dark.min.css","hash":"18575fc6dff855e395a39d0383d2f18807091f0d","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-lakeside-light.min.css","hash":"e20e8ac64432fa1aa6f74792b58196af7cf79c12","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-plateau-dark.min.css","hash":"137e3c499a720da3c1d57b4dc53264b1d623e1c5","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-plateau-light.min.css","hash":"153801640fdcbb74c0de3f15345110f2210eb991","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-savanna-dark.min.css","hash":"fba92c652fd6704422b8f2bbc11706805a6faed0","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-savanna-light.min.css","hash":"d9425ffb7c60d646190c22b9a5f72091ee5f9ace","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-seaside-dark.min.css","hash":"e0e6bbacc75a349b1e49c236d374b0e42f1fd485","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-seaside-light.min.css","hash":"732750b75389c1c49204f37705e6abeee40ce64f","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-sulphurpool-dark.min.css","hash":"015a35dddaee153fa8bb71d7f3818a6ba4d120d8","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-sulphurpool-light.min.css","hash":"ab1a6200eab648cab443c3df77fde9b237ef27b6","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/github-v2.min.css","hash":"57630621d20842a529bdea7b17fc90f520e562ef","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/github.min.css","hash":"19cf828225288fa5c006f1d8f66c39d11f4ef7f2","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/hemisu-dark.min.css","hash":"a671248cfd573292026d2174817e82e593691052","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/hemisu-light.min.css","hash":"b2556ff41e513fd13d032ec84a37ee260a905815","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/tomorrow-night-blue.min.css","hash":"c442728d96485bcf816151fe6bd96993aae09852","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/tomorrow-night-bright.min.css","hash":"cf251fd3edfd736695272a0f1b41d509b7bb1fb9","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/tomorrow-night-eighties.min.css","hash":"6ce259d674bb4edda23eea32b2379be17d0e0e6e","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/tomorrow-night.min.css","hash":"d989206d124035494acb4b0cdc7fbc89f3b7d108","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/tomorrow.min.css","hash":"b2c6d610b77f0273fefab5aa4ad26a7f58956f87","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/tranquil-heart.min.css","hash":"0f6eefbdda8e410832e9c516a5dd19899217ef06","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/css/prettify/vibrant-ink.min.css","hash":"c265bac6c31cf622b536b29c8a6bc46955d6fe63","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-segmentfault.svg","hash":"f6c667cff0c57095ce01b7adb4f18b3c92dc060b","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-v2ex.svg","hash":"c5ffaf67a97e534c266d1585a9a3b56f1bfe3052","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/comment/livere/common.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/comment/valine/common.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1567415164000},{"_id":"themes/hexo-theme-material/.git/logs/refs/heads/master","hash":"e81c2b16dee47d9edc1caa850dfc5f2228aeddd8","modified":1567415164000},{"_id":"themes/hexo-theme-material/.git/objects/pack/pack-c5662be99e3029799a3487fe8cf999e95f8a4dc0.idx","hash":"f962dd8062eecb1fd098bf161ce746ee67744b91","modified":1567415164000},{"_id":"themes/hexo-theme-material/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/comment/disqus/common.ejs","hash":"c11cfceb0906a96399dede5da01ff7fe4787f8a5","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/comment/disqus/enter.ejs","hash":"39192034766349e47967da63184f9104fdded2ab","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/comment/disqus/main.ejs","hash":"21e0eeff664191b818d7a0071ae7edcdfc270442","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/comment/changyan/common.ejs","hash":"40e1fc76d6b7f64e226693fb2fe1a6bb17bae245","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/comment/changyan/enter.ejs","hash":"e3cfb4f37ea35457f112f3e822e130c930086497","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/comment/changyan/main.ejs","hash":"77539ff32cc9d1204b848e01b5277fff5cbd61e0","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/comment/gitalk/common.ejs","hash":"f739897518011e1b3de7807c8c5d734984711282","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/comment/gitalk/enter.ejs","hash":"4d70d76465469a57def29a221962a5520fb34ebe","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/comment/disqus_click/common.ejs","hash":"d243f576b366a62191066459efcc6fd0ab79d00a","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/comment/disqus_click/enter.ejs","hash":"d82f0296f8bae25223ec44e6e05b817d3a234884","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/comment/gitalk/main.ejs","hash":"1ee7a7b2b9b5ae8c4fa8c4b09c7973b9e085bdf2","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/comment/disqus_click/main.ejs","hash":"f53de208ca46c669a868a1922488e39509c6fe3b","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/comment/gitment/common.ejs","hash":"9c6c8d1b448c32afb01c2d0351e87f4d4a17ec3c","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/comment/gitment/enter.ejs","hash":"d0307598380be2ce0126cadd451a4a907184e488","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/comment/gitment/main.ejs","hash":"e622660eda38cda05847aadc2a3e31a228fc519b","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/comment/livere/enter.ejs","hash":"194b7bb581a3b8608a7ab135b6953d7908f51cc8","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/comment/livere/main.ejs","hash":"1c4be9ba104a8cbcc11d45f11bf8cfe7704b93a5","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/comment/wildfire/common.ejs","hash":"c43dabb52245d1d39e20882a42e0cd30d0abfe76","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/comment/wildfire/enter.ejs","hash":"492927e61fa1dda0dcc97f0bb74bad533ca9f7ec","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/comment/wildfire/main.ejs","hash":"cd6a1e3f71f552c2412f6dbe41c08042625180e6","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/comment/valine/enter.ejs","hash":"ab528aad46237d9e7f1c5b4b2b310dd628b2de63","modified":1567415164000},{"_id":"themes/hexo-theme-material/layout/_widget/comment/valine/main.ejs","hash":"04c41da0bf670272d440df61791e63e664f9b689","modified":1567415164000},{"_id":"themes/hexo-theme-material/.git/logs/refs/remotes/origin/HEAD","hash":"e81c2b16dee47d9edc1caa850dfc5f2228aeddd8","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1567415164000},{"_id":"themes/hexo-theme-material/source/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1567415164000},{"_id":"themes/hexo-theme-material/.git/objects/pack/pack-c5662be99e3029799a3487fe8cf999e95f8a4dc0.pack","hash":"91092d2a638ea01e8461c880f49885ffecc01c49","modified":1567415164000},{"_id":"public/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1567417836182},{"_id":"public/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1567417836182},{"_id":"public/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1567417836182},{"_id":"public/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1567417836183},{"_id":"public/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1567417836183},{"_id":"public/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1567417836183},{"_id":"public/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1567417836183},{"_id":"public/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1567417836183},{"_id":"public/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1567417836183},{"_id":"public/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1567417836183},{"_id":"public/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1567417836183},{"_id":"public/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1567417836183},{"_id":"public/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1567417836183},{"_id":"public/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1567417836183},{"_id":"public/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1567417836183},{"_id":"public/img/footer/footer_ico-segmentfault.svg","hash":"f6c667cff0c57095ce01b7adb4f18b3c92dc060b","modified":1567417836183},{"_id":"public/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1567417836184},{"_id":"public/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1567417836184},{"_id":"public/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1567417836184},{"_id":"public/img/footer/footer_ico-v2ex.svg","hash":"c5ffaf67a97e534c266d1585a9a3b56f1bfe3052","modified":1567417836184},{"_id":"public/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1567417836184},{"_id":"public/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1567417836184},{"_id":"public/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1567417836184},{"_id":"public/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1567417836184},{"_id":"public/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1567417836184},{"_id":"public/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1567417836184},{"_id":"public/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1567417836184},{"_id":"public/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1567417836184},{"_id":"public/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1567417836184},{"_id":"public/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1567417836184},{"_id":"public/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1567417836185},{"_id":"public/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1567417836185},{"_id":"public/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1567417836185},{"_id":"public/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1567417836185},{"_id":"public/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1567417836194},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1567417836199},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1567417836201},{"_id":"public/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1567417836202},{"_id":"public/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1567417836202},{"_id":"public/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1567417836202},{"_id":"public/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1567417836202},{"_id":"public/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1567417836202},{"_id":"public/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1567417836202},{"_id":"public/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1567417836202},{"_id":"public/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1567417836202},{"_id":"public/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1567417836202},{"_id":"public/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1567417836202},{"_id":"public/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1567417836203},{"_id":"public/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1567417836217},{"_id":"public/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1567417836217},{"_id":"public/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1567417836217},{"_id":"public/css/prettify.css","hash":"c395f20ee64e80c2b6b15c7dade02f9aaaeab2c8","modified":1567417836217},{"_id":"public/css/prettify.min.css","hash":"62edd8f08656463b0e077dcf893faa3cc8eb5fe4","modified":1567417836217},{"_id":"public/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1567417836217},{"_id":"public/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1567417836217},{"_id":"public/js/hanabi-browser-bundle.js","hash":"d646647bda386140c8315d60e3ff4ddbdb15c1ea","modified":1567417836217},{"_id":"public/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1567417836217},{"_id":"public/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1567417836217},{"_id":"public/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1567417836217},{"_id":"public/js/lsloader.js","hash":"2b14e57784fb6b5f58d71584189c61af45f393e8","modified":1567417836217},{"_id":"public/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1567417836218},{"_id":"public/js/lsloader.min.js","hash":"1a68a8d267948ea8475245b7d365a1a1bd8f732e","modified":1567417836218},{"_id":"public/js/prettify.min.js","hash":"69908fe0a09cee107c25cb5d769b861723e7b7bb","modified":1567417836218},{"_id":"public/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1567417836218},{"_id":"public/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1567417836218},{"_id":"public/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1567417836218},{"_id":"public/css/prettify/atelier-cave-dark.min.css","hash":"cb0156cdc36500a26b232ae1c81fdc880eba85e7","modified":1567417836218},{"_id":"public/css/prettify/atelier-cave-light.min.css","hash":"4b62dc45aa351b071d6a434dc54fe8c2e15c85cc","modified":1567417836218},{"_id":"public/css/prettify/atelier-estuary-dark.min.css","hash":"7e3a065cafeb3acc1d7178f64ef4265f5d5ad2b9","modified":1567417836218},{"_id":"public/css/prettify/atelier-dune-dark.min.css","hash":"c5094d99ca0e619d97860c88211bf908fdf830b1","modified":1567417836218},{"_id":"public/css/prettify/atelier-dune-light.min.css","hash":"b3ad98483e4d5bde72d52a15423d98e0d086db09","modified":1567417836218},{"_id":"public/css/prettify/atelier-estuary-light.min.css","hash":"1d12d8f7fa9c122a186ee76fdf681c191a68f104","modified":1567417836218},{"_id":"public/css/prettify/atelier-forest-dark.min.css","hash":"9296b851a5b66785a60afa5da5fe9080bda96bf5","modified":1567417836218},{"_id":"public/css/prettify/atelier-forest-light.min.css","hash":"3532f6e86bf4afbba05f7a074b791b73174f9622","modified":1567417836218},{"_id":"public/css/prettify/atelier-heath-dark.min.css","hash":"954309acd7918422382a3ff2f9c2988aec0ff956","modified":1567417836219},{"_id":"public/css/prettify/atelier-heath-light.min.css","hash":"a67199fa580b3aa2df031e5d2028929d29ca3b45","modified":1567417836219},{"_id":"public/css/prettify/atelier-lakeside-dark.min.css","hash":"18575fc6dff855e395a39d0383d2f18807091f0d","modified":1567417836219},{"_id":"public/css/prettify/atelier-lakeside-light.min.css","hash":"e20e8ac64432fa1aa6f74792b58196af7cf79c12","modified":1567417836219},{"_id":"public/css/prettify/atelier-plateau-dark.min.css","hash":"137e3c499a720da3c1d57b4dc53264b1d623e1c5","modified":1567417836219},{"_id":"public/css/prettify/atelier-plateau-light.min.css","hash":"153801640fdcbb74c0de3f15345110f2210eb991","modified":1567417836219},{"_id":"public/css/prettify/atelier-savanna-dark.min.css","hash":"fba92c652fd6704422b8f2bbc11706805a6faed0","modified":1567417836219},{"_id":"public/css/prettify/atelier-savanna-light.min.css","hash":"d9425ffb7c60d646190c22b9a5f72091ee5f9ace","modified":1567417836219},{"_id":"public/css/prettify/atelier-seaside-dark.min.css","hash":"e0e6bbacc75a349b1e49c236d374b0e42f1fd485","modified":1567417836219},{"_id":"public/css/prettify/atelier-seaside-light.min.css","hash":"732750b75389c1c49204f37705e6abeee40ce64f","modified":1567417836219},{"_id":"public/css/prettify/atelier-sulphurpool-dark.min.css","hash":"015a35dddaee153fa8bb71d7f3818a6ba4d120d8","modified":1567417836219},{"_id":"public/css/prettify/atelier-sulphurpool-light.min.css","hash":"ab1a6200eab648cab443c3df77fde9b237ef27b6","modified":1567417836219},{"_id":"public/css/prettify/github.min.css","hash":"19cf828225288fa5c006f1d8f66c39d11f4ef7f2","modified":1567417836219},{"_id":"public/css/prettify/hemisu-dark.min.css","hash":"a671248cfd573292026d2174817e82e593691052","modified":1567417836219},{"_id":"public/css/prettify/hemisu-light.min.css","hash":"b2556ff41e513fd13d032ec84a37ee260a905815","modified":1567417836219},{"_id":"public/css/prettify/github-v2.min.css","hash":"57630621d20842a529bdea7b17fc90f520e562ef","modified":1567417836220},{"_id":"public/css/prettify/tomorrow-night-blue.min.css","hash":"c442728d96485bcf816151fe6bd96993aae09852","modified":1567417836220},{"_id":"public/css/prettify/tomorrow-night-bright.min.css","hash":"cf251fd3edfd736695272a0f1b41d509b7bb1fb9","modified":1567417836220},{"_id":"public/css/prettify/tomorrow-night-eighties.min.css","hash":"6ce259d674bb4edda23eea32b2379be17d0e0e6e","modified":1567417836220},{"_id":"public/css/prettify/tomorrow-night.min.css","hash":"d989206d124035494acb4b0cdc7fbc89f3b7d108","modified":1567417836220},{"_id":"public/css/prettify/tomorrow.min.css","hash":"b2c6d610b77f0273fefab5aa4ad26a7f58956f87","modified":1567417836220},{"_id":"public/css/prettify/tranquil-heart.min.css","hash":"0f6eefbdda8e410832e9c516a5dd19899217ef06","modified":1567417836220},{"_id":"public/css/prettify/vibrant-ink.min.css","hash":"c265bac6c31cf622b536b29c8a6bc46955d6fe63","modified":1567417836220},{"_id":"public/css/disqus-proxy.css","hash":"d5086cda8aaae20b8d3f9dd50f0be5ccb717e42a","modified":1567417836220},{"_id":"public/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1567417836220},{"_id":"public/css/fontawesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1567417836220},{"_id":"public/css/material-icons.css","hash":"f6f95fe5190f3c65931847246621fb83754eb00c","modified":1567417836220},{"_id":"public/js/Valine.min.js","hash":"6a287a99a772a0ea8f98b133523429c9250cc67f","modified":1567417836220},{"_id":"public/js/MathJax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1567417836220},{"_id":"public/css/material.css","hash":"068e2b00f686157b6e8b78b9b808112adbedf4de","modified":1567417836221},{"_id":"public/css/material.min.css","hash":"1a19febb9214ab689b02f5bb8ccb23579e6c1181","modified":1567417836221},{"_id":"public/css/style.min.css","hash":"feec7397cdef3776701505bc2afe6df3291ece5a","modified":1567417836221},{"_id":"public/css/style.css","hash":"a499a32b44c86c63e1d848ea6a0b4f3d89f52e73","modified":1567417836221},{"_id":"public/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1567417836221},{"_id":"public/js/js.js","hash":"d919314cdfe92664462d67738ff9f4aaad0afb8c","modified":1567417836221},{"_id":"public/js/js.min.js","hash":"ad613dad94f0e82e5c4ed179de43de2ac709143c","modified":1567417836221},{"_id":"public/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1567417836221},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1567417836221},{"_id":"public/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1567417836221},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1567417836221},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1567417836222},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1567417836246},{"_id":"public/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1567417836250},{"_id":"public/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1567417836250},{"_id":"public/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1567417836250},{"_id":"public/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1567417836250},{"_id":"public/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1567417836251},{"_id":"public/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1567417836251},{"_id":"source/avatar/avator.jpg","hash":"268c0cbfd27f0436a7b8a5a8c19d41be83b469b8","modified":1567422278252},{"_id":"public/avatar/avator.jpg","hash":"268c0cbfd27f0436a7b8a5a8c19d41be83b469b8","modified":1567423041254},{"_id":"source/images/favicon.png","hash":"bf952c6228f82a7ecf3a71ac19396c1a5bd7f123","modified":1567422895791}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2018-12-15T03:21:24.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-12-15 11:21:24\ntype: \"tags\"\n---\n","updated":"2019-09-02T07:37:22.949Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck024po2s0036y6fgrw6jup6u","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Linux下离线安装nodejs","date":"2018-05-12T10:36:16.000Z","_content":"\n\n##### Linux下离线安装nodejs步骤:\n---\n\n1.在官网下载Linux版本的nodejs安装包,然后解压并且移动到/usr/local/目录,具体目录可随意指定\n\n`sudo tar -xvJf ./node-v8.9.3-linux-x64.tar.xz -C /usr/local/`\n\n2.配置环境变量，编辑～/.bashrc文件(当前用户的环境变量配置)\n\n`export NODE_HOME=/opt/node`\n\n`export PATH=$PATH:$NODE_HOME/bin`\n\n`export NODE_PATH=$NODE_HOME/lib/node_modules`\n\n3.使配置生效,执行source命令\n\n`source ~/.bashrc`\n\n4.执行如下命令校验配置是否生效\n\n`node -v`\n\n`npm -v`\n","source":"_posts/Linux下安装nodejs.md","raw":"---\ntitle: Linux下离线安装nodejs\ndate: 2018-05-12 18:36:16\ntags:\n- linux\n- nodejs\n---\n\n\n##### Linux下离线安装nodejs步骤:\n---\n\n1.在官网下载Linux版本的nodejs安装包,然后解压并且移动到/usr/local/目录,具体目录可随意指定\n\n`sudo tar -xvJf ./node-v8.9.3-linux-x64.tar.xz -C /usr/local/`\n\n2.配置环境变量，编辑～/.bashrc文件(当前用户的环境变量配置)\n\n`export NODE_HOME=/opt/node`\n\n`export PATH=$PATH:$NODE_HOME/bin`\n\n`export NODE_PATH=$NODE_HOME/lib/node_modules`\n\n3.使配置生效,执行source命令\n\n`source ~/.bashrc`\n\n4.执行如下命令校验配置是否生效\n\n`node -v`\n\n`npm -v`\n","slug":"Linux下安装nodejs","published":1,"updated":"2019-09-02T07:37:22.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck024pnus0000y6fga2a8fngc","content":"<h5 id=\"Linux下离线安装nodejs步骤\"><a href=\"#Linux下离线安装nodejs步骤\" class=\"headerlink\" title=\"Linux下离线安装nodejs步骤:\"></a>Linux下离线安装nodejs步骤:</h5><hr>\n<p>1.在官网下载Linux版本的nodejs安装包,然后解压并且移动到/usr/local/目录,具体目录可随意指定</p>\n<p><code>sudo tar -xvJf ./node-v8.9.3-linux-x64.tar.xz -C /usr/local/</code></p>\n<p>2.配置环境变量，编辑～/.bashrc文件(当前用户的环境变量配置)</p>\n<p><code>export NODE_HOME=/opt/node</code></p>\n<p><code>export PATH=$PATH:$NODE_HOME/bin</code></p>\n<p><code>export NODE_PATH=$NODE_HOME/lib/node_modules</code></p>\n<p>3.使配置生效,执行source命令</p>\n<p><code>source ~/.bashrc</code></p>\n<p>4.执行如下命令校验配置是否生效</p>\n<p><code>node -v</code></p>\n<p><code>npm -v</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"Linux下离线安装nodejs步骤\"><a href=\"#Linux下离线安装nodejs步骤\" class=\"headerlink\" title=\"Linux下离线安装nodejs步骤:\"></a>Linux下离线安装nodejs步骤:</h5><hr>\n<p>1.在官网下载Linux版本的nodejs安装包,然后解压并且移动到/usr/local/目录,具体目录可随意指定</p>\n<p><code>sudo tar -xvJf ./node-v8.9.3-linux-x64.tar.xz -C /usr/local/</code></p>\n<p>2.配置环境变量，编辑～/.bashrc文件(当前用户的环境变量配置)</p>\n<p><code>export NODE_HOME=/opt/node</code></p>\n<p><code>export PATH=$PATH:$NODE_HOME/bin</code></p>\n<p><code>export NODE_PATH=$NODE_HOME/lib/node_modules</code></p>\n<p>3.使配置生效,执行source命令</p>\n<p><code>source ~/.bashrc</code></p>\n<p>4.执行如下命令校验配置是否生效</p>\n<p><code>node -v</code></p>\n<p><code>npm -v</code></p>\n"},{"title":"Linux常用压缩解压缩","date":"2018-05-20T09:08:52.000Z","_content":"\n    摘要:\n      Linux下常用的压缩格式有:.zip .gz .bz2 .tar.gz .tar.bz2\n\n#### 1 .zip格式压缩\n\n压缩文件 `zip 压缩文件名 源文件`\n\n    zip test.zip ./test.txt #将当前目录的test.txt文档压缩为test.zip\n\n压缩目录 `zip -r 压缩文件名 源目录`\n\n    zip test1.zip ./test1 #将当前目录的test1目录压缩为test1.zip\n\n#### 2 .zip格式解压缩\n\n解压文件  `unzip 压缩文件`\n\n    zip ./test1.zip #解压缩当前目录的test1.zip文件\n\n#### 3 .gz格式压缩\n\n压缩为.gz文件,源文件消失  `gzip 源文件`\n\n压缩为.gz文件,源文件保留  `gzip -c 源文件 > 压缩文件`\n\n压缩目录下的所有子文件,但是不能压缩目录  `gzip -r 目录`\n\n#### 4 .gz格式解压缩\n\n解压缩.gz文件  `gzip -d 压缩文件`\n\n解压缩.gz文件  `gunzip  压缩文件`\n\n#### 5 .bz2格式压缩\n\n压缩为.bz2格式,不保留源文件  `bzip2 源文件`\n\n压缩为.bz2格式,保留源文件 `bzip2 -k 源文件`\n\n注:bzip2不能压缩目录\n\n#### 6 .bz2格式解压缩\n\n解压缩.bz2文件,-k保留压缩文件  `bzip2 -d 压缩文件`\n\n解压缩.bz2文件,-k保留压缩文件  `bunzip2 压缩文件`\n\n#### 7 .tar.gz格式压缩(先打包为tar,再压缩为.gz文件)\n\ntar打包命令  `tar -cvf 打包文件名 源文件`\n\n选项: -c 打包; -v 现实过程; -f 指定打包后的文件名\n\ntar -cvf test.tar ./test 将当前目录下test目录打包为tar文件\n\ngzip test.tar  生成test.tar.gz文件\n\nbzip2 test.tar 生成test.tar.bz2文件\n\n上述过程繁琐,可以直接用  `tar -zcvf 压缩包名.tar.gz 源文件`\n\n#### 8 .tar.gz格式解压缩(先用gzip解压文件,然后解打包)\n\n解打包命令  `tar -xvf 打包文件名`\n\n选项: -x 解打包\n\ntar -vxf test.tar   解包text.tar文件\n\n上述过程繁琐,可以直接用  `tar -zxvf 压缩包名.tar.gz`,\n解压到指定目录可用-C选项指定目录 `tar -zxvf 压缩包名.tar.gz -C /tmp/`\n\n#### 9 .tar.bz2格式压缩(先打包为tar,再压缩为.bz2文件)\n\ntar打包命令  `tar -cvf 打包文件名 源文件`\n\n选项: -c 打包; -v 现实过程; -f 指定打包后的文件名\n\ntar -cvf test.tar ./test 将当前目录下test目录打包为tar文件\n\nbzip2 test.tar 生成test.tar.bz2文件\n\n上述过程繁琐,可以直接用  `tar -jcvf 压缩包名.tar.bz2 源文件`\n\n#### 10 .tar.bz2格式解压缩(先用bzip2解压文件,然后解打包)\n\n解打包命令  `tar -xvf 打包文件名`\n\n选项: -x 解打包\n\ntar -vxf test.tar   解包text.tar文件\n\n上述过程繁琐,可以直接用  `tar -jxvf 压缩包名.tar.bz2`,\n解压到指定目录可用-C选项指定目录 `tar -jxvf 压缩包名.tar.bz2 -C /tmp/`\n","source":"_posts/Linux常用压缩解压缩.md","raw":"---\ntitle: Linux常用压缩解压缩\ndate: 2018-05-20 17:08:52\ntags: linux\n---\n\n    摘要:\n      Linux下常用的压缩格式有:.zip .gz .bz2 .tar.gz .tar.bz2\n\n#### 1 .zip格式压缩\n\n压缩文件 `zip 压缩文件名 源文件`\n\n    zip test.zip ./test.txt #将当前目录的test.txt文档压缩为test.zip\n\n压缩目录 `zip -r 压缩文件名 源目录`\n\n    zip test1.zip ./test1 #将当前目录的test1目录压缩为test1.zip\n\n#### 2 .zip格式解压缩\n\n解压文件  `unzip 压缩文件`\n\n    zip ./test1.zip #解压缩当前目录的test1.zip文件\n\n#### 3 .gz格式压缩\n\n压缩为.gz文件,源文件消失  `gzip 源文件`\n\n压缩为.gz文件,源文件保留  `gzip -c 源文件 > 压缩文件`\n\n压缩目录下的所有子文件,但是不能压缩目录  `gzip -r 目录`\n\n#### 4 .gz格式解压缩\n\n解压缩.gz文件  `gzip -d 压缩文件`\n\n解压缩.gz文件  `gunzip  压缩文件`\n\n#### 5 .bz2格式压缩\n\n压缩为.bz2格式,不保留源文件  `bzip2 源文件`\n\n压缩为.bz2格式,保留源文件 `bzip2 -k 源文件`\n\n注:bzip2不能压缩目录\n\n#### 6 .bz2格式解压缩\n\n解压缩.bz2文件,-k保留压缩文件  `bzip2 -d 压缩文件`\n\n解压缩.bz2文件,-k保留压缩文件  `bunzip2 压缩文件`\n\n#### 7 .tar.gz格式压缩(先打包为tar,再压缩为.gz文件)\n\ntar打包命令  `tar -cvf 打包文件名 源文件`\n\n选项: -c 打包; -v 现实过程; -f 指定打包后的文件名\n\ntar -cvf test.tar ./test 将当前目录下test目录打包为tar文件\n\ngzip test.tar  生成test.tar.gz文件\n\nbzip2 test.tar 生成test.tar.bz2文件\n\n上述过程繁琐,可以直接用  `tar -zcvf 压缩包名.tar.gz 源文件`\n\n#### 8 .tar.gz格式解压缩(先用gzip解压文件,然后解打包)\n\n解打包命令  `tar -xvf 打包文件名`\n\n选项: -x 解打包\n\ntar -vxf test.tar   解包text.tar文件\n\n上述过程繁琐,可以直接用  `tar -zxvf 压缩包名.tar.gz`,\n解压到指定目录可用-C选项指定目录 `tar -zxvf 压缩包名.tar.gz -C /tmp/`\n\n#### 9 .tar.bz2格式压缩(先打包为tar,再压缩为.bz2文件)\n\ntar打包命令  `tar -cvf 打包文件名 源文件`\n\n选项: -c 打包; -v 现实过程; -f 指定打包后的文件名\n\ntar -cvf test.tar ./test 将当前目录下test目录打包为tar文件\n\nbzip2 test.tar 生成test.tar.bz2文件\n\n上述过程繁琐,可以直接用  `tar -jcvf 压缩包名.tar.bz2 源文件`\n\n#### 10 .tar.bz2格式解压缩(先用bzip2解压文件,然后解打包)\n\n解打包命令  `tar -xvf 打包文件名`\n\n选项: -x 解打包\n\ntar -vxf test.tar   解包text.tar文件\n\n上述过程繁琐,可以直接用  `tar -jxvf 压缩包名.tar.bz2`,\n解压到指定目录可用-C选项指定目录 `tar -jxvf 压缩包名.tar.bz2 -C /tmp/`\n","slug":"Linux常用压缩解压缩","published":1,"updated":"2019-09-02T07:37:22.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck024pnuy0001y6fg0m4li3aj","content":"<pre><code>摘要:\n  Linux下常用的压缩格式有:.zip .gz .bz2 .tar.gz .tar.bz2\n</code></pre><h4 id=\"1-zip格式压缩\"><a href=\"#1-zip格式压缩\" class=\"headerlink\" title=\"1 .zip格式压缩\"></a>1 .zip格式压缩</h4><p>压缩文件 <code>zip 压缩文件名 源文件</code></p>\n<pre><code>zip test.zip ./test.txt #将当前目录的test.txt文档压缩为test.zip\n</code></pre><p>压缩目录 <code>zip -r 压缩文件名 源目录</code></p>\n<pre><code>zip test1.zip ./test1 #将当前目录的test1目录压缩为test1.zip\n</code></pre><h4 id=\"2-zip格式解压缩\"><a href=\"#2-zip格式解压缩\" class=\"headerlink\" title=\"2 .zip格式解压缩\"></a>2 .zip格式解压缩</h4><p>解压文件  <code>unzip 压缩文件</code></p>\n<pre><code>zip ./test1.zip #解压缩当前目录的test1.zip文件\n</code></pre><h4 id=\"3-gz格式压缩\"><a href=\"#3-gz格式压缩\" class=\"headerlink\" title=\"3 .gz格式压缩\"></a>3 .gz格式压缩</h4><p>压缩为.gz文件,源文件消失  <code>gzip 源文件</code></p>\n<p>压缩为.gz文件,源文件保留  <code>gzip -c 源文件 &gt; 压缩文件</code></p>\n<p>压缩目录下的所有子文件,但是不能压缩目录  <code>gzip -r 目录</code></p>\n<h4 id=\"4-gz格式解压缩\"><a href=\"#4-gz格式解压缩\" class=\"headerlink\" title=\"4 .gz格式解压缩\"></a>4 .gz格式解压缩</h4><p>解压缩.gz文件  <code>gzip -d 压缩文件</code></p>\n<p>解压缩.gz文件  <code>gunzip  压缩文件</code></p>\n<h4 id=\"5-bz2格式压缩\"><a href=\"#5-bz2格式压缩\" class=\"headerlink\" title=\"5 .bz2格式压缩\"></a>5 .bz2格式压缩</h4><p>压缩为.bz2格式,不保留源文件  <code>bzip2 源文件</code></p>\n<p>压缩为.bz2格式,保留源文件 <code>bzip2 -k 源文件</code></p>\n<p>注:bzip2不能压缩目录</p>\n<h4 id=\"6-bz2格式解压缩\"><a href=\"#6-bz2格式解压缩\" class=\"headerlink\" title=\"6 .bz2格式解压缩\"></a>6 .bz2格式解压缩</h4><p>解压缩.bz2文件,-k保留压缩文件  <code>bzip2 -d 压缩文件</code></p>\n<p>解压缩.bz2文件,-k保留压缩文件  <code>bunzip2 压缩文件</code></p>\n<h4 id=\"7-tar-gz格式压缩-先打包为tar-再压缩为-gz文件\"><a href=\"#7-tar-gz格式压缩-先打包为tar-再压缩为-gz文件\" class=\"headerlink\" title=\"7 .tar.gz格式压缩(先打包为tar,再压缩为.gz文件)\"></a>7 .tar.gz格式压缩(先打包为tar,再压缩为.gz文件)</h4><p>tar打包命令  <code>tar -cvf 打包文件名 源文件</code></p>\n<p>选项: -c 打包; -v 现实过程; -f 指定打包后的文件名</p>\n<p>tar -cvf test.tar ./test 将当前目录下test目录打包为tar文件</p>\n<p>gzip test.tar  生成test.tar.gz文件</p>\n<p>bzip2 test.tar 生成test.tar.bz2文件</p>\n<p>上述过程繁琐,可以直接用  <code>tar -zcvf 压缩包名.tar.gz 源文件</code></p>\n<h4 id=\"8-tar-gz格式解压缩-先用gzip解压文件-然后解打包\"><a href=\"#8-tar-gz格式解压缩-先用gzip解压文件-然后解打包\" class=\"headerlink\" title=\"8 .tar.gz格式解压缩(先用gzip解压文件,然后解打包)\"></a>8 .tar.gz格式解压缩(先用gzip解压文件,然后解打包)</h4><p>解打包命令  <code>tar -xvf 打包文件名</code></p>\n<p>选项: -x 解打包</p>\n<p>tar -vxf test.tar   解包text.tar文件</p>\n<p>上述过程繁琐,可以直接用  <code>tar -zxvf 压缩包名.tar.gz</code>,<br>解压到指定目录可用-C选项指定目录 <code>tar -zxvf 压缩包名.tar.gz -C /tmp/</code></p>\n<h4 id=\"9-tar-bz2格式压缩-先打包为tar-再压缩为-bz2文件\"><a href=\"#9-tar-bz2格式压缩-先打包为tar-再压缩为-bz2文件\" class=\"headerlink\" title=\"9 .tar.bz2格式压缩(先打包为tar,再压缩为.bz2文件)\"></a>9 .tar.bz2格式压缩(先打包为tar,再压缩为.bz2文件)</h4><p>tar打包命令  <code>tar -cvf 打包文件名 源文件</code></p>\n<p>选项: -c 打包; -v 现实过程; -f 指定打包后的文件名</p>\n<p>tar -cvf test.tar ./test 将当前目录下test目录打包为tar文件</p>\n<p>bzip2 test.tar 生成test.tar.bz2文件</p>\n<p>上述过程繁琐,可以直接用  <code>tar -jcvf 压缩包名.tar.bz2 源文件</code></p>\n<h4 id=\"10-tar-bz2格式解压缩-先用bzip2解压文件-然后解打包\"><a href=\"#10-tar-bz2格式解压缩-先用bzip2解压文件-然后解打包\" class=\"headerlink\" title=\"10 .tar.bz2格式解压缩(先用bzip2解压文件,然后解打包)\"></a>10 .tar.bz2格式解压缩(先用bzip2解压文件,然后解打包)</h4><p>解打包命令  <code>tar -xvf 打包文件名</code></p>\n<p>选项: -x 解打包</p>\n<p>tar -vxf test.tar   解包text.tar文件</p>\n<p>上述过程繁琐,可以直接用  <code>tar -jxvf 压缩包名.tar.bz2</code>,<br>解压到指定目录可用-C选项指定目录 <code>tar -jxvf 压缩包名.tar.bz2 -C /tmp/</code></p>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>摘要:\n  Linux下常用的压缩格式有:.zip .gz .bz2 .tar.gz .tar.bz2\n</code></pre><h4 id=\"1-zip格式压缩\"><a href=\"#1-zip格式压缩\" class=\"headerlink\" title=\"1 .zip格式压缩\"></a>1 .zip格式压缩</h4><p>压缩文件 <code>zip 压缩文件名 源文件</code></p>\n<pre><code>zip test.zip ./test.txt #将当前目录的test.txt文档压缩为test.zip\n</code></pre><p>压缩目录 <code>zip -r 压缩文件名 源目录</code></p>\n<pre><code>zip test1.zip ./test1 #将当前目录的test1目录压缩为test1.zip\n</code></pre><h4 id=\"2-zip格式解压缩\"><a href=\"#2-zip格式解压缩\" class=\"headerlink\" title=\"2 .zip格式解压缩\"></a>2 .zip格式解压缩</h4><p>解压文件  <code>unzip 压缩文件</code></p>\n<pre><code>zip ./test1.zip #解压缩当前目录的test1.zip文件\n</code></pre><h4 id=\"3-gz格式压缩\"><a href=\"#3-gz格式压缩\" class=\"headerlink\" title=\"3 .gz格式压缩\"></a>3 .gz格式压缩</h4><p>压缩为.gz文件,源文件消失  <code>gzip 源文件</code></p>\n<p>压缩为.gz文件,源文件保留  <code>gzip -c 源文件 &gt; 压缩文件</code></p>\n<p>压缩目录下的所有子文件,但是不能压缩目录  <code>gzip -r 目录</code></p>\n<h4 id=\"4-gz格式解压缩\"><a href=\"#4-gz格式解压缩\" class=\"headerlink\" title=\"4 .gz格式解压缩\"></a>4 .gz格式解压缩</h4><p>解压缩.gz文件  <code>gzip -d 压缩文件</code></p>\n<p>解压缩.gz文件  <code>gunzip  压缩文件</code></p>\n<h4 id=\"5-bz2格式压缩\"><a href=\"#5-bz2格式压缩\" class=\"headerlink\" title=\"5 .bz2格式压缩\"></a>5 .bz2格式压缩</h4><p>压缩为.bz2格式,不保留源文件  <code>bzip2 源文件</code></p>\n<p>压缩为.bz2格式,保留源文件 <code>bzip2 -k 源文件</code></p>\n<p>注:bzip2不能压缩目录</p>\n<h4 id=\"6-bz2格式解压缩\"><a href=\"#6-bz2格式解压缩\" class=\"headerlink\" title=\"6 .bz2格式解压缩\"></a>6 .bz2格式解压缩</h4><p>解压缩.bz2文件,-k保留压缩文件  <code>bzip2 -d 压缩文件</code></p>\n<p>解压缩.bz2文件,-k保留压缩文件  <code>bunzip2 压缩文件</code></p>\n<h4 id=\"7-tar-gz格式压缩-先打包为tar-再压缩为-gz文件\"><a href=\"#7-tar-gz格式压缩-先打包为tar-再压缩为-gz文件\" class=\"headerlink\" title=\"7 .tar.gz格式压缩(先打包为tar,再压缩为.gz文件)\"></a>7 .tar.gz格式压缩(先打包为tar,再压缩为.gz文件)</h4><p>tar打包命令  <code>tar -cvf 打包文件名 源文件</code></p>\n<p>选项: -c 打包; -v 现实过程; -f 指定打包后的文件名</p>\n<p>tar -cvf test.tar ./test 将当前目录下test目录打包为tar文件</p>\n<p>gzip test.tar  生成test.tar.gz文件</p>\n<p>bzip2 test.tar 生成test.tar.bz2文件</p>\n<p>上述过程繁琐,可以直接用  <code>tar -zcvf 压缩包名.tar.gz 源文件</code></p>\n<h4 id=\"8-tar-gz格式解压缩-先用gzip解压文件-然后解打包\"><a href=\"#8-tar-gz格式解压缩-先用gzip解压文件-然后解打包\" class=\"headerlink\" title=\"8 .tar.gz格式解压缩(先用gzip解压文件,然后解打包)\"></a>8 .tar.gz格式解压缩(先用gzip解压文件,然后解打包)</h4><p>解打包命令  <code>tar -xvf 打包文件名</code></p>\n<p>选项: -x 解打包</p>\n<p>tar -vxf test.tar   解包text.tar文件</p>\n<p>上述过程繁琐,可以直接用  <code>tar -zxvf 压缩包名.tar.gz</code>,<br>解压到指定目录可用-C选项指定目录 <code>tar -zxvf 压缩包名.tar.gz -C /tmp/</code></p>\n<h4 id=\"9-tar-bz2格式压缩-先打包为tar-再压缩为-bz2文件\"><a href=\"#9-tar-bz2格式压缩-先打包为tar-再压缩为-bz2文件\" class=\"headerlink\" title=\"9 .tar.bz2格式压缩(先打包为tar,再压缩为.bz2文件)\"></a>9 .tar.bz2格式压缩(先打包为tar,再压缩为.bz2文件)</h4><p>tar打包命令  <code>tar -cvf 打包文件名 源文件</code></p>\n<p>选项: -c 打包; -v 现实过程; -f 指定打包后的文件名</p>\n<p>tar -cvf test.tar ./test 将当前目录下test目录打包为tar文件</p>\n<p>bzip2 test.tar 生成test.tar.bz2文件</p>\n<p>上述过程繁琐,可以直接用  <code>tar -jcvf 压缩包名.tar.bz2 源文件</code></p>\n<h4 id=\"10-tar-bz2格式解压缩-先用bzip2解压文件-然后解打包\"><a href=\"#10-tar-bz2格式解压缩-先用bzip2解压文件-然后解打包\" class=\"headerlink\" title=\"10 .tar.bz2格式解压缩(先用bzip2解压文件,然后解打包)\"></a>10 .tar.bz2格式解压缩(先用bzip2解压文件,然后解打包)</h4><p>解打包命令  <code>tar -xvf 打包文件名</code></p>\n<p>选项: -x 解打包</p>\n<p>tar -vxf test.tar   解包text.tar文件</p>\n<p>上述过程繁琐,可以直接用  <code>tar -jxvf 压缩包名.tar.bz2</code>,<br>解压到指定目录可用-C选项指定目录 <code>tar -jxvf 压缩包名.tar.bz2 -C /tmp/</code></p>\n"},{"title":"Linux增加使用文件代替swap分区分方法","date":"2018-05-13T02:52:59.000Z","_content":"\n    摘要:\n      在安装Linux系统的时候未对系统进行swap(交换分区),后续进入系统\n      可以采用新建文件的方式来代替swap分区.\n      以下所执行的系统环境是:deepin linux(基于debian发行版),\n      按理在Ubuntu,debian上也是可以的.\n\n注意:执行以下命令时,全部采用root账户的权限\n\n1.创建要作为swap分区的文件:增加1GB大小的交换分区，则命令写法如下，其中的count等于想要的块的数量（bs*count=文件大小）\n\n`sudo dd if=/dev/zero of=/swapfile bs=1M count=1024`\n\n2.格式化为交换分区文件,建立swap的文件系统\n\n`sudo mkswap /swapfile`\n\n3.启用交换分区文件\n\n`sudo swapon /swapfile`\n\n4.使系统开机时自启用，在文件/etc/fstab中添加一行(可使用vim打开文件进行编辑)：\n\n`/swapfile swap swap defaults 0 0`\n\n5.验证结果,执行free 命令查看是否有交换分区\n\n`free -m `\n\n注:如果想移除swap分区文件,执行以下命令:\n\n`sudo swapoff /swapfile && sudo rm /swapfile`\n","source":"_posts/Linux增加使用文件代替swap分区分方法.md","raw":"---\ntitle: Linux增加使用文件代替swap分区分方法\ndate: 2018-05-13 10:52:59\ntags:\n  - linux\n  - swap\n---\n\n    摘要:\n      在安装Linux系统的时候未对系统进行swap(交换分区),后续进入系统\n      可以采用新建文件的方式来代替swap分区.\n      以下所执行的系统环境是:deepin linux(基于debian发行版),\n      按理在Ubuntu,debian上也是可以的.\n\n注意:执行以下命令时,全部采用root账户的权限\n\n1.创建要作为swap分区的文件:增加1GB大小的交换分区，则命令写法如下，其中的count等于想要的块的数量（bs*count=文件大小）\n\n`sudo dd if=/dev/zero of=/swapfile bs=1M count=1024`\n\n2.格式化为交换分区文件,建立swap的文件系统\n\n`sudo mkswap /swapfile`\n\n3.启用交换分区文件\n\n`sudo swapon /swapfile`\n\n4.使系统开机时自启用，在文件/etc/fstab中添加一行(可使用vim打开文件进行编辑)：\n\n`/swapfile swap swap defaults 0 0`\n\n5.验证结果,执行free 命令查看是否有交换分区\n\n`free -m `\n\n注:如果想移除swap分区文件,执行以下命令:\n\n`sudo swapoff /swapfile && sudo rm /swapfile`\n","slug":"Linux增加使用文件代替swap分区分方法","published":1,"updated":"2019-09-02T07:37:22.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck024pnv20003y6fgtl2zm936","content":"<pre><code>摘要:\n  在安装Linux系统的时候未对系统进行swap(交换分区),后续进入系统\n  可以采用新建文件的方式来代替swap分区.\n  以下所执行的系统环境是:deepin linux(基于debian发行版),\n  按理在Ubuntu,debian上也是可以的.\n</code></pre><p>注意:执行以下命令时,全部采用root账户的权限</p>\n<p>1.创建要作为swap分区的文件:增加1GB大小的交换分区，则命令写法如下，其中的count等于想要的块的数量（bs*count=文件大小）</p>\n<p><code>sudo dd if=/dev/zero of=/swapfile bs=1M count=1024</code></p>\n<p>2.格式化为交换分区文件,建立swap的文件系统</p>\n<p><code>sudo mkswap /swapfile</code></p>\n<p>3.启用交换分区文件</p>\n<p><code>sudo swapon /swapfile</code></p>\n<p>4.使系统开机时自启用，在文件/etc/fstab中添加一行(可使用vim打开文件进行编辑)：</p>\n<p><code>/swapfile swap swap defaults 0 0</code></p>\n<p>5.验证结果,执行free 命令查看是否有交换分区</p>\n<p><code>free -m</code></p>\n<p>注:如果想移除swap分区文件,执行以下命令:</p>\n<p><code>sudo swapoff /swapfile &amp;&amp; sudo rm /swapfile</code></p>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>摘要:\n  在安装Linux系统的时候未对系统进行swap(交换分区),后续进入系统\n  可以采用新建文件的方式来代替swap分区.\n  以下所执行的系统环境是:deepin linux(基于debian发行版),\n  按理在Ubuntu,debian上也是可以的.\n</code></pre><p>注意:执行以下命令时,全部采用root账户的权限</p>\n<p>1.创建要作为swap分区的文件:增加1GB大小的交换分区，则命令写法如下，其中的count等于想要的块的数量（bs*count=文件大小）</p>\n<p><code>sudo dd if=/dev/zero of=/swapfile bs=1M count=1024</code></p>\n<p>2.格式化为交换分区文件,建立swap的文件系统</p>\n<p><code>sudo mkswap /swapfile</code></p>\n<p>3.启用交换分区文件</p>\n<p><code>sudo swapon /swapfile</code></p>\n<p>4.使系统开机时自启用，在文件/etc/fstab中添加一行(可使用vim打开文件进行编辑)：</p>\n<p><code>/swapfile swap swap defaults 0 0</code></p>\n<p>5.验证结果,执行free 命令查看是否有交换分区</p>\n<p><code>free -m</code></p>\n<p>注:如果想移除swap分区文件,执行以下命令:</p>\n<p><code>sudo swapoff /swapfile &amp;&amp; sudo rm /swapfile</code></p>\n"},{"title":"MySQL中utf8和utf8mb4区别对emoji支持","date":"2019-04-27T03:13:08.000Z","_content":"\n    摘要:\n      MySQL在5.5.3之后增加了这个utf8mb4的编码，mb4就是most bytes 4的意思，专门用来兼容\n      四字节的unicode。好在utf8mb4是utf8的超集，除了将编码改为utf8mb4外不需要做其他转换。\n      当然，为了节省空间，一般情况下使用utf8也就够了.\n      查看当前的MySQL版本:\n      mysql> select version();\n      或者\n      mysql --version\n\n### utf8不支持emoji表情的问题\n\n  当使用utf8字符集的时候,插入emoji表情符号会提示\" Incorrect string value: '\\xXX\\xXX\\xXX\\xXX' for column......\",原因在于MySQL中utf8字符集只支持三字节UTF-8编码的Unicode范围，而emoji字符属于四字节编码部分.此时,需要将库表的字符集更改为utf8mb4\n\n### 修改字符集为utf8mb4\n\n  修改/etc/mysql/my.cnf文件或者/etc/mysql/mysql.conf.d/mysqld.cnf文件,修改以下参数:\n\n```\n[client]\ndefault-character-set=utf8mb4\n  \n  \n[mysql]\ndefault-character-set=utf8mb4\n  \n  \n[mysqld]\ncharacter-set-server = utf8mb4\ncollation-server = utf8mb4_unicode_ci\ninit_connect = 'SET NAMES utf8mb4'\ncharacter-set-client-handshake = false\n```\n\n    注:\n    1.init_connect='SET NAMES utf8mb4' 表示初始化连接都设置为utf8mb4字符集;\n    2.skip-character-set-client-handshake = true 忽略客户端字符集设置，不论客户端是何种字符集，都按照init_connect中的设置进行使用\n\n### 对数据库相关的表进行字符集修改\n\n#### 建立新库和表的情况,直接使用utf8mb4字符\n\n```\nCREATE DATABASE IF NOT EXISTS test default charset utf8mb4 COLLATE utf8mb4_unicode_ci;\n\nCREATE TABLE `t_table`  (\n  `id` varchar(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,\n  `create_time` datetime(0) NULL DEFAULT NULL,\n  'comment' varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;\n```\n\n#### 已经存在表的情况,对库,表和字段都修改为utf8mb4\n\n```\nmysql> ALTER DATABASE test CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\nmysql>ALTER TABLE `t_table` CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\nmysql>ALTER TABLE `t_table` MODIFY COLUMN `comment`  varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n```\n\n### 重启MySQL服务\n\n```\n/etc/init.d/mysqld restart 或者service mysql restart\n```\n\n### 登录数据库查看字符集是否更改成功\n\n```\nmysql> SHOW VARIABLES WHERE Variable_name LIKE 'character%' OR Variable_name LIKE 'collation%';\n\n+--------------------------+----------------------------+\n| Variable_name            | Value                      |\n+--------------------------+----------------------------+\n| character_set_client     | utf8mb4                    |\n| character_set_connection | utf8mb4                    |\n| character_set_database   | utf8mb4                    |\n| character_set_filesystem | binary                     |\n| character_set_results    | utf8mb4                    |\n| character_set_server     | utf8mb4                    |\n| character_set_system     | utf8                       |\n| character_sets_dir       | /usr/share/mysql/charsets/ |\n| collation_connection     | utf8mb4_unicode_ci         |\n| collation_database       | utf8mb4_unicode_ci         |\n| collation_server         | utf8mb4_unicode_ci         |\n+--------------------------+----------------------------+\n\n```\n\n    关于Windows下MySQL的一点坑:\n    之前一个旧式的服务器采用的是Windows server2012,mysql使用的是安装版的.安装路径在\n    C:\\Program Files\\MySQL\\MySQL Server 5.6下.有个my-default.ini配置文件,\n    但是无论对这个文件如何配置修改,重启服务器都无效.经过多方搜索,发现Windows下MySQL服务\n    默认使用的不是该文件,而是采用C:\\ProgramData\\MySQL\\MySQL Server 5.6下的my.ini\n    这个文件.所以需要对这个文件修改才能使其生效.","source":"_posts/MySQL中utf8和utf8mb4区别对emoji支持.md","raw":"---\ntitle: MySQL中utf8和utf8mb4区别对emoji支持\ndate: 2019-04-27 11:13:08\ntags: MySQL\n---\n\n    摘要:\n      MySQL在5.5.3之后增加了这个utf8mb4的编码，mb4就是most bytes 4的意思，专门用来兼容\n      四字节的unicode。好在utf8mb4是utf8的超集，除了将编码改为utf8mb4外不需要做其他转换。\n      当然，为了节省空间，一般情况下使用utf8也就够了.\n      查看当前的MySQL版本:\n      mysql> select version();\n      或者\n      mysql --version\n\n### utf8不支持emoji表情的问题\n\n  当使用utf8字符集的时候,插入emoji表情符号会提示\" Incorrect string value: '\\xXX\\xXX\\xXX\\xXX' for column......\",原因在于MySQL中utf8字符集只支持三字节UTF-8编码的Unicode范围，而emoji字符属于四字节编码部分.此时,需要将库表的字符集更改为utf8mb4\n\n### 修改字符集为utf8mb4\n\n  修改/etc/mysql/my.cnf文件或者/etc/mysql/mysql.conf.d/mysqld.cnf文件,修改以下参数:\n\n```\n[client]\ndefault-character-set=utf8mb4\n  \n  \n[mysql]\ndefault-character-set=utf8mb4\n  \n  \n[mysqld]\ncharacter-set-server = utf8mb4\ncollation-server = utf8mb4_unicode_ci\ninit_connect = 'SET NAMES utf8mb4'\ncharacter-set-client-handshake = false\n```\n\n    注:\n    1.init_connect='SET NAMES utf8mb4' 表示初始化连接都设置为utf8mb4字符集;\n    2.skip-character-set-client-handshake = true 忽略客户端字符集设置，不论客户端是何种字符集，都按照init_connect中的设置进行使用\n\n### 对数据库相关的表进行字符集修改\n\n#### 建立新库和表的情况,直接使用utf8mb4字符\n\n```\nCREATE DATABASE IF NOT EXISTS test default charset utf8mb4 COLLATE utf8mb4_unicode_ci;\n\nCREATE TABLE `t_table`  (\n  `id` varchar(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,\n  `create_time` datetime(0) NULL DEFAULT NULL,\n  'comment' varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;\n```\n\n#### 已经存在表的情况,对库,表和字段都修改为utf8mb4\n\n```\nmysql> ALTER DATABASE test CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\nmysql>ALTER TABLE `t_table` CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\nmysql>ALTER TABLE `t_table` MODIFY COLUMN `comment`  varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n```\n\n### 重启MySQL服务\n\n```\n/etc/init.d/mysqld restart 或者service mysql restart\n```\n\n### 登录数据库查看字符集是否更改成功\n\n```\nmysql> SHOW VARIABLES WHERE Variable_name LIKE 'character%' OR Variable_name LIKE 'collation%';\n\n+--------------------------+----------------------------+\n| Variable_name            | Value                      |\n+--------------------------+----------------------------+\n| character_set_client     | utf8mb4                    |\n| character_set_connection | utf8mb4                    |\n| character_set_database   | utf8mb4                    |\n| character_set_filesystem | binary                     |\n| character_set_results    | utf8mb4                    |\n| character_set_server     | utf8mb4                    |\n| character_set_system     | utf8                       |\n| character_sets_dir       | /usr/share/mysql/charsets/ |\n| collation_connection     | utf8mb4_unicode_ci         |\n| collation_database       | utf8mb4_unicode_ci         |\n| collation_server         | utf8mb4_unicode_ci         |\n+--------------------------+----------------------------+\n\n```\n\n    关于Windows下MySQL的一点坑:\n    之前一个旧式的服务器采用的是Windows server2012,mysql使用的是安装版的.安装路径在\n    C:\\Program Files\\MySQL\\MySQL Server 5.6下.有个my-default.ini配置文件,\n    但是无论对这个文件如何配置修改,重启服务器都无效.经过多方搜索,发现Windows下MySQL服务\n    默认使用的不是该文件,而是采用C:\\ProgramData\\MySQL\\MySQL Server 5.6下的my.ini\n    这个文件.所以需要对这个文件修改才能使其生效.","slug":"MySQL中utf8和utf8mb4区别对emoji支持","published":1,"updated":"2019-09-02T07:37:22.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck024pnv40004y6fgthkv24un","content":"<pre><code>摘要:\n  MySQL在5.5.3之后增加了这个utf8mb4的编码，mb4就是most bytes 4的意思，专门用来兼容\n  四字节的unicode。好在utf8mb4是utf8的超集，除了将编码改为utf8mb4外不需要做其他转换。\n  当然，为了节省空间，一般情况下使用utf8也就够了.\n  查看当前的MySQL版本:\n  mysql&gt; select version();\n  或者\n  mysql --version\n</code></pre><h3 id=\"utf8不支持emoji表情的问题\"><a href=\"#utf8不支持emoji表情的问题\" class=\"headerlink\" title=\"utf8不支持emoji表情的问题\"></a>utf8不支持emoji表情的问题</h3><p>  当使用utf8字符集的时候,插入emoji表情符号会提示” Incorrect string value: ‘\\xXX\\xXX\\xXX\\xXX’ for column……”,原因在于MySQL中utf8字符集只支持三字节UTF-8编码的Unicode范围，而emoji字符属于四字节编码部分.此时,需要将库表的字符集更改为utf8mb4</p>\n<h3 id=\"修改字符集为utf8mb4\"><a href=\"#修改字符集为utf8mb4\" class=\"headerlink\" title=\"修改字符集为utf8mb4\"></a>修改字符集为utf8mb4</h3><p>  修改/etc/mysql/my.cnf文件或者/etc/mysql/mysql.conf.d/mysqld.cnf文件,修改以下参数:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\">default-character-set=utf8mb4</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">[mysql]</span><br><span class=\"line\">default-character-set=utf8mb4</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">character-set-server = utf8mb4</span><br><span class=\"line\">collation-server = utf8mb4_unicode_ci</span><br><span class=\"line\">init_connect = &apos;SET NAMES utf8mb4&apos;</span><br><span class=\"line\">character-set-client-handshake = false</span><br></pre></td></tr></table></figure>\n<pre><code>注:\n1.init_connect=&apos;SET NAMES utf8mb4&apos; 表示初始化连接都设置为utf8mb4字符集;\n2.skip-character-set-client-handshake = true 忽略客户端字符集设置，不论客户端是何种字符集，都按照init_connect中的设置进行使用\n</code></pre><h3 id=\"对数据库相关的表进行字符集修改\"><a href=\"#对数据库相关的表进行字符集修改\" class=\"headerlink\" title=\"对数据库相关的表进行字符集修改\"></a>对数据库相关的表进行字符集修改</h3><h4 id=\"建立新库和表的情况-直接使用utf8mb4字符\"><a href=\"#建立新库和表的情况-直接使用utf8mb4字符\" class=\"headerlink\" title=\"建立新库和表的情况,直接使用utf8mb4字符\"></a>建立新库和表的情况,直接使用utf8mb4字符</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE IF NOT EXISTS test default charset utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE `t_table`  (</span><br><span class=\"line\">  `id` varchar(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,</span><br><span class=\"line\">  `create_time` datetime(0) NULL DEFAULT NULL,</span><br><span class=\"line\">  &apos;comment&apos; varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`id`) USING BTREE</span><br><span class=\"line\">) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;</span><br></pre></td></tr></table></figure>\n<h4 id=\"已经存在表的情况-对库-表和字段都修改为utf8mb4\"><a href=\"#已经存在表的情况-对库-表和字段都修改为utf8mb4\" class=\"headerlink\" title=\"已经存在表的情况,对库,表和字段都修改为utf8mb4\"></a>已经存在表的情况,对库,表和字段都修改为utf8mb4</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; ALTER DATABASE test CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;ALTER TABLE `t_table` CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;ALTER TABLE `t_table` MODIFY COLUMN `comment`  varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure>\n<h3 id=\"重启MySQL服务\"><a href=\"#重启MySQL服务\" class=\"headerlink\" title=\"重启MySQL服务\"></a>重启MySQL服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/mysqld restart 或者service mysql restart</span><br></pre></td></tr></table></figure>\n<h3 id=\"登录数据库查看字符集是否更改成功\"><a href=\"#登录数据库查看字符集是否更改成功\" class=\"headerlink\" title=\"登录数据库查看字符集是否更改成功\"></a>登录数据库查看字符集是否更改成功</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SHOW VARIABLES WHERE Variable_name LIKE &apos;character%&apos; OR Variable_name LIKE &apos;collation%&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">+--------------------------+----------------------------+</span><br><span class=\"line\">| Variable_name            | Value                      |</span><br><span class=\"line\">+--------------------------+----------------------------+</span><br><span class=\"line\">| character_set_client     | utf8mb4                    |</span><br><span class=\"line\">| character_set_connection | utf8mb4                    |</span><br><span class=\"line\">| character_set_database   | utf8mb4                    |</span><br><span class=\"line\">| character_set_filesystem | binary                     |</span><br><span class=\"line\">| character_set_results    | utf8mb4                    |</span><br><span class=\"line\">| character_set_server     | utf8mb4                    |</span><br><span class=\"line\">| character_set_system     | utf8                       |</span><br><span class=\"line\">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class=\"line\">| collation_connection     | utf8mb4_unicode_ci         |</span><br><span class=\"line\">| collation_database       | utf8mb4_unicode_ci         |</span><br><span class=\"line\">| collation_server         | utf8mb4_unicode_ci         |</span><br><span class=\"line\">+--------------------------+----------------------------+</span><br></pre></td></tr></table></figure>\n<pre><code>关于Windows下MySQL的一点坑:\n之前一个旧式的服务器采用的是Windows server2012,mysql使用的是安装版的.安装路径在\nC:\\Program Files\\MySQL\\MySQL Server 5.6下.有个my-default.ini配置文件,\n但是无论对这个文件如何配置修改,重启服务器都无效.经过多方搜索,发现Windows下MySQL服务\n默认使用的不是该文件,而是采用C:\\ProgramData\\MySQL\\MySQL Server 5.6下的my.ini\n这个文件.所以需要对这个文件修改才能使其生效.\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>摘要:\n  MySQL在5.5.3之后增加了这个utf8mb4的编码，mb4就是most bytes 4的意思，专门用来兼容\n  四字节的unicode。好在utf8mb4是utf8的超集，除了将编码改为utf8mb4外不需要做其他转换。\n  当然，为了节省空间，一般情况下使用utf8也就够了.\n  查看当前的MySQL版本:\n  mysql&gt; select version();\n  或者\n  mysql --version\n</code></pre><h3 id=\"utf8不支持emoji表情的问题\"><a href=\"#utf8不支持emoji表情的问题\" class=\"headerlink\" title=\"utf8不支持emoji表情的问题\"></a>utf8不支持emoji表情的问题</h3><p>  当使用utf8字符集的时候,插入emoji表情符号会提示” Incorrect string value: ‘\\xXX\\xXX\\xXX\\xXX’ for column……”,原因在于MySQL中utf8字符集只支持三字节UTF-8编码的Unicode范围，而emoji字符属于四字节编码部分.此时,需要将库表的字符集更改为utf8mb4</p>\n<h3 id=\"修改字符集为utf8mb4\"><a href=\"#修改字符集为utf8mb4\" class=\"headerlink\" title=\"修改字符集为utf8mb4\"></a>修改字符集为utf8mb4</h3><p>  修改/etc/mysql/my.cnf文件或者/etc/mysql/mysql.conf.d/mysqld.cnf文件,修改以下参数:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\">default-character-set=utf8mb4</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">[mysql]</span><br><span class=\"line\">default-character-set=utf8mb4</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">character-set-server = utf8mb4</span><br><span class=\"line\">collation-server = utf8mb4_unicode_ci</span><br><span class=\"line\">init_connect = &apos;SET NAMES utf8mb4&apos;</span><br><span class=\"line\">character-set-client-handshake = false</span><br></pre></td></tr></table></figure>\n<pre><code>注:\n1.init_connect=&apos;SET NAMES utf8mb4&apos; 表示初始化连接都设置为utf8mb4字符集;\n2.skip-character-set-client-handshake = true 忽略客户端字符集设置，不论客户端是何种字符集，都按照init_connect中的设置进行使用\n</code></pre><h3 id=\"对数据库相关的表进行字符集修改\"><a href=\"#对数据库相关的表进行字符集修改\" class=\"headerlink\" title=\"对数据库相关的表进行字符集修改\"></a>对数据库相关的表进行字符集修改</h3><h4 id=\"建立新库和表的情况-直接使用utf8mb4字符\"><a href=\"#建立新库和表的情况-直接使用utf8mb4字符\" class=\"headerlink\" title=\"建立新库和表的情况,直接使用utf8mb4字符\"></a>建立新库和表的情况,直接使用utf8mb4字符</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE IF NOT EXISTS test default charset utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE `t_table`  (</span><br><span class=\"line\">  `id` varchar(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,</span><br><span class=\"line\">  `create_time` datetime(0) NULL DEFAULT NULL,</span><br><span class=\"line\">  &apos;comment&apos; varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`id`) USING BTREE</span><br><span class=\"line\">) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;</span><br></pre></td></tr></table></figure>\n<h4 id=\"已经存在表的情况-对库-表和字段都修改为utf8mb4\"><a href=\"#已经存在表的情况-对库-表和字段都修改为utf8mb4\" class=\"headerlink\" title=\"已经存在表的情况,对库,表和字段都修改为utf8mb4\"></a>已经存在表的情况,对库,表和字段都修改为utf8mb4</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; ALTER DATABASE test CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;ALTER TABLE `t_table` CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;ALTER TABLE `t_table` MODIFY COLUMN `comment`  varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure>\n<h3 id=\"重启MySQL服务\"><a href=\"#重启MySQL服务\" class=\"headerlink\" title=\"重启MySQL服务\"></a>重启MySQL服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/mysqld restart 或者service mysql restart</span><br></pre></td></tr></table></figure>\n<h3 id=\"登录数据库查看字符集是否更改成功\"><a href=\"#登录数据库查看字符集是否更改成功\" class=\"headerlink\" title=\"登录数据库查看字符集是否更改成功\"></a>登录数据库查看字符集是否更改成功</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SHOW VARIABLES WHERE Variable_name LIKE &apos;character%&apos; OR Variable_name LIKE &apos;collation%&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">+--------------------------+----------------------------+</span><br><span class=\"line\">| Variable_name            | Value                      |</span><br><span class=\"line\">+--------------------------+----------------------------+</span><br><span class=\"line\">| character_set_client     | utf8mb4                    |</span><br><span class=\"line\">| character_set_connection | utf8mb4                    |</span><br><span class=\"line\">| character_set_database   | utf8mb4                    |</span><br><span class=\"line\">| character_set_filesystem | binary                     |</span><br><span class=\"line\">| character_set_results    | utf8mb4                    |</span><br><span class=\"line\">| character_set_server     | utf8mb4                    |</span><br><span class=\"line\">| character_set_system     | utf8                       |</span><br><span class=\"line\">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class=\"line\">| collation_connection     | utf8mb4_unicode_ci         |</span><br><span class=\"line\">| collation_database       | utf8mb4_unicode_ci         |</span><br><span class=\"line\">| collation_server         | utf8mb4_unicode_ci         |</span><br><span class=\"line\">+--------------------------+----------------------------+</span><br></pre></td></tr></table></figure>\n<pre><code>关于Windows下MySQL的一点坑:\n之前一个旧式的服务器采用的是Windows server2012,mysql使用的是安装版的.安装路径在\nC:\\Program Files\\MySQL\\MySQL Server 5.6下.有个my-default.ini配置文件,\n但是无论对这个文件如何配置修改,重启服务器都无效.经过多方搜索,发现Windows下MySQL服务\n默认使用的不是该文件,而是采用C:\\ProgramData\\MySQL\\MySQL Server 5.6下的my.ini\n这个文件.所以需要对这个文件修改才能使其生效.\n</code></pre>"},{"title":"MySQL字段值默认不区分大小写问题","date":"2018-05-13T02:42:33.000Z","_content":"\n    摘要：\n      mysql的字段值是默认不区分大小写的,但是用户在登录账户的时候严格区分大小写的,所以解决如下:\n\n1 .在不改变表任何结构的情况下,可以直接在查询条件后面的字段名或者字段值作为binary()函数的参数即可,如下:\n\n`select * from table_name t where binary(t.field) = 'Abc';`\n\n2 .在建表的时候在字段后面加上binary,或者用alter语句来改变字段类型,只需要加上binary\n\n    `mysql> create table t_user(\n\n    -> username varchar(20) binary\n\n    -> );`\n\n对已有的表进行alert\n\n`alter table table_name modify field varchar(20) binary`\n\n\n注:table_name换成具体对应的表名称.field换成具体对应的表的字段\n","source":"_posts/MySQL字段值默认不区分大小写问题.md","raw":"---\ntitle: MySQL字段值默认不区分大小写问题\ndate: 2018-05-13 10:42:33\ntags: MySQL\n---\n\n    摘要：\n      mysql的字段值是默认不区分大小写的,但是用户在登录账户的时候严格区分大小写的,所以解决如下:\n\n1 .在不改变表任何结构的情况下,可以直接在查询条件后面的字段名或者字段值作为binary()函数的参数即可,如下:\n\n`select * from table_name t where binary(t.field) = 'Abc';`\n\n2 .在建表的时候在字段后面加上binary,或者用alter语句来改变字段类型,只需要加上binary\n\n    `mysql> create table t_user(\n\n    -> username varchar(20) binary\n\n    -> );`\n\n对已有的表进行alert\n\n`alter table table_name modify field varchar(20) binary`\n\n\n注:table_name换成具体对应的表名称.field换成具体对应的表的字段\n","slug":"MySQL字段值默认不区分大小写问题","published":1,"updated":"2019-09-02T07:37:22.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck024pnv50005y6fg1ctu28f7","content":"<pre><code>摘要：\n  mysql的字段值是默认不区分大小写的,但是用户在登录账户的时候严格区分大小写的,所以解决如下:\n</code></pre><p>1 .在不改变表任何结构的情况下,可以直接在查询条件后面的字段名或者字段值作为binary()函数的参数即可,如下:</p>\n<p><code>select * from table_name t where binary(t.field) = &#39;Abc&#39;;</code></p>\n<p>2 .在建表的时候在字段后面加上binary,或者用alter语句来改变字段类型,只需要加上binary</p>\n<pre><code>`mysql&gt; create table t_user(\n\n-&gt; username varchar(20) binary\n\n-&gt; );`\n</code></pre><p>对已有的表进行alert</p>\n<p><code>alter table table_name modify field varchar(20) binary</code></p>\n<p>注:table_name换成具体对应的表名称.field换成具体对应的表的字段</p>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>摘要：\n  mysql的字段值是默认不区分大小写的,但是用户在登录账户的时候严格区分大小写的,所以解决如下:\n</code></pre><p>1 .在不改变表任何结构的情况下,可以直接在查询条件后面的字段名或者字段值作为binary()函数的参数即可,如下:</p>\n<p><code>select * from table_name t where binary(t.field) = &#39;Abc&#39;;</code></p>\n<p>2 .在建表的时候在字段后面加上binary,或者用alter语句来改变字段类型,只需要加上binary</p>\n<pre><code>`mysql&gt; create table t_user(\n\n-&gt; username varchar(20) binary\n\n-&gt; );`\n</code></pre><p>对已有的表进行alert</p>\n<p><code>alter table table_name modify field varchar(20) binary</code></p>\n<p>注:table_name换成具体对应的表名称.field换成具体对应的表的字段</p>\n"},{"title":"MySQL新版本设置root密码和重置root密码","date":"2018-08-03T02:45:54.000Z","_content":"\n    > 摘要:最近在虚拟机上安装Ubuntu18.04版本,然后安装MySQL-server.安装MySQL-server过程中不再像之前会提示\n    输入root账户的密码.所以需要进行对root账户设置密码,\n    \n    >操作环境:\n        OS:Ubuntu 18.04\n        MySQL版本:5.7及更高\n\n\n### 1.前置条件\n\n    需要系统的root账户或者使用sudo 命令\n\n### 2.使用mysql_secure_installation进行对密码设置\n\n    如果是第一次安装完MySQL后,可以使用:\n\n    sudo mysql_secure_installation  对root账户进行设置密码操作\n\n### 3.使用skip-grant-tables对root账户进行重置密码的操作\n\n    3.1 停止当前正在运行的mysql服务\n\n        sudo service mysql stop\n    \n    3.2 创建/var/run/mysqld目录,因为MySQL进程在启动和运行的时候都需要访问该soket文件\n\n        sudo mkdir -p /var/run/mysqld\n        sudo chown mysql:mysql /var/run/mysqld\n\n    3.3 使用skip-grant-tables启动服务程序\n\n        sudo /usr/sbin/mysqld --skip-grant-tables --skip-networking &\n\n        jobs 然后确认下服务是否启动成功\n\n    3.4 使用root无密码登录,进行修改设置密码操作\n\n        mysql -u root root无密码登录\n\n        FLUSH PRIVILEGES; 刷新一遍授权信息\n\n        USE mysql; 切换到mysql库(安装好后自带的)\n\n        UPDATE user SET authentication_string=PASSWORD(\"123456\") WHERE User='root'; 设置密码字段的新密码,\n        authentication_string是新版本存储密码的字段名,旧版本的是password.\n\n        UPDATE user SET plugin=\"mysql_native_password\" WHERE User='root';\n\n        FLUSH PRIVILEGES;\n\n        quit;\n\n    3.5 重启MySQL服务\n\n        sudo pkill mysqld  停掉之前启动的服务\n\n        jobs 查看是否正确停止服务\n\n        sudo service mysql start 启动MySQL服务\n\n    3.6 使用root账户和刚设置的密码进行登录操作\n\n        mysql -u root --password=123456  使用root和密码登录\n\n        ","source":"_posts/MySQL新版本设置root密码和重置root密码.md","raw":"---\ntitle: MySQL新版本设置root密码和重置root密码\ndate: 2018-08-03 10:45:54\ntags: MySQL\n---\n\n    > 摘要:最近在虚拟机上安装Ubuntu18.04版本,然后安装MySQL-server.安装MySQL-server过程中不再像之前会提示\n    输入root账户的密码.所以需要进行对root账户设置密码,\n    \n    >操作环境:\n        OS:Ubuntu 18.04\n        MySQL版本:5.7及更高\n\n\n### 1.前置条件\n\n    需要系统的root账户或者使用sudo 命令\n\n### 2.使用mysql_secure_installation进行对密码设置\n\n    如果是第一次安装完MySQL后,可以使用:\n\n    sudo mysql_secure_installation  对root账户进行设置密码操作\n\n### 3.使用skip-grant-tables对root账户进行重置密码的操作\n\n    3.1 停止当前正在运行的mysql服务\n\n        sudo service mysql stop\n    \n    3.2 创建/var/run/mysqld目录,因为MySQL进程在启动和运行的时候都需要访问该soket文件\n\n        sudo mkdir -p /var/run/mysqld\n        sudo chown mysql:mysql /var/run/mysqld\n\n    3.3 使用skip-grant-tables启动服务程序\n\n        sudo /usr/sbin/mysqld --skip-grant-tables --skip-networking &\n\n        jobs 然后确认下服务是否启动成功\n\n    3.4 使用root无密码登录,进行修改设置密码操作\n\n        mysql -u root root无密码登录\n\n        FLUSH PRIVILEGES; 刷新一遍授权信息\n\n        USE mysql; 切换到mysql库(安装好后自带的)\n\n        UPDATE user SET authentication_string=PASSWORD(\"123456\") WHERE User='root'; 设置密码字段的新密码,\n        authentication_string是新版本存储密码的字段名,旧版本的是password.\n\n        UPDATE user SET plugin=\"mysql_native_password\" WHERE User='root';\n\n        FLUSH PRIVILEGES;\n\n        quit;\n\n    3.5 重启MySQL服务\n\n        sudo pkill mysqld  停掉之前启动的服务\n\n        jobs 查看是否正确停止服务\n\n        sudo service mysql start 启动MySQL服务\n\n    3.6 使用root账户和刚设置的密码进行登录操作\n\n        mysql -u root --password=123456  使用root和密码登录\n\n        ","slug":"MySQL新版本设置root密码和重置root密码","published":1,"updated":"2019-09-02T07:37:22.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck024pnv70007y6fgctp8mi6m","content":"<pre><code>&gt; 摘要:最近在虚拟机上安装Ubuntu18.04版本,然后安装MySQL-server.安装MySQL-server过程中不再像之前会提示\n输入root账户的密码.所以需要进行对root账户设置密码,\n\n&gt;操作环境:\n    OS:Ubuntu 18.04\n    MySQL版本:5.7及更高\n</code></pre><h3 id=\"1-前置条件\"><a href=\"#1-前置条件\" class=\"headerlink\" title=\"1.前置条件\"></a>1.前置条件</h3><pre><code>需要系统的root账户或者使用sudo 命令\n</code></pre><h3 id=\"2-使用mysql-secure-installation进行对密码设置\"><a href=\"#2-使用mysql-secure-installation进行对密码设置\" class=\"headerlink\" title=\"2.使用mysql_secure_installation进行对密码设置\"></a>2.使用mysql_secure_installation进行对密码设置</h3><pre><code>如果是第一次安装完MySQL后,可以使用:\n\nsudo mysql_secure_installation  对root账户进行设置密码操作\n</code></pre><h3 id=\"3-使用skip-grant-tables对root账户进行重置密码的操作\"><a href=\"#3-使用skip-grant-tables对root账户进行重置密码的操作\" class=\"headerlink\" title=\"3.使用skip-grant-tables对root账户进行重置密码的操作\"></a>3.使用skip-grant-tables对root账户进行重置密码的操作</h3><pre><code>3.1 停止当前正在运行的mysql服务\n\n    sudo service mysql stop\n\n3.2 创建/var/run/mysqld目录,因为MySQL进程在启动和运行的时候都需要访问该soket文件\n\n    sudo mkdir -p /var/run/mysqld\n    sudo chown mysql:mysql /var/run/mysqld\n\n3.3 使用skip-grant-tables启动服务程序\n\n    sudo /usr/sbin/mysqld --skip-grant-tables --skip-networking &amp;\n\n    jobs 然后确认下服务是否启动成功\n\n3.4 使用root无密码登录,进行修改设置密码操作\n\n    mysql -u root root无密码登录\n\n    FLUSH PRIVILEGES; 刷新一遍授权信息\n\n    USE mysql; 切换到mysql库(安装好后自带的)\n\n    UPDATE user SET authentication_string=PASSWORD(&quot;123456&quot;) WHERE User=&apos;root&apos;; 设置密码字段的新密码,\n    authentication_string是新版本存储密码的字段名,旧版本的是password.\n\n    UPDATE user SET plugin=&quot;mysql_native_password&quot; WHERE User=&apos;root&apos;;\n\n    FLUSH PRIVILEGES;\n\n    quit;\n\n3.5 重启MySQL服务\n\n    sudo pkill mysqld  停掉之前启动的服务\n\n    jobs 查看是否正确停止服务\n\n    sudo service mysql start 启动MySQL服务\n\n3.6 使用root账户和刚设置的密码进行登录操作\n\n    mysql -u root --password=123456  使用root和密码登录\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>&gt; 摘要:最近在虚拟机上安装Ubuntu18.04版本,然后安装MySQL-server.安装MySQL-server过程中不再像之前会提示\n输入root账户的密码.所以需要进行对root账户设置密码,\n\n&gt;操作环境:\n    OS:Ubuntu 18.04\n    MySQL版本:5.7及更高\n</code></pre><h3 id=\"1-前置条件\"><a href=\"#1-前置条件\" class=\"headerlink\" title=\"1.前置条件\"></a>1.前置条件</h3><pre><code>需要系统的root账户或者使用sudo 命令\n</code></pre><h3 id=\"2-使用mysql-secure-installation进行对密码设置\"><a href=\"#2-使用mysql-secure-installation进行对密码设置\" class=\"headerlink\" title=\"2.使用mysql_secure_installation进行对密码设置\"></a>2.使用mysql_secure_installation进行对密码设置</h3><pre><code>如果是第一次安装完MySQL后,可以使用:\n\nsudo mysql_secure_installation  对root账户进行设置密码操作\n</code></pre><h3 id=\"3-使用skip-grant-tables对root账户进行重置密码的操作\"><a href=\"#3-使用skip-grant-tables对root账户进行重置密码的操作\" class=\"headerlink\" title=\"3.使用skip-grant-tables对root账户进行重置密码的操作\"></a>3.使用skip-grant-tables对root账户进行重置密码的操作</h3><pre><code>3.1 停止当前正在运行的mysql服务\n\n    sudo service mysql stop\n\n3.2 创建/var/run/mysqld目录,因为MySQL进程在启动和运行的时候都需要访问该soket文件\n\n    sudo mkdir -p /var/run/mysqld\n    sudo chown mysql:mysql /var/run/mysqld\n\n3.3 使用skip-grant-tables启动服务程序\n\n    sudo /usr/sbin/mysqld --skip-grant-tables --skip-networking &amp;\n\n    jobs 然后确认下服务是否启动成功\n\n3.4 使用root无密码登录,进行修改设置密码操作\n\n    mysql -u root root无密码登录\n\n    FLUSH PRIVILEGES; 刷新一遍授权信息\n\n    USE mysql; 切换到mysql库(安装好后自带的)\n\n    UPDATE user SET authentication_string=PASSWORD(&quot;123456&quot;) WHERE User=&apos;root&apos;; 设置密码字段的新密码,\n    authentication_string是新版本存储密码的字段名,旧版本的是password.\n\n    UPDATE user SET plugin=&quot;mysql_native_password&quot; WHERE User=&apos;root&apos;;\n\n    FLUSH PRIVILEGES;\n\n    quit;\n\n3.5 重启MySQL服务\n\n    sudo pkill mysqld  停掉之前启动的服务\n\n    jobs 查看是否正确停止服务\n\n    sudo service mysql start 启动MySQL服务\n\n3.6 使用root账户和刚设置的密码进行登录操作\n\n    mysql -u root --password=123456  使用root和密码登录\n</code></pre>"},{"title":"MySQL设置用户远程登录","date":"2018-06-12T02:59:34.000Z","_content":"\n    摘要:在Linux(debian)下,通过apt install mysql-server后,输入root账户密码后,\n    默认是不允许远程登录的.可以用过以下几种方式来设置允许能够远程登录\n\n1.改mysql库下的user表的数据\n\n    mysql -u root –p\n    mysql>use mysql;\n    mysql>update user set host = '%' where user = 'root';\n    mysql>select host, user from user;\n\n2.通过授权的方式,这种方式可以对不同的用户设置不同的访问权限\n\n    #例如: 在MySQL服务器主机上执行,允许root使用123456从任何主机连接到mysql服务器\n\n    mysql>GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;\n\n    mysql>FLUSH PRIVILEGES; # 刷新权限,使配置生效\n\n    #例如:允许用户test从ip为120.77.163.89的主机连接到mysql服务器，并使用123456作为密码\n\n    mysql>GRANT ALL PRIVILEGES ON *.* TO 'test'@’120.77.163.89’ IDENTIFIED BY '654321' WITH GRANT OPTION;\n\n    mysql>FLUSH PRIVILEGES; # 刷新权限,使配置生效\n","source":"_posts/MySQL设置用户远程登录.md","raw":"---\ntitle: MySQL设置用户远程登录\ndate: 2018-06-12 10:59:34\ntags: MySQL\n---\n\n    摘要:在Linux(debian)下,通过apt install mysql-server后,输入root账户密码后,\n    默认是不允许远程登录的.可以用过以下几种方式来设置允许能够远程登录\n\n1.改mysql库下的user表的数据\n\n    mysql -u root –p\n    mysql>use mysql;\n    mysql>update user set host = '%' where user = 'root';\n    mysql>select host, user from user;\n\n2.通过授权的方式,这种方式可以对不同的用户设置不同的访问权限\n\n    #例如: 在MySQL服务器主机上执行,允许root使用123456从任何主机连接到mysql服务器\n\n    mysql>GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;\n\n    mysql>FLUSH PRIVILEGES; # 刷新权限,使配置生效\n\n    #例如:允许用户test从ip为120.77.163.89的主机连接到mysql服务器，并使用123456作为密码\n\n    mysql>GRANT ALL PRIVILEGES ON *.* TO 'test'@’120.77.163.89’ IDENTIFIED BY '654321' WITH GRANT OPTION;\n\n    mysql>FLUSH PRIVILEGES; # 刷新权限,使配置生效\n","slug":"MySQL设置用户远程登录","published":1,"updated":"2019-09-02T07:37:22.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck024pnv80008y6fgkko2j8k5","content":"<pre><code>摘要:在Linux(debian)下,通过apt install mysql-server后,输入root账户密码后,\n默认是不允许远程登录的.可以用过以下几种方式来设置允许能够远程登录\n</code></pre><p>1.改mysql库下的user表的数据</p>\n<pre><code>mysql -u root –p\nmysql&gt;use mysql;\nmysql&gt;update user set host = &apos;%&apos; where user = &apos;root&apos;;\nmysql&gt;select host, user from user;\n</code></pre><p>2.通过授权的方式,这种方式可以对不同的用户设置不同的访问权限</p>\n<pre><code>#例如: 在MySQL服务器主机上执行,允许root使用123456从任何主机连接到mysql服务器\n\nmysql&gt;GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos; WITH GRANT OPTION;\n\nmysql&gt;FLUSH PRIVILEGES; # 刷新权限,使配置生效\n\n#例如:允许用户test从ip为120.77.163.89的主机连接到mysql服务器，并使用123456作为密码\n\nmysql&gt;GRANT ALL PRIVILEGES ON *.* TO &apos;test&apos;@’120.77.163.89’ IDENTIFIED BY &apos;654321&apos; WITH GRANT OPTION;\n\nmysql&gt;FLUSH PRIVILEGES; # 刷新权限,使配置生效\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>摘要:在Linux(debian)下,通过apt install mysql-server后,输入root账户密码后,\n默认是不允许远程登录的.可以用过以下几种方式来设置允许能够远程登录\n</code></pre><p>1.改mysql库下的user表的数据</p>\n<pre><code>mysql -u root –p\nmysql&gt;use mysql;\nmysql&gt;update user set host = &apos;%&apos; where user = &apos;root&apos;;\nmysql&gt;select host, user from user;\n</code></pre><p>2.通过授权的方式,这种方式可以对不同的用户设置不同的访问权限</p>\n<pre><code>#例如: 在MySQL服务器主机上执行,允许root使用123456从任何主机连接到mysql服务器\n\nmysql&gt;GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos; WITH GRANT OPTION;\n\nmysql&gt;FLUSH PRIVILEGES; # 刷新权限,使配置生效\n\n#例如:允许用户test从ip为120.77.163.89的主机连接到mysql服务器，并使用123456作为密码\n\nmysql&gt;GRANT ALL PRIVILEGES ON *.* TO &apos;test&apos;@’120.77.163.89’ IDENTIFIED BY &apos;654321&apos; WITH GRANT OPTION;\n\nmysql&gt;FLUSH PRIVILEGES; # 刷新权限,使配置生效\n</code></pre>"},{"title":"Shell基础","date":"2018-05-20T10:52:36.000Z","_content":"\n    摘要:\n      Shell是一个命令行解释器,它为用户提供了一个向Linux内核\n      发送请求以便运行程序的界面系统级程序.用户可以用Shell来启动,挂起,\n      停止甚至是编写一些程序.\n      Shell还是一个功能相当强大的编程语言.易编写,意调试,灵活性较强.\n      Shell是解释执行的语言,在Shell中可以直接调用Linux系统命令.\n\n#### 1.脚本的执行方式\n\n    1. echo 输出命令\n        echo [选项] [输出内容]\n        选项:\n          -e : 支持反斜杠控制的字符转换\n\n    2. 编写第一个脚本\n      vim hello.sh\n      #!/bin/bash\n      # this is hello program!\n      echo \"hello\"\n\n    3. 脚本执行\n      1.赋予执行权限  \n        chmod 755 ./hello.sh\n        ./hello.sh\n      2.通过bash调用执行脚本\n        bash ./hello.sh\n      3.使用sh命令执行\n        sh ./hello.sh\n\n#### 2.Bash的基本功能\n\n    1. 命令的别名,很多泛指为Linux下的命令,其实本质是属于Bash\n      `alias` 查看系统中所有的命令的别名\n    2. 设置命令别名\n      alias 别名= '原命令'\n      alias ll='ls -l'  #给ls -l 设置别名ll\n\n      以上设置别名的方式只是当次有效,系统重启后无效.要设置别名永久有效,\n      可以写入环境变量中\n      vim ~/.bashrc\n      alias ll='ls -l'\n      保存,执行source ~/.bashrc即可\n\n    3. 删除别名\n      unalias 别名\n      unalias ll\n      unalias是删除临时别名的,永久生效的别名需要删除环境变量中的配置\n\n    4. 命令的生效顺序\n      第一顺位执行用绝对路径或者相对路径的命令\n      第二顺位执行别名\n      第三顺位执行Bash的内部命令\n      第四顺位执行按照$PATH环境变量定义的目录查找顺序找到的第一个命令\n\n      注:因为别名的执行顺序是高于$PATH下的命令的,\n      所以一般情况下请勿将别名设为与其他原始命令相同的命令.\n\n#### 3.Shell编程之Bash变量\n\n  Shell中,所有变量默认都是字符串类型\n\n  1. 用户自定义变量  变量名=变量值(等号2边不能有空格)\n\n    用户自己定义的变量,变量名和值可随意更改\n\n    name=\"zhangsan\"\n\n    echo $name #显示name的值\n\n    1.1 变量叠加\n\n      name=\"$name\"isaname\n\n    1.2  删除变量(释放变量的内存地址) unset 变量名\n\n  2. 环境变量\n\n    环境变量是全局变量,用户可更改值,不能更改名称\n\n  3. 位置参数变量\n\n    $n :n为数字,$0代表命令本身.$1-$9代表第1-第9个参数,10以上的参数需要用大括号包含,如${10}\n\n    例:vim sum.sh\n\n      `#!/bin/bash\n\n        num1=$1\n\n        num2=$2\n\n        sum=$(($num1+$num2))\n\n        #变量sum的和是num1+num2\n\n        echo $sum`\n\n        执行;./sum.sh 10 20  #./sum.sh是$0,10是$1,20是$2\n\n        结果:30\n\n    $* : 这个变量代表命令行中中所有的参数,$* 把所有的参数看成一个整体\n\n    $@ : 这个变量也代表命令行中所有的参数,不过$@ 是把每个参数区分对待\n\n    @# : 这个变量代表命令行中所有参数的个数\n\n    例:vim /demo.sh\n\n    `#!/bin/bash\n\n    echo \"参数是: $* \"\n\n    echo \"参数也是: $@ \"\n\n    echo \"参数个数是: $#\"`\n\n    执行;./demo.sh 11 22 33\n\n    结果:参数是: 11 22 33 参数也是: 11 22 33 参数个数是: 3\n\n    $* 和 $@ 区别\n\n    vim ./demo.sh\n\n    #!/bin/bash\n\n    `for i in \"$*\"\n\n    #$* 把所有的参数看成一个整体,所以执行循环1次\n\n      do\n\n        echo \"参数是: $i\"\n\n      done\n\n    for y in \"$@\"\n\n    #$@ 是把每个参数区分对待,所有有几个参数就循环几次\n\n      do\n\n        echo \"参数是: $y\"\n\n      done\n    `\n\n  4. 预定义变量\n\n    $? : 最后依次执行的命令的返回结果,如果返回是0,代表上一个命令执行成功,如果返回是非0,代表上一个命令执行失败\n\n    $$ : 返回当前进程的PID号\n\n    $! : 后台运行的最后一个进程的进程号(PID)\n\n  5. 接收键盘输入:read 命令\n\n    read [选项] [变量名]\n\n    选项\n\n      -p \"提示信息\":在等待read输入时,输出提示信息\n\n      -t 秒数: read命令会一直等待用户输入,输入次选项可以指定用户等待时间\n\n      -n 字符数: read命令只接受指定的字符数,就会执行\n\n      -s : 隐藏输入的数据,适用于输入密码等情况\n\n#### 4.Shell编程之运算符\n\n    1. declare命令\n\n      declare声明变量类型\n\n      declare [+/-] [选项] 变量名\n\n        选项:用-给变量设定类型属性,用+取消变量的类型属性\n\n      常见选项类型\n\n        -a 将变量声明为数组类型\n\n        -i 将变量声明为整形\n\n        -x 将变量声明为环境变量\n\n        -r 将变量声明为只读变量(设置为只读属性后,不能对变量进行删除,修改,取消属性的操作)\n\n        -p 查看显示指定变量的被声明的类型\n\n    2. 数值运算的方法\n\n      方法1:\n\n      [root@localhost~]# aa=11\n\n      [root@localhost~]# bb=22\n\n      [root@localhost~]# declare -i cc=$aa+$bb\n\n      方法2:\n\n        expr或者let数值运算工具\n\n        [root@localhost~]# aa=11\n\n        [root@localhost~]# bb=22\n\n        [root@localhost~]# dd=$(expr $aa + $bb)\n\n        #dd的值是aa和bb的和,注意:\"+\"号两侧必须有空格\n\n      方法3:\n\n        \"$(())\"或\"$[运算式]\"\n\n        [root@localhost~]# aa=11\n\n        [root@localhost~]# bb=22\n\n        [root@localhost~]# cc=$(($aa + $bb))\n\n        [root@localhost~]# gg=$[$aa + $bb]\n\n    3. 变量测试(只是针对Shell,其他常用不适用.一般不常用,对脚本进行优化的时候才使用)\n\n#### 5.Shell编程之环境变量配置文件\n\n    `/etc/profile\n\n    /etc/profile.d/*.sh\n\n    /etc/bashrc\n\n    ~/.bashrc\n\n    ~/.bash_profile`\n\n    /etc目录下的是系统环境变量文件,~目录下的是当前用户的环境变量配置文件\n\n#### 6.Shell编程之正则表达式\n\n    正则表达式主要是用于描述字符排列和匹配模式d额一种语法规则，\n    主要用于字符串的模式分割,匹配,查找及替换操作\n\n  1.正则表达式与通配符\n\n    通配符：\n      *：匹配任意内容\n      ?：匹配任意一个内容\n      []：匹配括号中的一个字符.\n\n\n  正则表达式用来在文件中匹配符合条件的字符串,正则是包含匹配.\n  grep,awk,sed等命令可以支持正则表达式.\n\n  通配符用来匹配符合条件的文件名,通配符是完全匹配.\n  ls,find,cp这些命令不支持正则表达式,所以只能使用shell的通配符匹配.\n\n  #### 基础正则表达式:\n\n  | 元字符 | 作用 | \n  | - | :-: | -: | \n  |*|前一个字符匹配0次或者任意多次|\n  |.|匹配除了换行符以外的任意一个字符|\n  |^|匹配行首.例如:^hello匹配以hello开头的行|\n  |$|匹配行尾.例如:hello$匹配以hello结尾的行|\n  |[]|匹配中括号中指定的任意一个字符,只匹配一个字符|\n  |[^]|匹配除中括号中的字符以外的任意一个字符,例:[^0-9]表示匹配任意一位非数字字符|\n  |\\\\|转义符,用于将特殊符号的含义取消|\n  |\\\\{n\\\\}|表示其前面的字符恰好出现n次.例:[0-9]\\\\{4\\\\}匹配4位数字|\n  |\\\\{n,\\\\}|表示其前面出现的字符不小于n次,例:[0-9]\\\\{2,\\\\}表示2位及以上的数字|\n  |\\\\{n,m\\\\}|表示其前面出现的字符至少出现n次,最多出现m次,例:[a-z]\\\\{2,4\\\\}匹配2到4位的小写字母|","source":"_posts/Shell基础.md","raw":"---\ntitle: Shell基础\ndate: 2018-05-20 18:52:36\ntags:\n  - linux\n  - shell\n---\n\n    摘要:\n      Shell是一个命令行解释器,它为用户提供了一个向Linux内核\n      发送请求以便运行程序的界面系统级程序.用户可以用Shell来启动,挂起,\n      停止甚至是编写一些程序.\n      Shell还是一个功能相当强大的编程语言.易编写,意调试,灵活性较强.\n      Shell是解释执行的语言,在Shell中可以直接调用Linux系统命令.\n\n#### 1.脚本的执行方式\n\n    1. echo 输出命令\n        echo [选项] [输出内容]\n        选项:\n          -e : 支持反斜杠控制的字符转换\n\n    2. 编写第一个脚本\n      vim hello.sh\n      #!/bin/bash\n      # this is hello program!\n      echo \"hello\"\n\n    3. 脚本执行\n      1.赋予执行权限  \n        chmod 755 ./hello.sh\n        ./hello.sh\n      2.通过bash调用执行脚本\n        bash ./hello.sh\n      3.使用sh命令执行\n        sh ./hello.sh\n\n#### 2.Bash的基本功能\n\n    1. 命令的别名,很多泛指为Linux下的命令,其实本质是属于Bash\n      `alias` 查看系统中所有的命令的别名\n    2. 设置命令别名\n      alias 别名= '原命令'\n      alias ll='ls -l'  #给ls -l 设置别名ll\n\n      以上设置别名的方式只是当次有效,系统重启后无效.要设置别名永久有效,\n      可以写入环境变量中\n      vim ~/.bashrc\n      alias ll='ls -l'\n      保存,执行source ~/.bashrc即可\n\n    3. 删除别名\n      unalias 别名\n      unalias ll\n      unalias是删除临时别名的,永久生效的别名需要删除环境变量中的配置\n\n    4. 命令的生效顺序\n      第一顺位执行用绝对路径或者相对路径的命令\n      第二顺位执行别名\n      第三顺位执行Bash的内部命令\n      第四顺位执行按照$PATH环境变量定义的目录查找顺序找到的第一个命令\n\n      注:因为别名的执行顺序是高于$PATH下的命令的,\n      所以一般情况下请勿将别名设为与其他原始命令相同的命令.\n\n#### 3.Shell编程之Bash变量\n\n  Shell中,所有变量默认都是字符串类型\n\n  1. 用户自定义变量  变量名=变量值(等号2边不能有空格)\n\n    用户自己定义的变量,变量名和值可随意更改\n\n    name=\"zhangsan\"\n\n    echo $name #显示name的值\n\n    1.1 变量叠加\n\n      name=\"$name\"isaname\n\n    1.2  删除变量(释放变量的内存地址) unset 变量名\n\n  2. 环境变量\n\n    环境变量是全局变量,用户可更改值,不能更改名称\n\n  3. 位置参数变量\n\n    $n :n为数字,$0代表命令本身.$1-$9代表第1-第9个参数,10以上的参数需要用大括号包含,如${10}\n\n    例:vim sum.sh\n\n      `#!/bin/bash\n\n        num1=$1\n\n        num2=$2\n\n        sum=$(($num1+$num2))\n\n        #变量sum的和是num1+num2\n\n        echo $sum`\n\n        执行;./sum.sh 10 20  #./sum.sh是$0,10是$1,20是$2\n\n        结果:30\n\n    $* : 这个变量代表命令行中中所有的参数,$* 把所有的参数看成一个整体\n\n    $@ : 这个变量也代表命令行中所有的参数,不过$@ 是把每个参数区分对待\n\n    @# : 这个变量代表命令行中所有参数的个数\n\n    例:vim /demo.sh\n\n    `#!/bin/bash\n\n    echo \"参数是: $* \"\n\n    echo \"参数也是: $@ \"\n\n    echo \"参数个数是: $#\"`\n\n    执行;./demo.sh 11 22 33\n\n    结果:参数是: 11 22 33 参数也是: 11 22 33 参数个数是: 3\n\n    $* 和 $@ 区别\n\n    vim ./demo.sh\n\n    #!/bin/bash\n\n    `for i in \"$*\"\n\n    #$* 把所有的参数看成一个整体,所以执行循环1次\n\n      do\n\n        echo \"参数是: $i\"\n\n      done\n\n    for y in \"$@\"\n\n    #$@ 是把每个参数区分对待,所有有几个参数就循环几次\n\n      do\n\n        echo \"参数是: $y\"\n\n      done\n    `\n\n  4. 预定义变量\n\n    $? : 最后依次执行的命令的返回结果,如果返回是0,代表上一个命令执行成功,如果返回是非0,代表上一个命令执行失败\n\n    $$ : 返回当前进程的PID号\n\n    $! : 后台运行的最后一个进程的进程号(PID)\n\n  5. 接收键盘输入:read 命令\n\n    read [选项] [变量名]\n\n    选项\n\n      -p \"提示信息\":在等待read输入时,输出提示信息\n\n      -t 秒数: read命令会一直等待用户输入,输入次选项可以指定用户等待时间\n\n      -n 字符数: read命令只接受指定的字符数,就会执行\n\n      -s : 隐藏输入的数据,适用于输入密码等情况\n\n#### 4.Shell编程之运算符\n\n    1. declare命令\n\n      declare声明变量类型\n\n      declare [+/-] [选项] 变量名\n\n        选项:用-给变量设定类型属性,用+取消变量的类型属性\n\n      常见选项类型\n\n        -a 将变量声明为数组类型\n\n        -i 将变量声明为整形\n\n        -x 将变量声明为环境变量\n\n        -r 将变量声明为只读变量(设置为只读属性后,不能对变量进行删除,修改,取消属性的操作)\n\n        -p 查看显示指定变量的被声明的类型\n\n    2. 数值运算的方法\n\n      方法1:\n\n      [root@localhost~]# aa=11\n\n      [root@localhost~]# bb=22\n\n      [root@localhost~]# declare -i cc=$aa+$bb\n\n      方法2:\n\n        expr或者let数值运算工具\n\n        [root@localhost~]# aa=11\n\n        [root@localhost~]# bb=22\n\n        [root@localhost~]# dd=$(expr $aa + $bb)\n\n        #dd的值是aa和bb的和,注意:\"+\"号两侧必须有空格\n\n      方法3:\n\n        \"$(())\"或\"$[运算式]\"\n\n        [root@localhost~]# aa=11\n\n        [root@localhost~]# bb=22\n\n        [root@localhost~]# cc=$(($aa + $bb))\n\n        [root@localhost~]# gg=$[$aa + $bb]\n\n    3. 变量测试(只是针对Shell,其他常用不适用.一般不常用,对脚本进行优化的时候才使用)\n\n#### 5.Shell编程之环境变量配置文件\n\n    `/etc/profile\n\n    /etc/profile.d/*.sh\n\n    /etc/bashrc\n\n    ~/.bashrc\n\n    ~/.bash_profile`\n\n    /etc目录下的是系统环境变量文件,~目录下的是当前用户的环境变量配置文件\n\n#### 6.Shell编程之正则表达式\n\n    正则表达式主要是用于描述字符排列和匹配模式d额一种语法规则，\n    主要用于字符串的模式分割,匹配,查找及替换操作\n\n  1.正则表达式与通配符\n\n    通配符：\n      *：匹配任意内容\n      ?：匹配任意一个内容\n      []：匹配括号中的一个字符.\n\n\n  正则表达式用来在文件中匹配符合条件的字符串,正则是包含匹配.\n  grep,awk,sed等命令可以支持正则表达式.\n\n  通配符用来匹配符合条件的文件名,通配符是完全匹配.\n  ls,find,cp这些命令不支持正则表达式,所以只能使用shell的通配符匹配.\n\n  #### 基础正则表达式:\n\n  | 元字符 | 作用 | \n  | - | :-: | -: | \n  |*|前一个字符匹配0次或者任意多次|\n  |.|匹配除了换行符以外的任意一个字符|\n  |^|匹配行首.例如:^hello匹配以hello开头的行|\n  |$|匹配行尾.例如:hello$匹配以hello结尾的行|\n  |[]|匹配中括号中指定的任意一个字符,只匹配一个字符|\n  |[^]|匹配除中括号中的字符以外的任意一个字符,例:[^0-9]表示匹配任意一位非数字字符|\n  |\\\\|转义符,用于将特殊符号的含义取消|\n  |\\\\{n\\\\}|表示其前面的字符恰好出现n次.例:[0-9]\\\\{4\\\\}匹配4位数字|\n  |\\\\{n,\\\\}|表示其前面出现的字符不小于n次,例:[0-9]\\\\{2,\\\\}表示2位及以上的数字|\n  |\\\\{n,m\\\\}|表示其前面出现的字符至少出现n次,最多出现m次,例:[a-z]\\\\{2,4\\\\}匹配2到4位的小写字母|","slug":"Shell基础","published":1,"updated":"2019-09-02T07:37:22.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck024pnvb000ay6fgwbt8ks0z","content":"<pre><code>摘要:\n  Shell是一个命令行解释器,它为用户提供了一个向Linux内核\n  发送请求以便运行程序的界面系统级程序.用户可以用Shell来启动,挂起,\n  停止甚至是编写一些程序.\n  Shell还是一个功能相当强大的编程语言.易编写,意调试,灵活性较强.\n  Shell是解释执行的语言,在Shell中可以直接调用Linux系统命令.\n</code></pre><h4 id=\"1-脚本的执行方式\"><a href=\"#1-脚本的执行方式\" class=\"headerlink\" title=\"1.脚本的执行方式\"></a>1.脚本的执行方式</h4><pre><code>1. echo 输出命令\n    echo [选项] [输出内容]\n    选项:\n      -e : 支持反斜杠控制的字符转换\n\n2. 编写第一个脚本\n  vim hello.sh\n  #!/bin/bash\n  # this is hello program!\n  echo &quot;hello&quot;\n\n3. 脚本执行\n  1.赋予执行权限  \n    chmod 755 ./hello.sh\n    ./hello.sh\n  2.通过bash调用执行脚本\n    bash ./hello.sh\n  3.使用sh命令执行\n    sh ./hello.sh\n</code></pre><h4 id=\"2-Bash的基本功能\"><a href=\"#2-Bash的基本功能\" class=\"headerlink\" title=\"2.Bash的基本功能\"></a>2.Bash的基本功能</h4><pre><code>1. 命令的别名,很多泛指为Linux下的命令,其实本质是属于Bash\n  `alias` 查看系统中所有的命令的别名\n2. 设置命令别名\n  alias 别名= &apos;原命令&apos;\n  alias ll=&apos;ls -l&apos;  #给ls -l 设置别名ll\n\n  以上设置别名的方式只是当次有效,系统重启后无效.要设置别名永久有效,\n  可以写入环境变量中\n  vim ~/.bashrc\n  alias ll=&apos;ls -l&apos;\n  保存,执行source ~/.bashrc即可\n\n3. 删除别名\n  unalias 别名\n  unalias ll\n  unalias是删除临时别名的,永久生效的别名需要删除环境变量中的配置\n\n4. 命令的生效顺序\n  第一顺位执行用绝对路径或者相对路径的命令\n  第二顺位执行别名\n  第三顺位执行Bash的内部命令\n  第四顺位执行按照$PATH环境变量定义的目录查找顺序找到的第一个命令\n\n  注:因为别名的执行顺序是高于$PATH下的命令的,\n  所以一般情况下请勿将别名设为与其他原始命令相同的命令.\n</code></pre><h4 id=\"3-Shell编程之Bash变量\"><a href=\"#3-Shell编程之Bash变量\" class=\"headerlink\" title=\"3.Shell编程之Bash变量\"></a>3.Shell编程之Bash变量</h4><p>  Shell中,所有变量默认都是字符串类型</p>\n<ol>\n<li><p>用户自定义变量  变量名=变量值(等号2边不能有空格)</p>\n<p>用户自己定义的变量,变量名和值可随意更改</p>\n<p>name=”zhangsan”</p>\n<p>echo $name #显示name的值</p>\n<p>1.1 变量叠加</p>\n<p> name=”$name”isaname</p>\n<p>1.2  删除变量(释放变量的内存地址) unset 变量名</p>\n</li>\n<li><p>环境变量</p>\n<p>环境变量是全局变量,用户可更改值,不能更改名称</p>\n</li>\n<li><p>位置参数变量</p>\n<p>$n :n为数字,$0代表命令本身.$1-$9代表第1-第9个参数,10以上的参数需要用大括号包含,如${10}</p>\n<p>例:vim sum.sh</p>\n<p> `#!/bin/bash</p>\n<p>   num1=$1</p>\n<p>   num2=$2</p>\n<p>   sum=$(($num1+$num2))</p>\n<p>   #变量sum的和是num1+num2</p>\n<p>   echo $sum`</p>\n<p>   执行;./sum.sh 10 20  #./sum.sh是$0,10是$1,20是$2</p>\n<p>   结果:30</p>\n<p>$<em> : 这个变量代表命令行中中所有的参数,$</em> 把所有的参数看成一个整体</p>\n<p>$@ : 这个变量也代表命令行中所有的参数,不过$@ 是把每个参数区分对待</p>\n<p>@# : 这个变量代表命令行中所有参数的个数</p>\n<p>例:vim /demo.sh</p>\n<p>`#!/bin/bash</p>\n<p>echo “参数是: $* “</p>\n<p>echo “参数也是: $@ “</p>\n<p>echo “参数个数是: $#”`</p>\n<p>执行;./demo.sh 11 22 33</p>\n<p>结果:参数是: 11 22 33 参数也是: 11 22 33 参数个数是: 3</p>\n<p>$* 和 $@ 区别</p>\n<p>vim ./demo.sh</p>\n<p>#!/bin/bash</p>\n<p>`for i in “$*”</p>\n<p>#$* 把所有的参数看成一个整体,所以执行循环1次</p>\n<p> do</p>\n<p>   echo “参数是: $i”</p>\n<p> done</p>\n<p>for y in “$@”</p>\n<p>#$@ 是把每个参数区分对待,所有有几个参数就循环几次</p>\n<p> do</p>\n<p>   echo “参数是: $y”</p>\n<p> done<br>`</p>\n</li>\n<li><p>预定义变量</p>\n<p>$? : 最后依次执行的命令的返回结果,如果返回是0,代表上一个命令执行成功,如果返回是非0,代表上一个命令执行失败</p>\n<p>$$ : 返回当前进程的PID号</p>\n<p>$! : 后台运行的最后一个进程的进程号(PID)</p>\n</li>\n<li><p>接收键盘输入:read 命令</p>\n<p>read [选项] [变量名]</p>\n<p>选项</p>\n<p> -p “提示信息”:在等待read输入时,输出提示信息</p>\n<p> -t 秒数: read命令会一直等待用户输入,输入次选项可以指定用户等待时间</p>\n<p> -n 字符数: read命令只接受指定的字符数,就会执行</p>\n<p> -s : 隐藏输入的数据,适用于输入密码等情况</p>\n</li>\n</ol>\n<h4 id=\"4-Shell编程之运算符\"><a href=\"#4-Shell编程之运算符\" class=\"headerlink\" title=\"4.Shell编程之运算符\"></a>4.Shell编程之运算符</h4><pre><code>1. declare命令\n\n  declare声明变量类型\n\n  declare [+/-] [选项] 变量名\n\n    选项:用-给变量设定类型属性,用+取消变量的类型属性\n\n  常见选项类型\n\n    -a 将变量声明为数组类型\n\n    -i 将变量声明为整形\n\n    -x 将变量声明为环境变量\n\n    -r 将变量声明为只读变量(设置为只读属性后,不能对变量进行删除,修改,取消属性的操作)\n\n    -p 查看显示指定变量的被声明的类型\n\n2. 数值运算的方法\n\n  方法1:\n\n  [root@localhost~]# aa=11\n\n  [root@localhost~]# bb=22\n\n  [root@localhost~]# declare -i cc=$aa+$bb\n\n  方法2:\n\n    expr或者let数值运算工具\n\n    [root@localhost~]# aa=11\n\n    [root@localhost~]# bb=22\n\n    [root@localhost~]# dd=$(expr $aa + $bb)\n\n    #dd的值是aa和bb的和,注意:&quot;+&quot;号两侧必须有空格\n\n  方法3:\n\n    &quot;$(())&quot;或&quot;$[运算式]&quot;\n\n    [root@localhost~]# aa=11\n\n    [root@localhost~]# bb=22\n\n    [root@localhost~]# cc=$(($aa + $bb))\n\n    [root@localhost~]# gg=$[$aa + $bb]\n\n3. 变量测试(只是针对Shell,其他常用不适用.一般不常用,对脚本进行优化的时候才使用)\n</code></pre><h4 id=\"5-Shell编程之环境变量配置文件\"><a href=\"#5-Shell编程之环境变量配置文件\" class=\"headerlink\" title=\"5.Shell编程之环境变量配置文件\"></a>5.Shell编程之环境变量配置文件</h4><pre><code>`/etc/profile\n\n/etc/profile.d/*.sh\n\n/etc/bashrc\n\n~/.bashrc\n\n~/.bash_profile`\n\n/etc目录下的是系统环境变量文件,~目录下的是当前用户的环境变量配置文件\n</code></pre><h4 id=\"6-Shell编程之正则表达式\"><a href=\"#6-Shell编程之正则表达式\" class=\"headerlink\" title=\"6.Shell编程之正则表达式\"></a>6.Shell编程之正则表达式</h4><pre><code>正则表达式主要是用于描述字符排列和匹配模式d额一种语法规则，\n主要用于字符串的模式分割,匹配,查找及替换操作\n</code></pre><p>  1.正则表达式与通配符</p>\n<pre><code>通配符：\n  *：匹配任意内容\n  ?：匹配任意一个内容\n  []：匹配括号中的一个字符.\n</code></pre><p>  正则表达式用来在文件中匹配符合条件的字符串,正则是包含匹配.<br>  grep,awk,sed等命令可以支持正则表达式.</p>\n<p>  通配符用来匹配符合条件的文件名,通配符是完全匹配.<br>  ls,find,cp这些命令不支持正则表达式,所以只能使用shell的通配符匹配.</p>\n<h4 id=\"基础正则表达式\"><a href=\"#基础正则表达式\" class=\"headerlink\" title=\"基础正则表达式:\"></a>基础正则表达式:</h4><table>\n<thead>\n<tr>\n<th>元字符</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td style=\"text-align:center\">前一个字符匹配0次或者任意多次</td>\n</tr>\n<tr>\n<td>.</td>\n<td style=\"text-align:center\">匹配除了换行符以外的任意一个字符</td>\n</tr>\n<tr>\n<td>^</td>\n<td style=\"text-align:center\">匹配行首.例如:^hello匹配以hello开头的行</td>\n</tr>\n<tr>\n<td>$</td>\n<td style=\"text-align:center\">匹配行尾.例如:hello$匹配以hello结尾的行</td>\n</tr>\n<tr>\n<td>[]</td>\n<td style=\"text-align:center\">匹配中括号中指定的任意一个字符,只匹配一个字符</td>\n</tr>\n<tr>\n<td>[^]</td>\n<td style=\"text-align:center\">匹配除中括号中的字符以外的任意一个字符,例:[^0-9]表示匹配任意一位非数字字符</td>\n</tr>\n<tr>\n<td>\\</td>\n<td style=\"text-align:center\">转义符,用于将特殊符号的含义取消</td>\n</tr>\n<tr>\n<td>\\{n\\}</td>\n<td style=\"text-align:center\">表示其前面的字符恰好出现n次.例:[0-9]\\{4\\}匹配4位数字</td>\n</tr>\n<tr>\n<td>\\{n,\\}</td>\n<td style=\"text-align:center\">表示其前面出现的字符不小于n次,例:[0-9]\\{2,\\}表示2位及以上的数字</td>\n</tr>\n<tr>\n<td>\\{n,m\\}</td>\n<td style=\"text-align:center\">表示其前面出现的字符至少出现n次,最多出现m次,例:[a-z]\\{2,4\\}匹配2到4位的小写字母</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>摘要:\n  Shell是一个命令行解释器,它为用户提供了一个向Linux内核\n  发送请求以便运行程序的界面系统级程序.用户可以用Shell来启动,挂起,\n  停止甚至是编写一些程序.\n  Shell还是一个功能相当强大的编程语言.易编写,意调试,灵活性较强.\n  Shell是解释执行的语言,在Shell中可以直接调用Linux系统命令.\n</code></pre><h4 id=\"1-脚本的执行方式\"><a href=\"#1-脚本的执行方式\" class=\"headerlink\" title=\"1.脚本的执行方式\"></a>1.脚本的执行方式</h4><pre><code>1. echo 输出命令\n    echo [选项] [输出内容]\n    选项:\n      -e : 支持反斜杠控制的字符转换\n\n2. 编写第一个脚本\n  vim hello.sh\n  #!/bin/bash\n  # this is hello program!\n  echo &quot;hello&quot;\n\n3. 脚本执行\n  1.赋予执行权限  \n    chmod 755 ./hello.sh\n    ./hello.sh\n  2.通过bash调用执行脚本\n    bash ./hello.sh\n  3.使用sh命令执行\n    sh ./hello.sh\n</code></pre><h4 id=\"2-Bash的基本功能\"><a href=\"#2-Bash的基本功能\" class=\"headerlink\" title=\"2.Bash的基本功能\"></a>2.Bash的基本功能</h4><pre><code>1. 命令的别名,很多泛指为Linux下的命令,其实本质是属于Bash\n  `alias` 查看系统中所有的命令的别名\n2. 设置命令别名\n  alias 别名= &apos;原命令&apos;\n  alias ll=&apos;ls -l&apos;  #给ls -l 设置别名ll\n\n  以上设置别名的方式只是当次有效,系统重启后无效.要设置别名永久有效,\n  可以写入环境变量中\n  vim ~/.bashrc\n  alias ll=&apos;ls -l&apos;\n  保存,执行source ~/.bashrc即可\n\n3. 删除别名\n  unalias 别名\n  unalias ll\n  unalias是删除临时别名的,永久生效的别名需要删除环境变量中的配置\n\n4. 命令的生效顺序\n  第一顺位执行用绝对路径或者相对路径的命令\n  第二顺位执行别名\n  第三顺位执行Bash的内部命令\n  第四顺位执行按照$PATH环境变量定义的目录查找顺序找到的第一个命令\n\n  注:因为别名的执行顺序是高于$PATH下的命令的,\n  所以一般情况下请勿将别名设为与其他原始命令相同的命令.\n</code></pre><h4 id=\"3-Shell编程之Bash变量\"><a href=\"#3-Shell编程之Bash变量\" class=\"headerlink\" title=\"3.Shell编程之Bash变量\"></a>3.Shell编程之Bash变量</h4><p>  Shell中,所有变量默认都是字符串类型</p>\n<ol>\n<li><p>用户自定义变量  变量名=变量值(等号2边不能有空格)</p>\n<p>用户自己定义的变量,变量名和值可随意更改</p>\n<p>name=”zhangsan”</p>\n<p>echo $name #显示name的值</p>\n<p>1.1 变量叠加</p>\n<p> name=”$name”isaname</p>\n<p>1.2  删除变量(释放变量的内存地址) unset 变量名</p>\n</li>\n<li><p>环境变量</p>\n<p>环境变量是全局变量,用户可更改值,不能更改名称</p>\n</li>\n<li><p>位置参数变量</p>\n<p>$n :n为数字,$0代表命令本身.$1-$9代表第1-第9个参数,10以上的参数需要用大括号包含,如${10}</p>\n<p>例:vim sum.sh</p>\n<p> `#!/bin/bash</p>\n<p>   num1=$1</p>\n<p>   num2=$2</p>\n<p>   sum=$(($num1+$num2))</p>\n<p>   #变量sum的和是num1+num2</p>\n<p>   echo $sum`</p>\n<p>   执行;./sum.sh 10 20  #./sum.sh是$0,10是$1,20是$2</p>\n<p>   结果:30</p>\n<p>$<em> : 这个变量代表命令行中中所有的参数,$</em> 把所有的参数看成一个整体</p>\n<p>$@ : 这个变量也代表命令行中所有的参数,不过$@ 是把每个参数区分对待</p>\n<p>@# : 这个变量代表命令行中所有参数的个数</p>\n<p>例:vim /demo.sh</p>\n<p>`#!/bin/bash</p>\n<p>echo “参数是: $* “</p>\n<p>echo “参数也是: $@ “</p>\n<p>echo “参数个数是: $#”`</p>\n<p>执行;./demo.sh 11 22 33</p>\n<p>结果:参数是: 11 22 33 参数也是: 11 22 33 参数个数是: 3</p>\n<p>$* 和 $@ 区别</p>\n<p>vim ./demo.sh</p>\n<p>#!/bin/bash</p>\n<p>`for i in “$*”</p>\n<p>#$* 把所有的参数看成一个整体,所以执行循环1次</p>\n<p> do</p>\n<p>   echo “参数是: $i”</p>\n<p> done</p>\n<p>for y in “$@”</p>\n<p>#$@ 是把每个参数区分对待,所有有几个参数就循环几次</p>\n<p> do</p>\n<p>   echo “参数是: $y”</p>\n<p> done<br>`</p>\n</li>\n<li><p>预定义变量</p>\n<p>$? : 最后依次执行的命令的返回结果,如果返回是0,代表上一个命令执行成功,如果返回是非0,代表上一个命令执行失败</p>\n<p>$$ : 返回当前进程的PID号</p>\n<p>$! : 后台运行的最后一个进程的进程号(PID)</p>\n</li>\n<li><p>接收键盘输入:read 命令</p>\n<p>read [选项] [变量名]</p>\n<p>选项</p>\n<p> -p “提示信息”:在等待read输入时,输出提示信息</p>\n<p> -t 秒数: read命令会一直等待用户输入,输入次选项可以指定用户等待时间</p>\n<p> -n 字符数: read命令只接受指定的字符数,就会执行</p>\n<p> -s : 隐藏输入的数据,适用于输入密码等情况</p>\n</li>\n</ol>\n<h4 id=\"4-Shell编程之运算符\"><a href=\"#4-Shell编程之运算符\" class=\"headerlink\" title=\"4.Shell编程之运算符\"></a>4.Shell编程之运算符</h4><pre><code>1. declare命令\n\n  declare声明变量类型\n\n  declare [+/-] [选项] 变量名\n\n    选项:用-给变量设定类型属性,用+取消变量的类型属性\n\n  常见选项类型\n\n    -a 将变量声明为数组类型\n\n    -i 将变量声明为整形\n\n    -x 将变量声明为环境变量\n\n    -r 将变量声明为只读变量(设置为只读属性后,不能对变量进行删除,修改,取消属性的操作)\n\n    -p 查看显示指定变量的被声明的类型\n\n2. 数值运算的方法\n\n  方法1:\n\n  [root@localhost~]# aa=11\n\n  [root@localhost~]# bb=22\n\n  [root@localhost~]# declare -i cc=$aa+$bb\n\n  方法2:\n\n    expr或者let数值运算工具\n\n    [root@localhost~]# aa=11\n\n    [root@localhost~]# bb=22\n\n    [root@localhost~]# dd=$(expr $aa + $bb)\n\n    #dd的值是aa和bb的和,注意:&quot;+&quot;号两侧必须有空格\n\n  方法3:\n\n    &quot;$(())&quot;或&quot;$[运算式]&quot;\n\n    [root@localhost~]# aa=11\n\n    [root@localhost~]# bb=22\n\n    [root@localhost~]# cc=$(($aa + $bb))\n\n    [root@localhost~]# gg=$[$aa + $bb]\n\n3. 变量测试(只是针对Shell,其他常用不适用.一般不常用,对脚本进行优化的时候才使用)\n</code></pre><h4 id=\"5-Shell编程之环境变量配置文件\"><a href=\"#5-Shell编程之环境变量配置文件\" class=\"headerlink\" title=\"5.Shell编程之环境变量配置文件\"></a>5.Shell编程之环境变量配置文件</h4><pre><code>`/etc/profile\n\n/etc/profile.d/*.sh\n\n/etc/bashrc\n\n~/.bashrc\n\n~/.bash_profile`\n\n/etc目录下的是系统环境变量文件,~目录下的是当前用户的环境变量配置文件\n</code></pre><h4 id=\"6-Shell编程之正则表达式\"><a href=\"#6-Shell编程之正则表达式\" class=\"headerlink\" title=\"6.Shell编程之正则表达式\"></a>6.Shell编程之正则表达式</h4><pre><code>正则表达式主要是用于描述字符排列和匹配模式d额一种语法规则，\n主要用于字符串的模式分割,匹配,查找及替换操作\n</code></pre><p>  1.正则表达式与通配符</p>\n<pre><code>通配符：\n  *：匹配任意内容\n  ?：匹配任意一个内容\n  []：匹配括号中的一个字符.\n</code></pre><p>  正则表达式用来在文件中匹配符合条件的字符串,正则是包含匹配.<br>  grep,awk,sed等命令可以支持正则表达式.</p>\n<p>  通配符用来匹配符合条件的文件名,通配符是完全匹配.<br>  ls,find,cp这些命令不支持正则表达式,所以只能使用shell的通配符匹配.</p>\n<h4 id=\"基础正则表达式\"><a href=\"#基础正则表达式\" class=\"headerlink\" title=\"基础正则表达式:\"></a>基础正则表达式:</h4><table>\n<thead>\n<tr>\n<th>元字符</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td style=\"text-align:center\">前一个字符匹配0次或者任意多次</td>\n</tr>\n<tr>\n<td>.</td>\n<td style=\"text-align:center\">匹配除了换行符以外的任意一个字符</td>\n</tr>\n<tr>\n<td>^</td>\n<td style=\"text-align:center\">匹配行首.例如:^hello匹配以hello开头的行</td>\n</tr>\n<tr>\n<td>$</td>\n<td style=\"text-align:center\">匹配行尾.例如:hello$匹配以hello结尾的行</td>\n</tr>\n<tr>\n<td>[]</td>\n<td style=\"text-align:center\">匹配中括号中指定的任意一个字符,只匹配一个字符</td>\n</tr>\n<tr>\n<td>[^]</td>\n<td style=\"text-align:center\">匹配除中括号中的字符以外的任意一个字符,例:[^0-9]表示匹配任意一位非数字字符</td>\n</tr>\n<tr>\n<td>\\</td>\n<td style=\"text-align:center\">转义符,用于将特殊符号的含义取消</td>\n</tr>\n<tr>\n<td>\\{n\\}</td>\n<td style=\"text-align:center\">表示其前面的字符恰好出现n次.例:[0-9]\\{4\\}匹配4位数字</td>\n</tr>\n<tr>\n<td>\\{n,\\}</td>\n<td style=\"text-align:center\">表示其前面出现的字符不小于n次,例:[0-9]\\{2,\\}表示2位及以上的数字</td>\n</tr>\n<tr>\n<td>\\{n,m\\}</td>\n<td style=\"text-align:center\">表示其前面出现的字符至少出现n次,最多出现m次,例:[a-z]\\{2,4\\}匹配2到4位的小写字母</td>\n</tr>\n</tbody>\n</table>\n"},{"layout":"linux离线安装oracle JDK","title":"linux离线安装oracle JDK","date":"2018-05-13T03:02:48.000Z","_content":"\n    摘要:\n      本文是在deepin linux(基于debian发行版)系统环境下,debian,ubuntu以及其他debian衍生版同理适用\n\n如果电脑处于联网状态,那么可以使用apt包管理器在线安装,可使用以下命令在线安装:\n\n`sudo apt update #更新`\n\n`sudo apt install oracle-java8 #安装`\n\n 下面重点介绍离线安装官网下载安装包的方式:\n\n 1.oracle官网下载Linux对应的tar.gz安装包\n\n 2.进入到存放安装包的目录下,执行以下命令将安装包的内容解压到在指定目录(/usr/local/java/文件夹自己事先建好)\n\n `sudo tar zxvf ./xxxx.tar.gz  -C /usr/local/java`\n\n3.查看第二步是否成功,如果有/usr/local/java/下有jdk对应的目录结构,则表示成功\n\n`ls -anl /usr/local/java/`\n\n4.配置环境变量(此处配置到当前用户的环境变量上)\n\n`sudo  vim ~/.bashrc #用vim打开当前用户的环境变量配置文件`\n\n在.bashrc文件底部加入以下内容,然后保存退出\n\n    export JAVA_HOME=/usr/local/java/java-8u5_xxx\n\n    export JRE_HOME=${JAVA_HOME}/jre   \n\n    export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib   \n\n    export PATH=${JAVA_HOME}/bin:$PATH\n\n    unset _JAVA_OPTIONS\n\n\n\n5.执行以下命令使刚刚的配置生效\n\n`source ~/.bashrc`\n\n6.验证安装结果,执行下列命令,如果一切无误,会正常出现对应的java版本信息\n\n`java -version`\n","source":"_posts/JDK.md","raw":"---\nlayout: linux离线安装oracle JDK\ntitle: linux离线安装oracle JDK\ndate: 2018-05-13 11:02:48\ntags:\n  - linux\n  - java\n  - jdk\n---\n\n    摘要:\n      本文是在deepin linux(基于debian发行版)系统环境下,debian,ubuntu以及其他debian衍生版同理适用\n\n如果电脑处于联网状态,那么可以使用apt包管理器在线安装,可使用以下命令在线安装:\n\n`sudo apt update #更新`\n\n`sudo apt install oracle-java8 #安装`\n\n 下面重点介绍离线安装官网下载安装包的方式:\n\n 1.oracle官网下载Linux对应的tar.gz安装包\n\n 2.进入到存放安装包的目录下,执行以下命令将安装包的内容解压到在指定目录(/usr/local/java/文件夹自己事先建好)\n\n `sudo tar zxvf ./xxxx.tar.gz  -C /usr/local/java`\n\n3.查看第二步是否成功,如果有/usr/local/java/下有jdk对应的目录结构,则表示成功\n\n`ls -anl /usr/local/java/`\n\n4.配置环境变量(此处配置到当前用户的环境变量上)\n\n`sudo  vim ~/.bashrc #用vim打开当前用户的环境变量配置文件`\n\n在.bashrc文件底部加入以下内容,然后保存退出\n\n    export JAVA_HOME=/usr/local/java/java-8u5_xxx\n\n    export JRE_HOME=${JAVA_HOME}/jre   \n\n    export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib   \n\n    export PATH=${JAVA_HOME}/bin:$PATH\n\n    unset _JAVA_OPTIONS\n\n\n\n5.执行以下命令使刚刚的配置生效\n\n`source ~/.bashrc`\n\n6.验证安装结果,执行下列命令,如果一切无误,会正常出现对应的java版本信息\n\n`java -version`\n","slug":"JDK","published":1,"updated":"2019-09-02T07:37:22.921Z","comments":1,"photos":[],"link":"","_id":"ck024pnvd000cy6fgl32k52rd","content":"<pre><code>摘要:\n  本文是在deepin linux(基于debian发行版)系统环境下,debian,ubuntu以及其他debian衍生版同理适用\n</code></pre><p>如果电脑处于联网状态,那么可以使用apt包管理器在线安装,可使用以下命令在线安装:</p>\n<p><code>sudo apt update #更新</code></p>\n<p><code>sudo apt install oracle-java8 #安装</code></p>\n<p> 下面重点介绍离线安装官网下载安装包的方式:</p>\n<p> 1.oracle官网下载Linux对应的tar.gz安装包</p>\n<p> 2.进入到存放安装包的目录下,执行以下命令将安装包的内容解压到在指定目录(/usr/local/java/文件夹自己事先建好)</p>\n<p> <code>sudo tar zxvf ./xxxx.tar.gz  -C /usr/local/java</code></p>\n<p>3.查看第二步是否成功,如果有/usr/local/java/下有jdk对应的目录结构,则表示成功</p>\n<p><code>ls -anl /usr/local/java/</code></p>\n<p>4.配置环境变量(此处配置到当前用户的环境变量上)</p>\n<p><code>sudo  vim ~/.bashrc #用vim打开当前用户的环境变量配置文件</code></p>\n<p>在.bashrc文件底部加入以下内容,然后保存退出</p>\n<pre><code>export JAVA_HOME=/usr/local/java/java-8u5_xxx\n\nexport JRE_HOME=${JAVA_HOME}/jre   \n\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib   \n\nexport PATH=${JAVA_HOME}/bin:$PATH\n\nunset _JAVA_OPTIONS\n</code></pre><p>5.执行以下命令使刚刚的配置生效</p>\n<p><code>source ~/.bashrc</code></p>\n<p>6.验证安装结果,执行下列命令,如果一切无误,会正常出现对应的java版本信息</p>\n<p><code>java -version</code></p>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>摘要:\n  本文是在deepin linux(基于debian发行版)系统环境下,debian,ubuntu以及其他debian衍生版同理适用\n</code></pre><p>如果电脑处于联网状态,那么可以使用apt包管理器在线安装,可使用以下命令在线安装:</p>\n<p><code>sudo apt update #更新</code></p>\n<p><code>sudo apt install oracle-java8 #安装</code></p>\n<p> 下面重点介绍离线安装官网下载安装包的方式:</p>\n<p> 1.oracle官网下载Linux对应的tar.gz安装包</p>\n<p> 2.进入到存放安装包的目录下,执行以下命令将安装包的内容解压到在指定目录(/usr/local/java/文件夹自己事先建好)</p>\n<p> <code>sudo tar zxvf ./xxxx.tar.gz  -C /usr/local/java</code></p>\n<p>3.查看第二步是否成功,如果有/usr/local/java/下有jdk对应的目录结构,则表示成功</p>\n<p><code>ls -anl /usr/local/java/</code></p>\n<p>4.配置环境变量(此处配置到当前用户的环境变量上)</p>\n<p><code>sudo  vim ~/.bashrc #用vim打开当前用户的环境变量配置文件</code></p>\n<p>在.bashrc文件底部加入以下内容,然后保存退出</p>\n<pre><code>export JAVA_HOME=/usr/local/java/java-8u5_xxx\n\nexport JRE_HOME=${JAVA_HOME}/jre   \n\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib   \n\nexport PATH=${JAVA_HOME}/bin:$PATH\n\nunset _JAVA_OPTIONS\n</code></pre><p>5.执行以下命令使刚刚的配置生效</p>\n<p><code>source ~/.bashrc</code></p>\n<p>6.验证安装结果,执行下列命令,如果一切无误,会正常出现对应的java版本信息</p>\n<p><code>java -version</code></p>\n"},{"title":"Linux下安装maven","date":"2018-05-13T03:18:57.000Z","_content":"\n    摘要:\n      Linux系统下离线安装maven\n\n1.在Apache官方网站下载对应系统的maven包然后解压maven\n\n2.配置环境变量.(配置到当前用户的环境变量上)\n\n`sudo  vim ~/.bashrc #用vim打开当前用户的环境变量配置文件`\n\n在.bashrc文件底部加入以下内容,然后保存退出.(M2_HOME代表解压后的maven目录)\n\n    export M2_HOME=/home/user/apache-maven-3.3.9\n\n    export PATH=${M2_HOME}/bin:$PATH\n\n3.执行以下命令使刚刚的配置生效\n\n    `source ~/.bashrc`\n\n4.验证安装结果,执行下列命令,如果一切无误,会正常出现对应的maven版本信息\n\n    `mvn -v`\n","source":"_posts/Linux下安装maven.md","raw":"---\ntitle: Linux下安装maven\ndate: 2018-05-13 11:18:57\ntags:\n  - java\n  - linux\n  - maven\n---\n\n    摘要:\n      Linux系统下离线安装maven\n\n1.在Apache官方网站下载对应系统的maven包然后解压maven\n\n2.配置环境变量.(配置到当前用户的环境变量上)\n\n`sudo  vim ~/.bashrc #用vim打开当前用户的环境变量配置文件`\n\n在.bashrc文件底部加入以下内容,然后保存退出.(M2_HOME代表解压后的maven目录)\n\n    export M2_HOME=/home/user/apache-maven-3.3.9\n\n    export PATH=${M2_HOME}/bin:$PATH\n\n3.执行以下命令使刚刚的配置生效\n\n    `source ~/.bashrc`\n\n4.验证安装结果,执行下列命令,如果一切无误,会正常出现对应的maven版本信息\n\n    `mvn -v`\n","slug":"Linux下安装maven","published":1,"updated":"2019-09-02T07:37:22.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck024pnvg000fy6fgyj6qy0ts","content":"<pre><code>摘要:\n  Linux系统下离线安装maven\n</code></pre><p>1.在Apache官方网站下载对应系统的maven包然后解压maven</p>\n<p>2.配置环境变量.(配置到当前用户的环境变量上)</p>\n<p><code>sudo  vim ~/.bashrc #用vim打开当前用户的环境变量配置文件</code></p>\n<p>在.bashrc文件底部加入以下内容,然后保存退出.(M2_HOME代表解压后的maven目录)</p>\n<pre><code>export M2_HOME=/home/user/apache-maven-3.3.9\n\nexport PATH=${M2_HOME}/bin:$PATH\n</code></pre><p>3.执行以下命令使刚刚的配置生效</p>\n<pre><code>`source ~/.bashrc`\n</code></pre><p>4.验证安装结果,执行下列命令,如果一切无误,会正常出现对应的maven版本信息</p>\n<pre><code>`mvn -v`\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>摘要:\n  Linux系统下离线安装maven\n</code></pre><p>1.在Apache官方网站下载对应系统的maven包然后解压maven</p>\n<p>2.配置环境变量.(配置到当前用户的环境变量上)</p>\n<p><code>sudo  vim ~/.bashrc #用vim打开当前用户的环境变量配置文件</code></p>\n<p>在.bashrc文件底部加入以下内容,然后保存退出.(M2_HOME代表解压后的maven目录)</p>\n<pre><code>export M2_HOME=/home/user/apache-maven-3.3.9\n\nexport PATH=${M2_HOME}/bin:$PATH\n</code></pre><p>3.执行以下命令使刚刚的配置生效</p>\n<pre><code>`source ~/.bashrc`\n</code></pre><p>4.验证安装结果,执行下列命令,如果一切无误,会正常出现对应的maven版本信息</p>\n<pre><code>`mvn -v`\n</code></pre>"},{"title":"atom配置vue前端开发环境","date":"2018-06-25T01:48:27.000Z","_content":"\n    摘要:\n      使用atom配置前端vue开发环境\n\n1.安装好atom后,安装常用的几个插件\n\n    prettier-atom : 格式化代码插件\n\n    atom-axios : vue-axios提示插件\n\n    autoclose-html : 自定补全闭合html标签插件\n\n    file-icons : 文件图标,便利区分不同类型的文件\n\n    autocomplete-paths : 自动提示补全文件路径插件\n\n    language-vue : atom支持vue的插件\n\n    language-vue-component : 高亮显示vue组件插件\n\n    vue2-autocomplete : vue2.0+提示插件\n\n    linter-eslint : eslint规则校验插件\n\n    px2rem-plus : px转rem插件\n\n    minimap : 在编辑器右边出现预览源代码(类似sublime text3右侧预览导航效果)的插件\n\n    下面是支持markdown的插件:\n\n    markdown-toc : 对markdown文档生成目录的插件\n\n    markdown-table-editor : markdown文档表格编辑插件\n\n2.安装好对应的插件后,大部分情况能够使用,但是vue项目需要支持eslint校验的话,需要对linter-eslint设置下面的 Lint-HTML-Files进行勾选\n\n![](/images/eslint.png)\n\n3.默认的prettier格式化的规则是不符合eslint的,比如会对每行尾部增加分号,单引号变变为双引号,需要修改其配置为下:\n\n![](/images/prettier.png)\n","source":"_posts/atom配置vue前端开发环境.md","raw":"---\ntitle: atom配置vue前端开发环境\ndate: 2018-06-25 09:48:27\ntags:\n  - atom\n---\n\n    摘要:\n      使用atom配置前端vue开发环境\n\n1.安装好atom后,安装常用的几个插件\n\n    prettier-atom : 格式化代码插件\n\n    atom-axios : vue-axios提示插件\n\n    autoclose-html : 自定补全闭合html标签插件\n\n    file-icons : 文件图标,便利区分不同类型的文件\n\n    autocomplete-paths : 自动提示补全文件路径插件\n\n    language-vue : atom支持vue的插件\n\n    language-vue-component : 高亮显示vue组件插件\n\n    vue2-autocomplete : vue2.0+提示插件\n\n    linter-eslint : eslint规则校验插件\n\n    px2rem-plus : px转rem插件\n\n    minimap : 在编辑器右边出现预览源代码(类似sublime text3右侧预览导航效果)的插件\n\n    下面是支持markdown的插件:\n\n    markdown-toc : 对markdown文档生成目录的插件\n\n    markdown-table-editor : markdown文档表格编辑插件\n\n2.安装好对应的插件后,大部分情况能够使用,但是vue项目需要支持eslint校验的话,需要对linter-eslint设置下面的 Lint-HTML-Files进行勾选\n\n![](/images/eslint.png)\n\n3.默认的prettier格式化的规则是不符合eslint的,比如会对每行尾部增加分号,单引号变变为双引号,需要修改其配置为下:\n\n![](/images/prettier.png)\n","slug":"atom配置vue前端开发环境","published":1,"updated":"2019-09-02T07:37:22.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck024pnvi000hy6fgo5wl9cz3","content":"<pre><code>摘要:\n  使用atom配置前端vue开发环境\n</code></pre><p>1.安装好atom后,安装常用的几个插件</p>\n<pre><code>prettier-atom : 格式化代码插件\n\natom-axios : vue-axios提示插件\n\nautoclose-html : 自定补全闭合html标签插件\n\nfile-icons : 文件图标,便利区分不同类型的文件\n\nautocomplete-paths : 自动提示补全文件路径插件\n\nlanguage-vue : atom支持vue的插件\n\nlanguage-vue-component : 高亮显示vue组件插件\n\nvue2-autocomplete : vue2.0+提示插件\n\nlinter-eslint : eslint规则校验插件\n\npx2rem-plus : px转rem插件\n\nminimap : 在编辑器右边出现预览源代码(类似sublime text3右侧预览导航效果)的插件\n\n下面是支持markdown的插件:\n\nmarkdown-toc : 对markdown文档生成目录的插件\n\nmarkdown-table-editor : markdown文档表格编辑插件\n</code></pre><p>2.安装好对应的插件后,大部分情况能够使用,但是vue项目需要支持eslint校验的话,需要对linter-eslint设置下面的 Lint-HTML-Files进行勾选</p>\n<p><img src=\"/images/eslint.png\" alt></p>\n<p>3.默认的prettier格式化的规则是不符合eslint的,比如会对每行尾部增加分号,单引号变变为双引号,需要修改其配置为下:</p>\n<p><img src=\"/images/prettier.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>摘要:\n  使用atom配置前端vue开发环境\n</code></pre><p>1.安装好atom后,安装常用的几个插件</p>\n<pre><code>prettier-atom : 格式化代码插件\n\natom-axios : vue-axios提示插件\n\nautoclose-html : 自定补全闭合html标签插件\n\nfile-icons : 文件图标,便利区分不同类型的文件\n\nautocomplete-paths : 自动提示补全文件路径插件\n\nlanguage-vue : atom支持vue的插件\n\nlanguage-vue-component : 高亮显示vue组件插件\n\nvue2-autocomplete : vue2.0+提示插件\n\nlinter-eslint : eslint规则校验插件\n\npx2rem-plus : px转rem插件\n\nminimap : 在编辑器右边出现预览源代码(类似sublime text3右侧预览导航效果)的插件\n\n下面是支持markdown的插件:\n\nmarkdown-toc : 对markdown文档生成目录的插件\n\nmarkdown-table-editor : markdown文档表格编辑插件\n</code></pre><p>2.安装好对应的插件后,大部分情况能够使用,但是vue项目需要支持eslint校验的话,需要对linter-eslint设置下面的 Lint-HTML-Files进行勾选</p>\n<p><img src=\"/images/eslint.png\" alt></p>\n<p>3.默认的prettier格式化的规则是不符合eslint的,比如会对每行尾部增加分号,单引号变变为双引号,需要修改其配置为下:</p>\n<p><img src=\"/images/prettier.png\" alt></p>\n"},{"title":"axis2调用webservice","date":"2018-12-11T01:36:33.000Z","_content":"<!-- TOC -->\n\n- [WebService:一种跨编程语言和跨操作系统平台的远程调用技术.](#webservice一种跨编程语言和跨操作系统平台的远程调用技术)\n- [WebService的实现包有很多,Java语言有jdk1.6后内置的jws.*,Apache cxf,Apache Axis,Apache Axis2.](#webservice的实现包有很多java语言有jdk16后内置的jwsapache-cxfapache-axisapache-axis2)\n  - [1.远程调用](#1远程调用)\n    - [1.1 axis2+wsdl地址方式调用:](#11-axis2wsdl地址方式调用)\n    - [1.2 axis2+endpoint地址方式调用:](#12-axis2endpoint地址方式调用)\n  - [2.wsdl2java方式调用](#2wsdl2java方式调用)\n\n<!-- /TOC -->\n### WebService:一种跨编程语言和跨操作系统平台的远程调用技术.\n\n    WebService都是基于http请求(POST请求,无GET请求)\n    XML+XSD,SOAP和WSDL就是构成WebService平台的三大技术。\n    XML+XSD：\n\n    WebService采用HTTP协议传输数据，采用XML格式封装数据（即XML中说明调用远程服务对象的哪个方法，传递的参数是什么，\n    以及服务对象的返回结果是什么）。XML是WebService平台中表示数据的格式。\n\n    SOAP(Simple Object Access Protocol)：简单对象访问协议\n    \n    SOAP提供了标准的RPC方法来调用Web Service。SOAP协议 = HTTP协议 + XML数据格式SOAP协议定义了SOAP消息的格式，\n    SOAP协议是基于HTTP协议的，SOAP也是基于XML和XSD的，XML是SOAP的数据编码方式。\n    soap协议分1.1和1.2版本:\n    soap1.1:\n      请求方式:post\n      content-type:text/xml;charset=utf-8\n    soap1.2:\n      请求方式:post\n      content-type:application/soap+xml\n\n    WSDL(Web Services Description Language):基于XML的语言，用于描述Web Service及其函数、参数和返回值。\n    \n    它是WebService客户端和服务器端都能理解的标准格式。WSDL文件保存在Web服务器上，通过一个url地址就可以访问到它。\n    客户端要调用一个WebService服务之前，要知道该服务的WSDL文件的地址。\n\n    注:wsdl文件阅读技巧:(从下往上读)\n      找到wsdl:service节点->查看下面的wsdl:port节点->查看其binding属性->找到与bingding名称相同的wsdl:binding节点\n      ->查看节点下的wsdl:operation节点(对应的调用method名称)->wsdl:input方法输入参数节点->对应message属性值\n      ->找到同名的wsdl:message节点->wsdl:part对应的参数名称和类型.\n\n      wsdl:output节点代表服务返回的数据.阅读方式和wsdl:input一致\n\nWebService优点:跨平台跨语言.服务方和调用方不用关心各自的平台和语言\n\nWebService缺点:在使用方式上，RPC和soap的使用在减少，Restful架构占到了主导地位。在数据格式上，XML格式繁琐,使用在减少，json等轻量级格式的使用在增多..另外性能上略低(也有专门对xml解析优化的cpu)\n\n### WebService的实现包有很多,Java语言有jdk1.6后内置的jws.*,Apache cxf,Apache Axis,Apache Axis2.\n\n本文采用axis2包,发布webservice服务可以采用jdk的@WebService注解实现或者cxf/axis/axis2来进行实现,网上教程很多,本文不涉及到这块.主要是发现在调用的时候会有一些坑,所以在此记录\n\nWebService客户端调用主要有2类方式,一种是通过http远程调用,一种是通过wsdl2java产生Java代码调用\n\n#### 1.远程调用\n\n  引入axisjar包:\n  ```xml\n      <!-- Axis2 -->\n        <dependency>\n            <groupId>org.apache.axis2</groupId>\n            <artifactId>axis2</artifactId>\n            <version>1.6.2</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.ws.commons.axiom</groupId>\n            <artifactId>axiom</artifactId>\n            <version>1.2.20</version>\n            <type>pom</type>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.ws.commons.axiom</groupId>\n            <artifactId>axiom-api</artifactId>\n            <version>1.2.20</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.ws.commons.axiom</groupId>\n            <artifactId>axiom-impl</artifactId>\n            <version>1.2.20</version>\n        </dependency>\n        <dependency>\n            <groupId>wsdl4j</groupId>\n            <artifactId>wsdl4j</artifactId>\n            <version>1.6.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.ws.xmlschema</groupId>\n            <artifactId>xmlschema-core</artifactId>\n            <version>2.2.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.neethi</groupId>\n            <artifactId>neethi</artifactId>\n            <!--<version>2.0.4</version> -->\n            <version>3.1.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.axis2</groupId>\n            <artifactId>axis2-transport-local</artifactId>\n            <version>1.7.7</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.axis2</groupId>\n            <artifactId>axis2-transport-http</artifactId>\n            <version>1.7.7</version>\n        </dependency>\n        <dependency>\n            <groupId>javax.mail</groupId>\n            <artifactId>javax.mail-api</artifactId>\n            <version>1.6.2</version>\n        </dependency>\n      <!-- Axis2 End -->\n  ```\n\n##### 1.1 axis2+wsdl地址方式调用:\n\n```java\n  String soapBindingAddress = \"http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx?wsdl\";\n        EndpointReference endpointReference = new EndpointReference(soapBindingAddress);\n        //创建一个OMFactory\n        OMFactory factory = OMAbstractFactory.getOMFactory();\n        //指定命名空间\n        OMNamespace namespace = factory.createOMNamespace(\"http://WebXml.com.cn/\", \"web\");\n        //创建method对象，方法名 为getMobileCodeInfo\n        OMElement method = factory.createOMElement(\"getMobileCodeInfo\", namespace);\n        OMElement mobileCode = factory.createOMElement(\"mobileCode\", namespace);//方法参数\n        OMElement userID = factory.createOMElement(\"userID\", namespace);//方法参数\n        //封装参数\n        mobileCode.addChild(factory.createOMText(mobileCode, \"18265963256\"));//设定参数的值\n        method.addChild(mobileCode);\n        userID.addChild(factory.createOMText(userID, \"\"));//设定参数的值\n        method.addChild(userID);\n        //请求参数设置\n        ServiceClient sender = new ServiceClient();\n        Options options = new Options();\n        // 设置soap1.2协议\n        options.setSoapVersionURI(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);\n        options.setAction(\"http://WebXml.com.cn/getMobileCodeInfo\");\n        options.setTo(endpointReference);\n        sender.setOptions(options);\n        OMElement result = sender.sendReceive(method);\n        System.out.println(result.getFirstElement().getText());\n```\n\n##### 1.2 axis2+endpoint地址方式调用:\n\n```java\n  ServiceClient client = new ServiceClient();\n        // 创建服务地址WebService的URL,注意不是WSDL的URL\n        String url = \"http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx\";\n        EndpointReference targetEPR = new EndpointReference(url);\n        Options options = client.getOptions();\n        // 设置soap1.2协议\n        options.setSoapVersionURI(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);\n        options.setTo(targetEPR);\n        // 确定调用方法（wsdl 命名空间地址 (wsdl文档中的targetNamespace) 和 方法名称 的组合）\n        options.setAction(\"http://WebXml.com.cn/getMobileCodeInfo\");\n        OMFactory fac = OMAbstractFactory.getOMFactory();\n        /*\n         * 指定命名空间，参数： uri--即为wsdl文档的targetNamespace，命名空间 perfix--可不填\n         */\n        OMNamespace omNs = fac.createOMNamespace(\"http://WebXml.com.cn/\", \"\");\n        /*\n         * 身份验证\n         * OMElement header = fac.createOMElement(\"AuthenticationToken\", omNs);\n         * OMElement ome_user = fac.createOMElement(\"Username\", omNs); OMElement\n         * ome_pass = fac.createOMElement(\"Password\", omNs);\n         *\n         * ome_user.setText(\"user\"); ome_pass.setText(\"pass\");\n         *\n         * header.addChild(ome_user); header.addChild(ome_pass);\n         *\n         * client.addHeader(header);\n         */\n        // 指定方法\n        OMElement method = fac.createOMElement(\"getMobileCodeInfo\", omNs);\n        // 指定方法的参数\n        OMElement mobileCode = fac.createOMElement(\"mobileCode\", omNs);\n        mobileCode.setText(\"18265963256\");\n        OMElement userID = fac.createOMElement(\"userID\", omNs);\n        userID.setText(\"\");\n        method.addChild(mobileCode);\n        method.addChild(userID);\n        method.build();\n        // 远程调用web服务\n        OMElement result = client.sendReceive(method);\n        System.out.println(result);\n```\n\n    注:返回的xml数据可能含有需要转义的字符,比如&lt;之类的.\n    可以用org.apache.commons.lang3.StringEscapeUtils.unescapeXml方法处理,(已过时),\n    可以用commons-text包下的StringEscapeUtils类进行反转义处理\n\n#### 2.wsdl2java方式调用\n\n  使用jdk命令行下的wsimport命令和wsdl文件生成生成客户端中间代码,\n  \n  注意:只能编译soap1.1的协议，不能编译soap1.2的协议的代码\n\n    wsimport [options] <WSDL_URI>\n    比较常用的[options]有：\n    1. -d <directory>\n      在指定的目录生成class文件\n    2. -clientjar <jarfile>\n      在当前目录生成jar文件，结合-d <directory>可以在指定的目录生成jar文件\n    3. -s <directory>\n      在指定的目录生成java源文件\n    4. -p <pkg>\n      指定生成文件的包结构\n    5. -keep\n      在生成class文件，或者jar包时，同时保留java源文件\n\n例:在当前目录新建class文件夹和java文件夹,分别存放对应的class文件个java文件\n\n    wsimport -keep -d ./class -s ./java -p com.test.demo -verbose http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx?wsdl  \n\n```java\n  //创建一个MobileCodeWS工厂  \n  MobileCodeWS factory = new MobileCodeWS();  \n  //根据工厂创建一个MobileCodeWSSoap对象  \n  MobileCodeWSSoap mobileCodeWSSoap = factory.getMobileCodeWSSoap();  \n  //调用WebService提供的getMobileCodeInfo方法查询手机号码的归属地  \n  String searchResult = mobileCodeWSSoap.getMobileCodeInfo(\"18265963256\", null);  \n  System.out.println(searchResult);  \n```\n\n笔后摘要:\n\nwebservice既然是基于http的,那么也可使用最原始的URLconnect来进行访问请求处理,但是要注意对应的soap协议版本请求头,还需要组装符合soap协议xml文档信息等.完整的请求头应该和下例类似:\n\n```xml\n  请求头:\n  POST /WebServices/MobileCodeWS.asmx HTTP/1.1\n  Host: webservice.webxml.com.cn\n  Content-Type: text/xml; charset=utf-8\n  Content-Length: length\n  SOAPAction: \"http://WebXml.com.cn/getMobileCodeInfo\"\n\n消息体:\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n<soap:Body>\n<getMobileCodeInfo xmlns=\"http://WebXml.com.cn/\">\n<mobileCode>18265963256</mobileCode>\n<userID>string</userID>\n</getMobileCodeInfo>\n</soap:Body>\n</soap:Envelope>\n```","source":"_posts/axis2调用webservice.md","raw":"---\ntitle: axis2调用webservice\ndate: 2018-12-11 09:36:33\ntags:\n  - axis2\n  - WebService\n  - java\n---\n<!-- TOC -->\n\n- [WebService:一种跨编程语言和跨操作系统平台的远程调用技术.](#webservice一种跨编程语言和跨操作系统平台的远程调用技术)\n- [WebService的实现包有很多,Java语言有jdk1.6后内置的jws.*,Apache cxf,Apache Axis,Apache Axis2.](#webservice的实现包有很多java语言有jdk16后内置的jwsapache-cxfapache-axisapache-axis2)\n  - [1.远程调用](#1远程调用)\n    - [1.1 axis2+wsdl地址方式调用:](#11-axis2wsdl地址方式调用)\n    - [1.2 axis2+endpoint地址方式调用:](#12-axis2endpoint地址方式调用)\n  - [2.wsdl2java方式调用](#2wsdl2java方式调用)\n\n<!-- /TOC -->\n### WebService:一种跨编程语言和跨操作系统平台的远程调用技术.\n\n    WebService都是基于http请求(POST请求,无GET请求)\n    XML+XSD,SOAP和WSDL就是构成WebService平台的三大技术。\n    XML+XSD：\n\n    WebService采用HTTP协议传输数据，采用XML格式封装数据（即XML中说明调用远程服务对象的哪个方法，传递的参数是什么，\n    以及服务对象的返回结果是什么）。XML是WebService平台中表示数据的格式。\n\n    SOAP(Simple Object Access Protocol)：简单对象访问协议\n    \n    SOAP提供了标准的RPC方法来调用Web Service。SOAP协议 = HTTP协议 + XML数据格式SOAP协议定义了SOAP消息的格式，\n    SOAP协议是基于HTTP协议的，SOAP也是基于XML和XSD的，XML是SOAP的数据编码方式。\n    soap协议分1.1和1.2版本:\n    soap1.1:\n      请求方式:post\n      content-type:text/xml;charset=utf-8\n    soap1.2:\n      请求方式:post\n      content-type:application/soap+xml\n\n    WSDL(Web Services Description Language):基于XML的语言，用于描述Web Service及其函数、参数和返回值。\n    \n    它是WebService客户端和服务器端都能理解的标准格式。WSDL文件保存在Web服务器上，通过一个url地址就可以访问到它。\n    客户端要调用一个WebService服务之前，要知道该服务的WSDL文件的地址。\n\n    注:wsdl文件阅读技巧:(从下往上读)\n      找到wsdl:service节点->查看下面的wsdl:port节点->查看其binding属性->找到与bingding名称相同的wsdl:binding节点\n      ->查看节点下的wsdl:operation节点(对应的调用method名称)->wsdl:input方法输入参数节点->对应message属性值\n      ->找到同名的wsdl:message节点->wsdl:part对应的参数名称和类型.\n\n      wsdl:output节点代表服务返回的数据.阅读方式和wsdl:input一致\n\nWebService优点:跨平台跨语言.服务方和调用方不用关心各自的平台和语言\n\nWebService缺点:在使用方式上，RPC和soap的使用在减少，Restful架构占到了主导地位。在数据格式上，XML格式繁琐,使用在减少，json等轻量级格式的使用在增多..另外性能上略低(也有专门对xml解析优化的cpu)\n\n### WebService的实现包有很多,Java语言有jdk1.6后内置的jws.*,Apache cxf,Apache Axis,Apache Axis2.\n\n本文采用axis2包,发布webservice服务可以采用jdk的@WebService注解实现或者cxf/axis/axis2来进行实现,网上教程很多,本文不涉及到这块.主要是发现在调用的时候会有一些坑,所以在此记录\n\nWebService客户端调用主要有2类方式,一种是通过http远程调用,一种是通过wsdl2java产生Java代码调用\n\n#### 1.远程调用\n\n  引入axisjar包:\n  ```xml\n      <!-- Axis2 -->\n        <dependency>\n            <groupId>org.apache.axis2</groupId>\n            <artifactId>axis2</artifactId>\n            <version>1.6.2</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.ws.commons.axiom</groupId>\n            <artifactId>axiom</artifactId>\n            <version>1.2.20</version>\n            <type>pom</type>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.ws.commons.axiom</groupId>\n            <artifactId>axiom-api</artifactId>\n            <version>1.2.20</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.ws.commons.axiom</groupId>\n            <artifactId>axiom-impl</artifactId>\n            <version>1.2.20</version>\n        </dependency>\n        <dependency>\n            <groupId>wsdl4j</groupId>\n            <artifactId>wsdl4j</artifactId>\n            <version>1.6.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.ws.xmlschema</groupId>\n            <artifactId>xmlschema-core</artifactId>\n            <version>2.2.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.neethi</groupId>\n            <artifactId>neethi</artifactId>\n            <!--<version>2.0.4</version> -->\n            <version>3.1.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.axis2</groupId>\n            <artifactId>axis2-transport-local</artifactId>\n            <version>1.7.7</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.axis2</groupId>\n            <artifactId>axis2-transport-http</artifactId>\n            <version>1.7.7</version>\n        </dependency>\n        <dependency>\n            <groupId>javax.mail</groupId>\n            <artifactId>javax.mail-api</artifactId>\n            <version>1.6.2</version>\n        </dependency>\n      <!-- Axis2 End -->\n  ```\n\n##### 1.1 axis2+wsdl地址方式调用:\n\n```java\n  String soapBindingAddress = \"http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx?wsdl\";\n        EndpointReference endpointReference = new EndpointReference(soapBindingAddress);\n        //创建一个OMFactory\n        OMFactory factory = OMAbstractFactory.getOMFactory();\n        //指定命名空间\n        OMNamespace namespace = factory.createOMNamespace(\"http://WebXml.com.cn/\", \"web\");\n        //创建method对象，方法名 为getMobileCodeInfo\n        OMElement method = factory.createOMElement(\"getMobileCodeInfo\", namespace);\n        OMElement mobileCode = factory.createOMElement(\"mobileCode\", namespace);//方法参数\n        OMElement userID = factory.createOMElement(\"userID\", namespace);//方法参数\n        //封装参数\n        mobileCode.addChild(factory.createOMText(mobileCode, \"18265963256\"));//设定参数的值\n        method.addChild(mobileCode);\n        userID.addChild(factory.createOMText(userID, \"\"));//设定参数的值\n        method.addChild(userID);\n        //请求参数设置\n        ServiceClient sender = new ServiceClient();\n        Options options = new Options();\n        // 设置soap1.2协议\n        options.setSoapVersionURI(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);\n        options.setAction(\"http://WebXml.com.cn/getMobileCodeInfo\");\n        options.setTo(endpointReference);\n        sender.setOptions(options);\n        OMElement result = sender.sendReceive(method);\n        System.out.println(result.getFirstElement().getText());\n```\n\n##### 1.2 axis2+endpoint地址方式调用:\n\n```java\n  ServiceClient client = new ServiceClient();\n        // 创建服务地址WebService的URL,注意不是WSDL的URL\n        String url = \"http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx\";\n        EndpointReference targetEPR = new EndpointReference(url);\n        Options options = client.getOptions();\n        // 设置soap1.2协议\n        options.setSoapVersionURI(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);\n        options.setTo(targetEPR);\n        // 确定调用方法（wsdl 命名空间地址 (wsdl文档中的targetNamespace) 和 方法名称 的组合）\n        options.setAction(\"http://WebXml.com.cn/getMobileCodeInfo\");\n        OMFactory fac = OMAbstractFactory.getOMFactory();\n        /*\n         * 指定命名空间，参数： uri--即为wsdl文档的targetNamespace，命名空间 perfix--可不填\n         */\n        OMNamespace omNs = fac.createOMNamespace(\"http://WebXml.com.cn/\", \"\");\n        /*\n         * 身份验证\n         * OMElement header = fac.createOMElement(\"AuthenticationToken\", omNs);\n         * OMElement ome_user = fac.createOMElement(\"Username\", omNs); OMElement\n         * ome_pass = fac.createOMElement(\"Password\", omNs);\n         *\n         * ome_user.setText(\"user\"); ome_pass.setText(\"pass\");\n         *\n         * header.addChild(ome_user); header.addChild(ome_pass);\n         *\n         * client.addHeader(header);\n         */\n        // 指定方法\n        OMElement method = fac.createOMElement(\"getMobileCodeInfo\", omNs);\n        // 指定方法的参数\n        OMElement mobileCode = fac.createOMElement(\"mobileCode\", omNs);\n        mobileCode.setText(\"18265963256\");\n        OMElement userID = fac.createOMElement(\"userID\", omNs);\n        userID.setText(\"\");\n        method.addChild(mobileCode);\n        method.addChild(userID);\n        method.build();\n        // 远程调用web服务\n        OMElement result = client.sendReceive(method);\n        System.out.println(result);\n```\n\n    注:返回的xml数据可能含有需要转义的字符,比如&lt;之类的.\n    可以用org.apache.commons.lang3.StringEscapeUtils.unescapeXml方法处理,(已过时),\n    可以用commons-text包下的StringEscapeUtils类进行反转义处理\n\n#### 2.wsdl2java方式调用\n\n  使用jdk命令行下的wsimport命令和wsdl文件生成生成客户端中间代码,\n  \n  注意:只能编译soap1.1的协议，不能编译soap1.2的协议的代码\n\n    wsimport [options] <WSDL_URI>\n    比较常用的[options]有：\n    1. -d <directory>\n      在指定的目录生成class文件\n    2. -clientjar <jarfile>\n      在当前目录生成jar文件，结合-d <directory>可以在指定的目录生成jar文件\n    3. -s <directory>\n      在指定的目录生成java源文件\n    4. -p <pkg>\n      指定生成文件的包结构\n    5. -keep\n      在生成class文件，或者jar包时，同时保留java源文件\n\n例:在当前目录新建class文件夹和java文件夹,分别存放对应的class文件个java文件\n\n    wsimport -keep -d ./class -s ./java -p com.test.demo -verbose http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx?wsdl  \n\n```java\n  //创建一个MobileCodeWS工厂  \n  MobileCodeWS factory = new MobileCodeWS();  \n  //根据工厂创建一个MobileCodeWSSoap对象  \n  MobileCodeWSSoap mobileCodeWSSoap = factory.getMobileCodeWSSoap();  \n  //调用WebService提供的getMobileCodeInfo方法查询手机号码的归属地  \n  String searchResult = mobileCodeWSSoap.getMobileCodeInfo(\"18265963256\", null);  \n  System.out.println(searchResult);  \n```\n\n笔后摘要:\n\nwebservice既然是基于http的,那么也可使用最原始的URLconnect来进行访问请求处理,但是要注意对应的soap协议版本请求头,还需要组装符合soap协议xml文档信息等.完整的请求头应该和下例类似:\n\n```xml\n  请求头:\n  POST /WebServices/MobileCodeWS.asmx HTTP/1.1\n  Host: webservice.webxml.com.cn\n  Content-Type: text/xml; charset=utf-8\n  Content-Length: length\n  SOAPAction: \"http://WebXml.com.cn/getMobileCodeInfo\"\n\n消息体:\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n<soap:Body>\n<getMobileCodeInfo xmlns=\"http://WebXml.com.cn/\">\n<mobileCode>18265963256</mobileCode>\n<userID>string</userID>\n</getMobileCodeInfo>\n</soap:Body>\n</soap:Envelope>\n```","slug":"axis2调用webservice","published":1,"updated":"2019-09-02T07:37:22.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck024pnvk000jy6fgkxyvqgpk","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#webservice一种跨编程语言和跨操作系统平台的远程调用技术\">WebService:一种跨编程语言和跨操作系统平台的远程调用技术.</a></li>\n<li><a href=\"#webservice的实现包有很多java语言有jdk16后内置的jwsapache-cxfapache-axisapache-axis2\">WebService的实现包有很多,Java语言有jdk1.6后内置的jws.*,Apache cxf,Apache Axis,Apache Axis2.</a><ul>\n<li><a href=\"#1远程调用\">1.远程调用</a><ul>\n<li><a href=\"#11-axis2wsdl地址方式调用\">1.1 axis2+wsdl地址方式调用:</a></li>\n<li><a href=\"#12-axis2endpoint地址方式调用\">1.2 axis2+endpoint地址方式调用:</a></li>\n</ul>\n</li>\n<li><a href=\"#2wsdl2java方式调用\">2.wsdl2java方式调用</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<h3 id=\"WebService-一种跨编程语言和跨操作系统平台的远程调用技术\"><a href=\"#WebService-一种跨编程语言和跨操作系统平台的远程调用技术\" class=\"headerlink\" title=\"WebService:一种跨编程语言和跨操作系统平台的远程调用技术.\"></a>WebService:一种跨编程语言和跨操作系统平台的远程调用技术.</h3><pre><code>WebService都是基于http请求(POST请求,无GET请求)\nXML+XSD,SOAP和WSDL就是构成WebService平台的三大技术。\nXML+XSD：\n\nWebService采用HTTP协议传输数据，采用XML格式封装数据（即XML中说明调用远程服务对象的哪个方法，传递的参数是什么，\n以及服务对象的返回结果是什么）。XML是WebService平台中表示数据的格式。\n\nSOAP(Simple Object Access Protocol)：简单对象访问协议\n\nSOAP提供了标准的RPC方法来调用Web Service。SOAP协议 = HTTP协议 + XML数据格式SOAP协议定义了SOAP消息的格式，\nSOAP协议是基于HTTP协议的，SOAP也是基于XML和XSD的，XML是SOAP的数据编码方式。\nsoap协议分1.1和1.2版本:\nsoap1.1:\n  请求方式:post\n  content-type:text/xml;charset=utf-8\nsoap1.2:\n  请求方式:post\n  content-type:application/soap+xml\n\nWSDL(Web Services Description Language):基于XML的语言，用于描述Web Service及其函数、参数和返回值。\n\n它是WebService客户端和服务器端都能理解的标准格式。WSDL文件保存在Web服务器上，通过一个url地址就可以访问到它。\n客户端要调用一个WebService服务之前，要知道该服务的WSDL文件的地址。\n\n注:wsdl文件阅读技巧:(从下往上读)\n  找到wsdl:service节点-&gt;查看下面的wsdl:port节点-&gt;查看其binding属性-&gt;找到与bingding名称相同的wsdl:binding节点\n  -&gt;查看节点下的wsdl:operation节点(对应的调用method名称)-&gt;wsdl:input方法输入参数节点-&gt;对应message属性值\n  -&gt;找到同名的wsdl:message节点-&gt;wsdl:part对应的参数名称和类型.\n\n  wsdl:output节点代表服务返回的数据.阅读方式和wsdl:input一致\n</code></pre><p>WebService优点:跨平台跨语言.服务方和调用方不用关心各自的平台和语言</p>\n<p>WebService缺点:在使用方式上，RPC和soap的使用在减少，Restful架构占到了主导地位。在数据格式上，XML格式繁琐,使用在减少，json等轻量级格式的使用在增多..另外性能上略低(也有专门对xml解析优化的cpu)</p>\n<h3 id=\"WebService的实现包有很多-Java语言有jdk1-6后内置的jws-Apache-cxf-Apache-Axis-Apache-Axis2\"><a href=\"#WebService的实现包有很多-Java语言有jdk1-6后内置的jws-Apache-cxf-Apache-Axis-Apache-Axis2\" class=\"headerlink\" title=\"WebService的实现包有很多,Java语言有jdk1.6后内置的jws.*,Apache cxf,Apache Axis,Apache Axis2.\"></a>WebService的实现包有很多,Java语言有jdk1.6后内置的jws.*,Apache cxf,Apache Axis,Apache Axis2.</h3><p>本文采用axis2包,发布webservice服务可以采用jdk的@WebService注解实现或者cxf/axis/axis2来进行实现,网上教程很多,本文不涉及到这块.主要是发现在调用的时候会有一些坑,所以在此记录</p>\n<p>WebService客户端调用主要有2类方式,一种是通过http远程调用,一种是通过wsdl2java产生Java代码调用</p>\n<h4 id=\"1-远程调用\"><a href=\"#1-远程调用\" class=\"headerlink\" title=\"1.远程调用\"></a>1.远程调用</h4><p>  引入axisjar包:<br>  <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Axis2 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.axis2<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>axis2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.6.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.ws.commons.axiom<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>axiom<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.20<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.ws.commons.axiom<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>axiom-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.20<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.ws.commons.axiom<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>axiom-impl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.20<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>wsdl4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>wsdl4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.6.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.ws.xmlschema<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>xmlschema-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.neethi<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>neethi<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--&lt;version&gt;2.0.4&lt;/version&gt; --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.axis2<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>axis2-transport-local<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.axis2<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>axis2-transport-http<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.mail<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.mail-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.6.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Axis2 End --&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"1-1-axis2-wsdl地址方式调用\"><a href=\"#1-1-axis2-wsdl地址方式调用\" class=\"headerlink\" title=\"1.1 axis2+wsdl地址方式调用:\"></a>1.1 axis2+wsdl地址方式调用:</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String soapBindingAddress = <span class=\"string\">\"http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx?wsdl\"</span>;</span><br><span class=\"line\">      EndpointReference endpointReference = <span class=\"keyword\">new</span> EndpointReference(soapBindingAddress);</span><br><span class=\"line\">      <span class=\"comment\">//创建一个OMFactory</span></span><br><span class=\"line\">      OMFactory factory = OMAbstractFactory.getOMFactory();</span><br><span class=\"line\">      <span class=\"comment\">//指定命名空间</span></span><br><span class=\"line\">      OMNamespace namespace = factory.createOMNamespace(<span class=\"string\">\"http://WebXml.com.cn/\"</span>, <span class=\"string\">\"web\"</span>);</span><br><span class=\"line\">      <span class=\"comment\">//创建method对象，方法名 为getMobileCodeInfo</span></span><br><span class=\"line\">      OMElement method = factory.createOMElement(<span class=\"string\">\"getMobileCodeInfo\"</span>, namespace);</span><br><span class=\"line\">      OMElement mobileCode = factory.createOMElement(<span class=\"string\">\"mobileCode\"</span>, namespace);<span class=\"comment\">//方法参数</span></span><br><span class=\"line\">      OMElement userID = factory.createOMElement(<span class=\"string\">\"userID\"</span>, namespace);<span class=\"comment\">//方法参数</span></span><br><span class=\"line\">      <span class=\"comment\">//封装参数</span></span><br><span class=\"line\">      mobileCode.addChild(factory.createOMText(mobileCode, <span class=\"string\">\"18265963256\"</span>));<span class=\"comment\">//设定参数的值</span></span><br><span class=\"line\">      method.addChild(mobileCode);</span><br><span class=\"line\">      userID.addChild(factory.createOMText(userID, <span class=\"string\">\"\"</span>));<span class=\"comment\">//设定参数的值</span></span><br><span class=\"line\">      method.addChild(userID);</span><br><span class=\"line\">      <span class=\"comment\">//请求参数设置</span></span><br><span class=\"line\">      ServiceClient sender = <span class=\"keyword\">new</span> ServiceClient();</span><br><span class=\"line\">      Options options = <span class=\"keyword\">new</span> Options();</span><br><span class=\"line\">      <span class=\"comment\">// 设置soap1.2协议</span></span><br><span class=\"line\">      options.setSoapVersionURI(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);</span><br><span class=\"line\">      options.setAction(<span class=\"string\">\"http://WebXml.com.cn/getMobileCodeInfo\"</span>);</span><br><span class=\"line\">      options.setTo(endpointReference);</span><br><span class=\"line\">      sender.setOptions(options);</span><br><span class=\"line\">      OMElement result = sender.sendReceive(method);</span><br><span class=\"line\">      System.out.println(result.getFirstElement().getText());</span><br></pre></td></tr></table></figure>\n<h5 id=\"1-2-axis2-endpoint地址方式调用\"><a href=\"#1-2-axis2-endpoint地址方式调用\" class=\"headerlink\" title=\"1.2 axis2+endpoint地址方式调用:\"></a>1.2 axis2+endpoint地址方式调用:</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServiceClient client = <span class=\"keyword\">new</span> ServiceClient();</span><br><span class=\"line\">      <span class=\"comment\">// 创建服务地址WebService的URL,注意不是WSDL的URL</span></span><br><span class=\"line\">      String url = <span class=\"string\">\"http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx\"</span>;</span><br><span class=\"line\">      EndpointReference targetEPR = <span class=\"keyword\">new</span> EndpointReference(url);</span><br><span class=\"line\">      Options options = client.getOptions();</span><br><span class=\"line\">      <span class=\"comment\">// 设置soap1.2协议</span></span><br><span class=\"line\">      options.setSoapVersionURI(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);</span><br><span class=\"line\">      options.setTo(targetEPR);</span><br><span class=\"line\">      <span class=\"comment\">// 确定调用方法（wsdl 命名空间地址 (wsdl文档中的targetNamespace) 和 方法名称 的组合）</span></span><br><span class=\"line\">      options.setAction(<span class=\"string\">\"http://WebXml.com.cn/getMobileCodeInfo\"</span>);</span><br><span class=\"line\">      OMFactory fac = OMAbstractFactory.getOMFactory();</span><br><span class=\"line\">      <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">       * 指定命名空间，参数： uri--即为wsdl文档的targetNamespace，命名空间 perfix--可不填</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      OMNamespace omNs = fac.createOMNamespace(<span class=\"string\">\"http://WebXml.com.cn/\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">      <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">       * 身份验证</span></span><br><span class=\"line\"><span class=\"comment\">       * OMElement header = fac.createOMElement(\"AuthenticationToken\", omNs);</span></span><br><span class=\"line\"><span class=\"comment\">       * OMElement ome_user = fac.createOMElement(\"Username\", omNs); OMElement</span></span><br><span class=\"line\"><span class=\"comment\">       * ome_pass = fac.createOMElement(\"Password\", omNs);</span></span><br><span class=\"line\"><span class=\"comment\">       *</span></span><br><span class=\"line\"><span class=\"comment\">       * ome_user.setText(\"user\"); ome_pass.setText(\"pass\");</span></span><br><span class=\"line\"><span class=\"comment\">       *</span></span><br><span class=\"line\"><span class=\"comment\">       * header.addChild(ome_user); header.addChild(ome_pass);</span></span><br><span class=\"line\"><span class=\"comment\">       *</span></span><br><span class=\"line\"><span class=\"comment\">       * client.addHeader(header);</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"comment\">// 指定方法</span></span><br><span class=\"line\">      OMElement method = fac.createOMElement(<span class=\"string\">\"getMobileCodeInfo\"</span>, omNs);</span><br><span class=\"line\">      <span class=\"comment\">// 指定方法的参数</span></span><br><span class=\"line\">      OMElement mobileCode = fac.createOMElement(<span class=\"string\">\"mobileCode\"</span>, omNs);</span><br><span class=\"line\">      mobileCode.setText(<span class=\"string\">\"18265963256\"</span>);</span><br><span class=\"line\">      OMElement userID = fac.createOMElement(<span class=\"string\">\"userID\"</span>, omNs);</span><br><span class=\"line\">      userID.setText(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">      method.addChild(mobileCode);</span><br><span class=\"line\">      method.addChild(userID);</span><br><span class=\"line\">      method.build();</span><br><span class=\"line\">      <span class=\"comment\">// 远程调用web服务</span></span><br><span class=\"line\">      OMElement result = client.sendReceive(method);</span><br><span class=\"line\">      System.out.println(result);</span><br></pre></td></tr></table></figure>\n<pre><code>注:返回的xml数据可能含有需要转义的字符,比如&amp;lt;之类的.\n可以用org.apache.commons.lang3.StringEscapeUtils.unescapeXml方法处理,(已过时),\n可以用commons-text包下的StringEscapeUtils类进行反转义处理\n</code></pre><h4 id=\"2-wsdl2java方式调用\"><a href=\"#2-wsdl2java方式调用\" class=\"headerlink\" title=\"2.wsdl2java方式调用\"></a>2.wsdl2java方式调用</h4><p>  使用jdk命令行下的wsimport命令和wsdl文件生成生成客户端中间代码,</p>\n<p>  注意:只能编译soap1.1的协议，不能编译soap1.2的协议的代码</p>\n<pre><code>wsimport [options] &lt;WSDL_URI&gt;\n比较常用的[options]有：\n1. -d &lt;directory&gt;\n  在指定的目录生成class文件\n2. -clientjar &lt;jarfile&gt;\n  在当前目录生成jar文件，结合-d &lt;directory&gt;可以在指定的目录生成jar文件\n3. -s &lt;directory&gt;\n  在指定的目录生成java源文件\n4. -p &lt;pkg&gt;\n  指定生成文件的包结构\n5. -keep\n  在生成class文件，或者jar包时，同时保留java源文件\n</code></pre><p>例:在当前目录新建class文件夹和java文件夹,分别存放对应的class文件个java文件</p>\n<pre><code>wsimport -keep -d ./class -s ./java -p com.test.demo -verbose http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx?wsdl  \n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个MobileCodeWS工厂  </span></span><br><span class=\"line\">MobileCodeWS factory = <span class=\"keyword\">new</span> MobileCodeWS();  </span><br><span class=\"line\"><span class=\"comment\">//根据工厂创建一个MobileCodeWSSoap对象  </span></span><br><span class=\"line\">MobileCodeWSSoap mobileCodeWSSoap = factory.getMobileCodeWSSoap();  </span><br><span class=\"line\"><span class=\"comment\">//调用WebService提供的getMobileCodeInfo方法查询手机号码的归属地  </span></span><br><span class=\"line\">String searchResult = mobileCodeWSSoap.getMobileCodeInfo(<span class=\"string\">\"18265963256\"</span>, <span class=\"keyword\">null</span>);  </span><br><span class=\"line\">System.out.println(searchResult);</span><br></pre></td></tr></table></figure>\n<p>笔后摘要:</p>\n<p>webservice既然是基于http的,那么也可使用最原始的URLconnect来进行访问请求处理,但是要注意对应的soap协议版本请求头,还需要组装符合soap协议xml文档信息等.完整的请求头应该和下例类似:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  请求头:</span><br><span class=\"line\">  POST /WebServices/MobileCodeWS.asmx HTTP/1.1</span><br><span class=\"line\">  Host: webservice.webxml.com.cn</span><br><span class=\"line\">  Content-Type: text/xml; charset=utf-8</span><br><span class=\"line\">  Content-Length: length</span><br><span class=\"line\">  SOAPAction: \"http://WebXml.com.cn/getMobileCodeInfo\"</span><br><span class=\"line\"></span><br><span class=\"line\">消息体:</span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">soap:Envelope</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema\"</span> <span class=\"attr\">xmlns:soap</span>=<span class=\"string\">\"http://schemas.xmlsoap.org/soap/envelope/\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">soap:Body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">getMobileCodeInfo</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://WebXml.com.cn/\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mobileCode</span>&gt;</span>18265963256<span class=\"tag\">&lt;/<span class=\"name\">mobileCode</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">userID</span>&gt;</span>string<span class=\"tag\">&lt;/<span class=\"name\">userID</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">getMobileCodeInfo</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">soap:Body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">soap:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<!-- TOC -->\n<ul>\n<li><a href=\"#webservice一种跨编程语言和跨操作系统平台的远程调用技术\">WebService:一种跨编程语言和跨操作系统平台的远程调用技术.</a></li>\n<li><a href=\"#webservice的实现包有很多java语言有jdk16后内置的jwsapache-cxfapache-axisapache-axis2\">WebService的实现包有很多,Java语言有jdk1.6后内置的jws.*,Apache cxf,Apache Axis,Apache Axis2.</a><ul>\n<li><a href=\"#1远程调用\">1.远程调用</a><ul>\n<li><a href=\"#11-axis2wsdl地址方式调用\">1.1 axis2+wsdl地址方式调用:</a></li>\n<li><a href=\"#12-axis2endpoint地址方式调用\">1.2 axis2+endpoint地址方式调用:</a></li>\n</ul>\n</li>\n<li><a href=\"#2wsdl2java方式调用\">2.wsdl2java方式调用</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<h3 id=\"WebService-一种跨编程语言和跨操作系统平台的远程调用技术\"><a href=\"#WebService-一种跨编程语言和跨操作系统平台的远程调用技术\" class=\"headerlink\" title=\"WebService:一种跨编程语言和跨操作系统平台的远程调用技术.\"></a>WebService:一种跨编程语言和跨操作系统平台的远程调用技术.</h3><pre><code>WebService都是基于http请求(POST请求,无GET请求)\nXML+XSD,SOAP和WSDL就是构成WebService平台的三大技术。\nXML+XSD：\n\nWebService采用HTTP协议传输数据，采用XML格式封装数据（即XML中说明调用远程服务对象的哪个方法，传递的参数是什么，\n以及服务对象的返回结果是什么）。XML是WebService平台中表示数据的格式。\n\nSOAP(Simple Object Access Protocol)：简单对象访问协议\n\nSOAP提供了标准的RPC方法来调用Web Service。SOAP协议 = HTTP协议 + XML数据格式SOAP协议定义了SOAP消息的格式，\nSOAP协议是基于HTTP协议的，SOAP也是基于XML和XSD的，XML是SOAP的数据编码方式。\nsoap协议分1.1和1.2版本:\nsoap1.1:\n  请求方式:post\n  content-type:text/xml;charset=utf-8\nsoap1.2:\n  请求方式:post\n  content-type:application/soap+xml\n\nWSDL(Web Services Description Language):基于XML的语言，用于描述Web Service及其函数、参数和返回值。\n\n它是WebService客户端和服务器端都能理解的标准格式。WSDL文件保存在Web服务器上，通过一个url地址就可以访问到它。\n客户端要调用一个WebService服务之前，要知道该服务的WSDL文件的地址。\n\n注:wsdl文件阅读技巧:(从下往上读)\n  找到wsdl:service节点-&gt;查看下面的wsdl:port节点-&gt;查看其binding属性-&gt;找到与bingding名称相同的wsdl:binding节点\n  -&gt;查看节点下的wsdl:operation节点(对应的调用method名称)-&gt;wsdl:input方法输入参数节点-&gt;对应message属性值\n  -&gt;找到同名的wsdl:message节点-&gt;wsdl:part对应的参数名称和类型.\n\n  wsdl:output节点代表服务返回的数据.阅读方式和wsdl:input一致\n</code></pre><p>WebService优点:跨平台跨语言.服务方和调用方不用关心各自的平台和语言</p>\n<p>WebService缺点:在使用方式上，RPC和soap的使用在减少，Restful架构占到了主导地位。在数据格式上，XML格式繁琐,使用在减少，json等轻量级格式的使用在增多..另外性能上略低(也有专门对xml解析优化的cpu)</p>\n<h3 id=\"WebService的实现包有很多-Java语言有jdk1-6后内置的jws-Apache-cxf-Apache-Axis-Apache-Axis2\"><a href=\"#WebService的实现包有很多-Java语言有jdk1-6后内置的jws-Apache-cxf-Apache-Axis-Apache-Axis2\" class=\"headerlink\" title=\"WebService的实现包有很多,Java语言有jdk1.6后内置的jws.*,Apache cxf,Apache Axis,Apache Axis2.\"></a>WebService的实现包有很多,Java语言有jdk1.6后内置的jws.*,Apache cxf,Apache Axis,Apache Axis2.</h3><p>本文采用axis2包,发布webservice服务可以采用jdk的@WebService注解实现或者cxf/axis/axis2来进行实现,网上教程很多,本文不涉及到这块.主要是发现在调用的时候会有一些坑,所以在此记录</p>\n<p>WebService客户端调用主要有2类方式,一种是通过http远程调用,一种是通过wsdl2java产生Java代码调用</p>\n<h4 id=\"1-远程调用\"><a href=\"#1-远程调用\" class=\"headerlink\" title=\"1.远程调用\"></a>1.远程调用</h4><p>  引入axisjar包:<br>  <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Axis2 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.axis2<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>axis2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.6.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.ws.commons.axiom<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>axiom<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.20<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.ws.commons.axiom<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>axiom-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.20<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.ws.commons.axiom<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>axiom-impl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.20<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>wsdl4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>wsdl4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.6.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.ws.xmlschema<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>xmlschema-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.neethi<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>neethi<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--&lt;version&gt;2.0.4&lt;/version&gt; --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.axis2<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>axis2-transport-local<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.axis2<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>axis2-transport-http<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.mail<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.mail-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.6.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Axis2 End --&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"1-1-axis2-wsdl地址方式调用\"><a href=\"#1-1-axis2-wsdl地址方式调用\" class=\"headerlink\" title=\"1.1 axis2+wsdl地址方式调用:\"></a>1.1 axis2+wsdl地址方式调用:</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String soapBindingAddress = <span class=\"string\">\"http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx?wsdl\"</span>;</span><br><span class=\"line\">      EndpointReference endpointReference = <span class=\"keyword\">new</span> EndpointReference(soapBindingAddress);</span><br><span class=\"line\">      <span class=\"comment\">//创建一个OMFactory</span></span><br><span class=\"line\">      OMFactory factory = OMAbstractFactory.getOMFactory();</span><br><span class=\"line\">      <span class=\"comment\">//指定命名空间</span></span><br><span class=\"line\">      OMNamespace namespace = factory.createOMNamespace(<span class=\"string\">\"http://WebXml.com.cn/\"</span>, <span class=\"string\">\"web\"</span>);</span><br><span class=\"line\">      <span class=\"comment\">//创建method对象，方法名 为getMobileCodeInfo</span></span><br><span class=\"line\">      OMElement method = factory.createOMElement(<span class=\"string\">\"getMobileCodeInfo\"</span>, namespace);</span><br><span class=\"line\">      OMElement mobileCode = factory.createOMElement(<span class=\"string\">\"mobileCode\"</span>, namespace);<span class=\"comment\">//方法参数</span></span><br><span class=\"line\">      OMElement userID = factory.createOMElement(<span class=\"string\">\"userID\"</span>, namespace);<span class=\"comment\">//方法参数</span></span><br><span class=\"line\">      <span class=\"comment\">//封装参数</span></span><br><span class=\"line\">      mobileCode.addChild(factory.createOMText(mobileCode, <span class=\"string\">\"18265963256\"</span>));<span class=\"comment\">//设定参数的值</span></span><br><span class=\"line\">      method.addChild(mobileCode);</span><br><span class=\"line\">      userID.addChild(factory.createOMText(userID, <span class=\"string\">\"\"</span>));<span class=\"comment\">//设定参数的值</span></span><br><span class=\"line\">      method.addChild(userID);</span><br><span class=\"line\">      <span class=\"comment\">//请求参数设置</span></span><br><span class=\"line\">      ServiceClient sender = <span class=\"keyword\">new</span> ServiceClient();</span><br><span class=\"line\">      Options options = <span class=\"keyword\">new</span> Options();</span><br><span class=\"line\">      <span class=\"comment\">// 设置soap1.2协议</span></span><br><span class=\"line\">      options.setSoapVersionURI(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);</span><br><span class=\"line\">      options.setAction(<span class=\"string\">\"http://WebXml.com.cn/getMobileCodeInfo\"</span>);</span><br><span class=\"line\">      options.setTo(endpointReference);</span><br><span class=\"line\">      sender.setOptions(options);</span><br><span class=\"line\">      OMElement result = sender.sendReceive(method);</span><br><span class=\"line\">      System.out.println(result.getFirstElement().getText());</span><br></pre></td></tr></table></figure>\n<h5 id=\"1-2-axis2-endpoint地址方式调用\"><a href=\"#1-2-axis2-endpoint地址方式调用\" class=\"headerlink\" title=\"1.2 axis2+endpoint地址方式调用:\"></a>1.2 axis2+endpoint地址方式调用:</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServiceClient client = <span class=\"keyword\">new</span> ServiceClient();</span><br><span class=\"line\">      <span class=\"comment\">// 创建服务地址WebService的URL,注意不是WSDL的URL</span></span><br><span class=\"line\">      String url = <span class=\"string\">\"http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx\"</span>;</span><br><span class=\"line\">      EndpointReference targetEPR = <span class=\"keyword\">new</span> EndpointReference(url);</span><br><span class=\"line\">      Options options = client.getOptions();</span><br><span class=\"line\">      <span class=\"comment\">// 设置soap1.2协议</span></span><br><span class=\"line\">      options.setSoapVersionURI(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);</span><br><span class=\"line\">      options.setTo(targetEPR);</span><br><span class=\"line\">      <span class=\"comment\">// 确定调用方法（wsdl 命名空间地址 (wsdl文档中的targetNamespace) 和 方法名称 的组合）</span></span><br><span class=\"line\">      options.setAction(<span class=\"string\">\"http://WebXml.com.cn/getMobileCodeInfo\"</span>);</span><br><span class=\"line\">      OMFactory fac = OMAbstractFactory.getOMFactory();</span><br><span class=\"line\">      <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">       * 指定命名空间，参数： uri--即为wsdl文档的targetNamespace，命名空间 perfix--可不填</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      OMNamespace omNs = fac.createOMNamespace(<span class=\"string\">\"http://WebXml.com.cn/\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">      <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">       * 身份验证</span></span><br><span class=\"line\"><span class=\"comment\">       * OMElement header = fac.createOMElement(\"AuthenticationToken\", omNs);</span></span><br><span class=\"line\"><span class=\"comment\">       * OMElement ome_user = fac.createOMElement(\"Username\", omNs); OMElement</span></span><br><span class=\"line\"><span class=\"comment\">       * ome_pass = fac.createOMElement(\"Password\", omNs);</span></span><br><span class=\"line\"><span class=\"comment\">       *</span></span><br><span class=\"line\"><span class=\"comment\">       * ome_user.setText(\"user\"); ome_pass.setText(\"pass\");</span></span><br><span class=\"line\"><span class=\"comment\">       *</span></span><br><span class=\"line\"><span class=\"comment\">       * header.addChild(ome_user); header.addChild(ome_pass);</span></span><br><span class=\"line\"><span class=\"comment\">       *</span></span><br><span class=\"line\"><span class=\"comment\">       * client.addHeader(header);</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"comment\">// 指定方法</span></span><br><span class=\"line\">      OMElement method = fac.createOMElement(<span class=\"string\">\"getMobileCodeInfo\"</span>, omNs);</span><br><span class=\"line\">      <span class=\"comment\">// 指定方法的参数</span></span><br><span class=\"line\">      OMElement mobileCode = fac.createOMElement(<span class=\"string\">\"mobileCode\"</span>, omNs);</span><br><span class=\"line\">      mobileCode.setText(<span class=\"string\">\"18265963256\"</span>);</span><br><span class=\"line\">      OMElement userID = fac.createOMElement(<span class=\"string\">\"userID\"</span>, omNs);</span><br><span class=\"line\">      userID.setText(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">      method.addChild(mobileCode);</span><br><span class=\"line\">      method.addChild(userID);</span><br><span class=\"line\">      method.build();</span><br><span class=\"line\">      <span class=\"comment\">// 远程调用web服务</span></span><br><span class=\"line\">      OMElement result = client.sendReceive(method);</span><br><span class=\"line\">      System.out.println(result);</span><br></pre></td></tr></table></figure>\n<pre><code>注:返回的xml数据可能含有需要转义的字符,比如&amp;lt;之类的.\n可以用org.apache.commons.lang3.StringEscapeUtils.unescapeXml方法处理,(已过时),\n可以用commons-text包下的StringEscapeUtils类进行反转义处理\n</code></pre><h4 id=\"2-wsdl2java方式调用\"><a href=\"#2-wsdl2java方式调用\" class=\"headerlink\" title=\"2.wsdl2java方式调用\"></a>2.wsdl2java方式调用</h4><p>  使用jdk命令行下的wsimport命令和wsdl文件生成生成客户端中间代码,</p>\n<p>  注意:只能编译soap1.1的协议，不能编译soap1.2的协议的代码</p>\n<pre><code>wsimport [options] &lt;WSDL_URI&gt;\n比较常用的[options]有：\n1. -d &lt;directory&gt;\n  在指定的目录生成class文件\n2. -clientjar &lt;jarfile&gt;\n  在当前目录生成jar文件，结合-d &lt;directory&gt;可以在指定的目录生成jar文件\n3. -s &lt;directory&gt;\n  在指定的目录生成java源文件\n4. -p &lt;pkg&gt;\n  指定生成文件的包结构\n5. -keep\n  在生成class文件，或者jar包时，同时保留java源文件\n</code></pre><p>例:在当前目录新建class文件夹和java文件夹,分别存放对应的class文件个java文件</p>\n<pre><code>wsimport -keep -d ./class -s ./java -p com.test.demo -verbose http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx?wsdl  \n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个MobileCodeWS工厂  </span></span><br><span class=\"line\">MobileCodeWS factory = <span class=\"keyword\">new</span> MobileCodeWS();  </span><br><span class=\"line\"><span class=\"comment\">//根据工厂创建一个MobileCodeWSSoap对象  </span></span><br><span class=\"line\">MobileCodeWSSoap mobileCodeWSSoap = factory.getMobileCodeWSSoap();  </span><br><span class=\"line\"><span class=\"comment\">//调用WebService提供的getMobileCodeInfo方法查询手机号码的归属地  </span></span><br><span class=\"line\">String searchResult = mobileCodeWSSoap.getMobileCodeInfo(<span class=\"string\">\"18265963256\"</span>, <span class=\"keyword\">null</span>);  </span><br><span class=\"line\">System.out.println(searchResult);</span><br></pre></td></tr></table></figure>\n<p>笔后摘要:</p>\n<p>webservice既然是基于http的,那么也可使用最原始的URLconnect来进行访问请求处理,但是要注意对应的soap协议版本请求头,还需要组装符合soap协议xml文档信息等.完整的请求头应该和下例类似:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  请求头:</span><br><span class=\"line\">  POST /WebServices/MobileCodeWS.asmx HTTP/1.1</span><br><span class=\"line\">  Host: webservice.webxml.com.cn</span><br><span class=\"line\">  Content-Type: text/xml; charset=utf-8</span><br><span class=\"line\">  Content-Length: length</span><br><span class=\"line\">  SOAPAction: \"http://WebXml.com.cn/getMobileCodeInfo\"</span><br><span class=\"line\"></span><br><span class=\"line\">消息体:</span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">soap:Envelope</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema\"</span> <span class=\"attr\">xmlns:soap</span>=<span class=\"string\">\"http://schemas.xmlsoap.org/soap/envelope/\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">soap:Body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">getMobileCodeInfo</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://WebXml.com.cn/\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mobileCode</span>&gt;</span>18265963256<span class=\"tag\">&lt;/<span class=\"name\">mobileCode</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">userID</span>&gt;</span>string<span class=\"tag\">&lt;/<span class=\"name\">userID</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">getMobileCodeInfo</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">soap:Body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">soap:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"debian系系统编译CuraEngine引擎","date":"2018-09-05T08:13:22.000Z","_content":"\n      摘要:CuraEngine是一个功能强大、快速、强劲的3D模型切片引擎.Cura就是采用了CuraEngine引擎的.\n      本文的操作环境为deepin 15.7,编译CuraEngine的版本为2.4\n\n1.安装cmake\n\n    sudo apt install cmake\n\n2.安装Protobuf >= 3.0.0 \n  \n  2.1 安装libtool\n\n    sudo apt install libtool\n  \n  2.2 安装autoconf\n  \n    sudo apt install autoconf\n  2.3 clone代码,--depth=1.clone最近一次提交的,可以减少clone时间\n  \n    git clone https://github.com/protocolbuffers/protobuf.git --depth=1\n\n  2.4 进入到protobuf目录.执行\n  \n    ./autogen.sh\n\n  2.5 \n  \n    ./configure\n    \n  2.6 \n  \n    make \n\n  2.7 \n  \n    sudo make install\n\n3.安装libArcus\n\n  3.1 安装python3-dev\n      \n      sudo apt install python3-dev\n  \n  3.2 安装python3-sip-dev\n  \n    sudo apt install python3-sip-dev\n\n  3.3 安装libprotobuf-dev\n  \n    sudo apt install libprotobuf-dev\n\n  3.4 clone代码\n  \n    git clone https://github.com/Ultimaker/libArcus.git --depth=1\n\n  3.5 进入到libArcus目录,执行\n\n    mkdir build && cd build\n    cmake ..\n\n  3.6 \n  \n    make\n\n  3.7 \n  \n    sudo make install\n\n4.编译CuraEngine\n\n  4.1 clone代码.此处编译2.4版本,-b指定版本\n  \n    git clone https://github.com/Ultimaker/CuraEngine.git -b 2.4 --depth=1\n    \n  4.2 \n  \n    mkdir build && cd build\n\n  4.3 \n  \n    cmake ..\n\n\n  4.4 \n  \n    make","source":"_posts/debian系系统编译CuraEngine引擎.md","raw":"---\ntitle: debian系系统编译CuraEngine引擎\ndate: 2018-09-05 16:13:22\ntags: linux\n---\n\n      摘要:CuraEngine是一个功能强大、快速、强劲的3D模型切片引擎.Cura就是采用了CuraEngine引擎的.\n      本文的操作环境为deepin 15.7,编译CuraEngine的版本为2.4\n\n1.安装cmake\n\n    sudo apt install cmake\n\n2.安装Protobuf >= 3.0.0 \n  \n  2.1 安装libtool\n\n    sudo apt install libtool\n  \n  2.2 安装autoconf\n  \n    sudo apt install autoconf\n  2.3 clone代码,--depth=1.clone最近一次提交的,可以减少clone时间\n  \n    git clone https://github.com/protocolbuffers/protobuf.git --depth=1\n\n  2.4 进入到protobuf目录.执行\n  \n    ./autogen.sh\n\n  2.5 \n  \n    ./configure\n    \n  2.6 \n  \n    make \n\n  2.7 \n  \n    sudo make install\n\n3.安装libArcus\n\n  3.1 安装python3-dev\n      \n      sudo apt install python3-dev\n  \n  3.2 安装python3-sip-dev\n  \n    sudo apt install python3-sip-dev\n\n  3.3 安装libprotobuf-dev\n  \n    sudo apt install libprotobuf-dev\n\n  3.4 clone代码\n  \n    git clone https://github.com/Ultimaker/libArcus.git --depth=1\n\n  3.5 进入到libArcus目录,执行\n\n    mkdir build && cd build\n    cmake ..\n\n  3.6 \n  \n    make\n\n  3.7 \n  \n    sudo make install\n\n4.编译CuraEngine\n\n  4.1 clone代码.此处编译2.4版本,-b指定版本\n  \n    git clone https://github.com/Ultimaker/CuraEngine.git -b 2.4 --depth=1\n    \n  4.2 \n  \n    mkdir build && cd build\n\n  4.3 \n  \n    cmake ..\n\n\n  4.4 \n  \n    make","slug":"debian系系统编译CuraEngine引擎","published":1,"updated":"2019-09-02T07:37:22.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck024pnvl000ky6fgn306cmay","content":"<pre><code>摘要:CuraEngine是一个功能强大、快速、强劲的3D模型切片引擎.Cura就是采用了CuraEngine引擎的.\n本文的操作环境为deepin 15.7,编译CuraEngine的版本为2.4\n</code></pre><p>1.安装cmake</p>\n<pre><code>sudo apt install cmake\n</code></pre><p>2.安装Protobuf &gt;= 3.0.0 </p>\n<p>  2.1 安装libtool</p>\n<pre><code>sudo apt install libtool\n</code></pre><p>  2.2 安装autoconf</p>\n<pre><code>sudo apt install autoconf\n</code></pre><p>  2.3 clone代码,–depth=1.clone最近一次提交的,可以减少clone时间</p>\n<pre><code>git clone https://github.com/protocolbuffers/protobuf.git --depth=1\n</code></pre><p>  2.4 进入到protobuf目录.执行</p>\n<pre><code>./autogen.sh\n</code></pre><p>  2.5 </p>\n<pre><code>./configure\n</code></pre><p>  2.6 </p>\n<pre><code>make \n</code></pre><p>  2.7 </p>\n<pre><code>sudo make install\n</code></pre><p>3.安装libArcus</p>\n<p>  3.1 安装python3-dev</p>\n<pre><code>sudo apt install python3-dev\n</code></pre><p>  3.2 安装python3-sip-dev</p>\n<pre><code>sudo apt install python3-sip-dev\n</code></pre><p>  3.3 安装libprotobuf-dev</p>\n<pre><code>sudo apt install libprotobuf-dev\n</code></pre><p>  3.4 clone代码</p>\n<pre><code>git clone https://github.com/Ultimaker/libArcus.git --depth=1\n</code></pre><p>  3.5 进入到libArcus目录,执行</p>\n<pre><code>mkdir build &amp;&amp; cd build\ncmake ..\n</code></pre><p>  3.6 </p>\n<pre><code>make\n</code></pre><p>  3.7 </p>\n<pre><code>sudo make install\n</code></pre><p>4.编译CuraEngine</p>\n<p>  4.1 clone代码.此处编译2.4版本,-b指定版本</p>\n<pre><code>git clone https://github.com/Ultimaker/CuraEngine.git -b 2.4 --depth=1\n</code></pre><p>  4.2 </p>\n<pre><code>mkdir build &amp;&amp; cd build\n</code></pre><p>  4.3 </p>\n<pre><code>cmake ..\n</code></pre><p>  4.4 </p>\n<pre><code>make\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>摘要:CuraEngine是一个功能强大、快速、强劲的3D模型切片引擎.Cura就是采用了CuraEngine引擎的.\n本文的操作环境为deepin 15.7,编译CuraEngine的版本为2.4\n</code></pre><p>1.安装cmake</p>\n<pre><code>sudo apt install cmake\n</code></pre><p>2.安装Protobuf &gt;= 3.0.0 </p>\n<p>  2.1 安装libtool</p>\n<pre><code>sudo apt install libtool\n</code></pre><p>  2.2 安装autoconf</p>\n<pre><code>sudo apt install autoconf\n</code></pre><p>  2.3 clone代码,–depth=1.clone最近一次提交的,可以减少clone时间</p>\n<pre><code>git clone https://github.com/protocolbuffers/protobuf.git --depth=1\n</code></pre><p>  2.4 进入到protobuf目录.执行</p>\n<pre><code>./autogen.sh\n</code></pre><p>  2.5 </p>\n<pre><code>./configure\n</code></pre><p>  2.6 </p>\n<pre><code>make \n</code></pre><p>  2.7 </p>\n<pre><code>sudo make install\n</code></pre><p>3.安装libArcus</p>\n<p>  3.1 安装python3-dev</p>\n<pre><code>sudo apt install python3-dev\n</code></pre><p>  3.2 安装python3-sip-dev</p>\n<pre><code>sudo apt install python3-sip-dev\n</code></pre><p>  3.3 安装libprotobuf-dev</p>\n<pre><code>sudo apt install libprotobuf-dev\n</code></pre><p>  3.4 clone代码</p>\n<pre><code>git clone https://github.com/Ultimaker/libArcus.git --depth=1\n</code></pre><p>  3.5 进入到libArcus目录,执行</p>\n<pre><code>mkdir build &amp;&amp; cd build\ncmake ..\n</code></pre><p>  3.6 </p>\n<pre><code>make\n</code></pre><p>  3.7 </p>\n<pre><code>sudo make install\n</code></pre><p>4.编译CuraEngine</p>\n<p>  4.1 clone代码.此处编译2.4版本,-b指定版本</p>\n<pre><code>git clone https://github.com/Ultimaker/CuraEngine.git -b 2.4 --depth=1\n</code></pre><p>  4.2 </p>\n<pre><code>mkdir build &amp;&amp; cd build\n</code></pre><p>  4.3 </p>\n<pre><code>cmake ..\n</code></pre><p>  4.4 </p>\n<pre><code>make\n</code></pre>"},{"title":"deepin linux下初识docker","date":"2019-05-29T02:27:29.000Z","_content":"\n### deepin linux 安装最新版 docker\n\n可以参考官放 wiki 文档进行安装,地址如下:\n\nhttps://wiki.deepin.org/wiki/Docker#.E5.9C.A8_Deepin_.E4.B8.AD.E5.AE.89.E8.A3.85_Docker_.E6.9C.80.E6.96.B0.E7.89.88.E7.9A.84.E6.96.B9.E6.B3.95\n\n但官网打开速度比较慢,另外关于最后一项禁止开启自启官方说的方式是无效的,笔者亲试至少在(deepin 15.10.1 基于 unstable 升级上来的)是无效的.所以将详情步骤记录如下:\n\n    注:执行apt命令之前,最好先执行一次更新仓库操作sudo apt update\n\n1.如果以前安装过老版本，要确保先卸载以前版本.\n\n`sudo apt remove docker.io docker-engine`\n\n2.安装密钥管理与下载相关的工具\n\n// 密钥管理（add-apt-repository ca-certificates 等）与下载（curl 等）相关的工具\n\n`sudo apt-get install apt-transport-https ca-certificates curl python-software-properties software-properties-common`\n\n3.下载并安装密钥\n\n`curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -`\n\n执行成功后返回 OK 即可.如果不成功的话,可能是网络问题,我这儿是处于翻墙状态,所以是能成功的.不能成功的话,可以按照官方 wiki 上说的使用国内镜像源`curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/debian/gpg | sudo apt-key add -`\n\n4.查看密钥是否安装成功\n\n`sudo apt-get fingerprint 0EBFCD88`\n\n如果成功会提示\n\n`pub 4096R/0EBFCD88 2017-02-22 Key fingerprint = 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88`\n`uid Docker Release (CE deb) <docker@docker.com>`\n`sub 4096R/F273FCD8 2017-02-22`\n\n5.在 source.list 中添加 docker-ce 软件源\n\n    在此需要注意当前系统版本,执行 cat /etc/debian_version查看当前系统是基于debian的哪个版本.debian版本号和系统代号如下:\n\n| 系统代号 | 版本号 |\n| -------- | ------ |\n| squeeze  | 6.x    |\n| wheezy   | 7.x    |\n| jessie   | 8.x    |\n| stretch  | 9.x    |\n\ndeepin 15.10.x 是基于 debian9.0 的,所以加入源如下:\n\nsudo vim /etc/apt/sources.list\n\n`deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/debian stretch stable`\n\n6.更新仓库\n\n`sudo apt update`\n\n7.安装 docker-ce\n\n`sudo apt install docker-ce`\n\n    注:这一步网络不好可能会导致失败,多试几次总会成功的.\n\n8.启动 docker\n\n`sudo systemctl start docker` 或者\n`service docker start`\n\n9.查看安装的版本信息\n\n`docker version`\n\n10.验证 docker 是否被正确安装并且能够正常使用\n\n`sudo docker run hello-world`\n\n如果能够正常下载，并能够正常执行，则说明 docker 正常安装\n\n11.让普通用户也能运行 docker\n\n    默认情况下，普通用户运行 docker 会有权限问题，每次运行都得加 sudo，很麻烦。把你的账号加到 docker 用户组后就不用加 sudo 了：\n\n`sudo usermod -aG docker test` // test 是用户名,替换为自己的,执行后注销登录\n\n12.docker service 默认是开机自启的,强迫症取消开机自启的\n\n    这一点,官方说的安装chkconfig来管理\n\n安装 chkconfig\n\n`sudo apt install chkconfig`\n\n移除自启\n\n`sudo chkconfig --del docker`\n\n    但是试了,重启无效无效.需要通过systemctl命令来禁止\n\n`sudo systemctl disable docker`\n\n### docker 使用初识\n\n#### docker 入门命令\n\ndocker 安装后,默认是没有任何镜像的,如果安装后执行了 docker run hello-world 的话,是有一个 hello-world 的镜像的.\n\n`docker images` // 查看本地的镜像\n\n可以通过 pull 命令获取相关镜像\n\n`docker search nginx` // 在 docker.io 上搜索 nginx 相关的镜像\n\n`docker pull nginx:latest` // latest 代表取最新版本,要获取其他版本 docker pull nginx:xxxx\n\n`docker run -itd --name nginx1.0 nginx` // -d: 后台启动容器;-i: 以交互模式运行容器，通常与 -t 同时使用;-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用; --name：容器的别名，默认为随机的,这儿为 nginx1.0\n\n    第一次使用run运行指定别名后,以后可通过docker start+ 别名的方式启动\n\n`docker ps` // 查看正在运行的容器\n\n`docker ps -a` // 查看所有容器\n\n`docker ps -l` // 查看最近一次运行的容器\n\n`docker exec -it nginx1.0 bash` // 进入 nginx1.0 容器的命令行\n\n`docker start nginx1.0` // 启动 nginx1.0 容器\n\n`docker stop nginx1.0` // 停止 nginx1.0 容器\n\n`docker rm nginx1.0` // 删除 nginx1.0 容器\n\n#### docker 网络\n\nlinux 使用 namespace 来进行资源的隔离 ，docker 的隔离性\n\n1.docker 的网路类型分为：\n\nBridge 模式：桥接（默认的模式）\n\nhost 模式：容器将不会获得独立的 network namespace，将和主机公用一个；即在 docker 中使用网络和主机上一样的；\n\nNone：不与外界任何东西进行通讯\n\n2.采用 Bridge 的时候需要和主机通讯，就需要使用端口映射\n\ndocker run -d --name nginx1.0 -p 8080:80 nginx # 主机的 8080 端口映射到容器中的 80 端口\n\n    多个端口映射可以跟多个-p,比如:-p 8080:80 -p 6379:6379\n\n#### docker 镜像备份和导入镜像\n\n`docker save -o /home/xxx/images/nginx.tar nginx1.0` // 将 nginx1.0 镜像备份到/home/xxx/images/目录下\n\n`docker load --input /home/xxx/images/nginx.tar` // 导入镜像\n\n#### docker挂载物理机本地目录\n\ndocker可以支持把一个宿主机上的目录挂载到镜像里。\n\n`docker run -itd -v /home/bz/Downloads:/home/Downloads nginx1.0` // 通过-v参数，冒号前为宿主机目录，必须为绝对路径，冒号后为镜像内挂载的路径\n\n默认挂载的路径权限为读写。如果指定为只读可以用：ro\n\n`docker run -itd -v /home/bz/Downloads:/home/Downloads:ro nginx1.0`","source":"_posts/deepin-linux下初识docker.md","raw":"---\ntitle: deepin linux下初识docker\ndate: 2019-05-29 10:27:29\ntags:\n  - linux\n  - docker\n---\n\n### deepin linux 安装最新版 docker\n\n可以参考官放 wiki 文档进行安装,地址如下:\n\nhttps://wiki.deepin.org/wiki/Docker#.E5.9C.A8_Deepin_.E4.B8.AD.E5.AE.89.E8.A3.85_Docker_.E6.9C.80.E6.96.B0.E7.89.88.E7.9A.84.E6.96.B9.E6.B3.95\n\n但官网打开速度比较慢,另外关于最后一项禁止开启自启官方说的方式是无效的,笔者亲试至少在(deepin 15.10.1 基于 unstable 升级上来的)是无效的.所以将详情步骤记录如下:\n\n    注:执行apt命令之前,最好先执行一次更新仓库操作sudo apt update\n\n1.如果以前安装过老版本，要确保先卸载以前版本.\n\n`sudo apt remove docker.io docker-engine`\n\n2.安装密钥管理与下载相关的工具\n\n// 密钥管理（add-apt-repository ca-certificates 等）与下载（curl 等）相关的工具\n\n`sudo apt-get install apt-transport-https ca-certificates curl python-software-properties software-properties-common`\n\n3.下载并安装密钥\n\n`curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -`\n\n执行成功后返回 OK 即可.如果不成功的话,可能是网络问题,我这儿是处于翻墙状态,所以是能成功的.不能成功的话,可以按照官方 wiki 上说的使用国内镜像源`curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/debian/gpg | sudo apt-key add -`\n\n4.查看密钥是否安装成功\n\n`sudo apt-get fingerprint 0EBFCD88`\n\n如果成功会提示\n\n`pub 4096R/0EBFCD88 2017-02-22 Key fingerprint = 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88`\n`uid Docker Release (CE deb) <docker@docker.com>`\n`sub 4096R/F273FCD8 2017-02-22`\n\n5.在 source.list 中添加 docker-ce 软件源\n\n    在此需要注意当前系统版本,执行 cat /etc/debian_version查看当前系统是基于debian的哪个版本.debian版本号和系统代号如下:\n\n| 系统代号 | 版本号 |\n| -------- | ------ |\n| squeeze  | 6.x    |\n| wheezy   | 7.x    |\n| jessie   | 8.x    |\n| stretch  | 9.x    |\n\ndeepin 15.10.x 是基于 debian9.0 的,所以加入源如下:\n\nsudo vim /etc/apt/sources.list\n\n`deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/debian stretch stable`\n\n6.更新仓库\n\n`sudo apt update`\n\n7.安装 docker-ce\n\n`sudo apt install docker-ce`\n\n    注:这一步网络不好可能会导致失败,多试几次总会成功的.\n\n8.启动 docker\n\n`sudo systemctl start docker` 或者\n`service docker start`\n\n9.查看安装的版本信息\n\n`docker version`\n\n10.验证 docker 是否被正确安装并且能够正常使用\n\n`sudo docker run hello-world`\n\n如果能够正常下载，并能够正常执行，则说明 docker 正常安装\n\n11.让普通用户也能运行 docker\n\n    默认情况下，普通用户运行 docker 会有权限问题，每次运行都得加 sudo，很麻烦。把你的账号加到 docker 用户组后就不用加 sudo 了：\n\n`sudo usermod -aG docker test` // test 是用户名,替换为自己的,执行后注销登录\n\n12.docker service 默认是开机自启的,强迫症取消开机自启的\n\n    这一点,官方说的安装chkconfig来管理\n\n安装 chkconfig\n\n`sudo apt install chkconfig`\n\n移除自启\n\n`sudo chkconfig --del docker`\n\n    但是试了,重启无效无效.需要通过systemctl命令来禁止\n\n`sudo systemctl disable docker`\n\n### docker 使用初识\n\n#### docker 入门命令\n\ndocker 安装后,默认是没有任何镜像的,如果安装后执行了 docker run hello-world 的话,是有一个 hello-world 的镜像的.\n\n`docker images` // 查看本地的镜像\n\n可以通过 pull 命令获取相关镜像\n\n`docker search nginx` // 在 docker.io 上搜索 nginx 相关的镜像\n\n`docker pull nginx:latest` // latest 代表取最新版本,要获取其他版本 docker pull nginx:xxxx\n\n`docker run -itd --name nginx1.0 nginx` // -d: 后台启动容器;-i: 以交互模式运行容器，通常与 -t 同时使用;-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用; --name：容器的别名，默认为随机的,这儿为 nginx1.0\n\n    第一次使用run运行指定别名后,以后可通过docker start+ 别名的方式启动\n\n`docker ps` // 查看正在运行的容器\n\n`docker ps -a` // 查看所有容器\n\n`docker ps -l` // 查看最近一次运行的容器\n\n`docker exec -it nginx1.0 bash` // 进入 nginx1.0 容器的命令行\n\n`docker start nginx1.0` // 启动 nginx1.0 容器\n\n`docker stop nginx1.0` // 停止 nginx1.0 容器\n\n`docker rm nginx1.0` // 删除 nginx1.0 容器\n\n#### docker 网络\n\nlinux 使用 namespace 来进行资源的隔离 ，docker 的隔离性\n\n1.docker 的网路类型分为：\n\nBridge 模式：桥接（默认的模式）\n\nhost 模式：容器将不会获得独立的 network namespace，将和主机公用一个；即在 docker 中使用网络和主机上一样的；\n\nNone：不与外界任何东西进行通讯\n\n2.采用 Bridge 的时候需要和主机通讯，就需要使用端口映射\n\ndocker run -d --name nginx1.0 -p 8080:80 nginx # 主机的 8080 端口映射到容器中的 80 端口\n\n    多个端口映射可以跟多个-p,比如:-p 8080:80 -p 6379:6379\n\n#### docker 镜像备份和导入镜像\n\n`docker save -o /home/xxx/images/nginx.tar nginx1.0` // 将 nginx1.0 镜像备份到/home/xxx/images/目录下\n\n`docker load --input /home/xxx/images/nginx.tar` // 导入镜像\n\n#### docker挂载物理机本地目录\n\ndocker可以支持把一个宿主机上的目录挂载到镜像里。\n\n`docker run -itd -v /home/bz/Downloads:/home/Downloads nginx1.0` // 通过-v参数，冒号前为宿主机目录，必须为绝对路径，冒号后为镜像内挂载的路径\n\n默认挂载的路径权限为读写。如果指定为只读可以用：ro\n\n`docker run -itd -v /home/bz/Downloads:/home/Downloads:ro nginx1.0`","slug":"deepin-linux下初识docker","published":1,"updated":"2019-09-02T07:37:22.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck024pnvn000my6fg57cv3zvb","content":"<h3 id=\"deepin-linux-安装最新版-docker\"><a href=\"#deepin-linux-安装最新版-docker\" class=\"headerlink\" title=\"deepin linux 安装最新版 docker\"></a>deepin linux 安装最新版 docker</h3><p>可以参考官放 wiki 文档进行安装,地址如下:</p>\n<p><a href=\"https://wiki.deepin.org/wiki/Docker#.E5.9C.A8_Deepin_.E4.B8.AD.E5.AE.89.E8.A3.85_Docker_.E6.9C.80.E6.96.B0.E7.89.88.E7.9A.84.E6.96.B9.E6.B3.95\" target=\"_blank\" rel=\"noopener\">https://wiki.deepin.org/wiki/Docker#.E5.9C.A8_Deepin_.E4.B8.AD.E5.AE.89.E8.A3.85_Docker_.E6.9C.80.E6.96.B0.E7.89.88.E7.9A.84.E6.96.B9.E6.B3.95</a></p>\n<p>但官网打开速度比较慢,另外关于最后一项禁止开启自启官方说的方式是无效的,笔者亲试至少在(deepin 15.10.1 基于 unstable 升级上来的)是无效的.所以将详情步骤记录如下:</p>\n<pre><code>注:执行apt命令之前,最好先执行一次更新仓库操作sudo apt update\n</code></pre><p>1.如果以前安装过老版本，要确保先卸载以前版本.</p>\n<p><code>sudo apt remove docker.io docker-engine</code></p>\n<p>2.安装密钥管理与下载相关的工具</p>\n<p>// 密钥管理（add-apt-repository ca-certificates 等）与下载（curl 等）相关的工具</p>\n<p><code>sudo apt-get install apt-transport-https ca-certificates curl python-software-properties software-properties-common</code></p>\n<p>3.下载并安装密钥</p>\n<p><code>curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -</code></p>\n<p>执行成功后返回 OK 即可.如果不成功的话,可能是网络问题,我这儿是处于翻墙状态,所以是能成功的.不能成功的话,可以按照官方 wiki 上说的使用国内镜像源<code>curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/debian/gpg | sudo apt-key add -</code></p>\n<p>4.查看密钥是否安装成功</p>\n<p><code>sudo apt-get fingerprint 0EBFCD88</code></p>\n<p>如果成功会提示</p>\n<p><code>pub 4096R/0EBFCD88 2017-02-22 Key fingerprint = 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88</code><br><code>uid Docker Release (CE deb) &lt;docker@docker.com&gt;</code><br><code>sub 4096R/F273FCD8 2017-02-22</code></p>\n<p>5.在 source.list 中添加 docker-ce 软件源</p>\n<pre><code>在此需要注意当前系统版本,执行 cat /etc/debian_version查看当前系统是基于debian的哪个版本.debian版本号和系统代号如下:\n</code></pre><table>\n<thead>\n<tr>\n<th>系统代号</th>\n<th>版本号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>squeeze</td>\n<td>6.x</td>\n</tr>\n<tr>\n<td>wheezy</td>\n<td>7.x</td>\n</tr>\n<tr>\n<td>jessie</td>\n<td>8.x</td>\n</tr>\n<tr>\n<td>stretch</td>\n<td>9.x</td>\n</tr>\n</tbody>\n</table>\n<p>deepin 15.10.x 是基于 debian9.0 的,所以加入源如下:</p>\n<p>sudo vim /etc/apt/sources.list</p>\n<p><code>deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/debian stretch stable</code></p>\n<p>6.更新仓库</p>\n<p><code>sudo apt update</code></p>\n<p>7.安装 docker-ce</p>\n<p><code>sudo apt install docker-ce</code></p>\n<pre><code>注:这一步网络不好可能会导致失败,多试几次总会成功的.\n</code></pre><p>8.启动 docker</p>\n<p><code>sudo systemctl start docker</code> 或者<br><code>service docker start</code></p>\n<p>9.查看安装的版本信息</p>\n<p><code>docker version</code></p>\n<p>10.验证 docker 是否被正确安装并且能够正常使用</p>\n<p><code>sudo docker run hello-world</code></p>\n<p>如果能够正常下载，并能够正常执行，则说明 docker 正常安装</p>\n<p>11.让普通用户也能运行 docker</p>\n<pre><code>默认情况下，普通用户运行 docker 会有权限问题，每次运行都得加 sudo，很麻烦。把你的账号加到 docker 用户组后就不用加 sudo 了：\n</code></pre><p><code>sudo usermod -aG docker test</code> // test 是用户名,替换为自己的,执行后注销登录</p>\n<p>12.docker service 默认是开机自启的,强迫症取消开机自启的</p>\n<pre><code>这一点,官方说的安装chkconfig来管理\n</code></pre><p>安装 chkconfig</p>\n<p><code>sudo apt install chkconfig</code></p>\n<p>移除自启</p>\n<p><code>sudo chkconfig --del docker</code></p>\n<pre><code>但是试了,重启无效无效.需要通过systemctl命令来禁止\n</code></pre><p><code>sudo systemctl disable docker</code></p>\n<h3 id=\"docker-使用初识\"><a href=\"#docker-使用初识\" class=\"headerlink\" title=\"docker 使用初识\"></a>docker 使用初识</h3><h4 id=\"docker-入门命令\"><a href=\"#docker-入门命令\" class=\"headerlink\" title=\"docker 入门命令\"></a>docker 入门命令</h4><p>docker 安装后,默认是没有任何镜像的,如果安装后执行了 docker run hello-world 的话,是有一个 hello-world 的镜像的.</p>\n<p><code>docker images</code> // 查看本地的镜像</p>\n<p>可以通过 pull 命令获取相关镜像</p>\n<p><code>docker search nginx</code> // 在 docker.io 上搜索 nginx 相关的镜像</p>\n<p><code>docker pull nginx:latest</code> // latest 代表取最新版本,要获取其他版本 docker pull nginx:xxxx</p>\n<p><code>docker run -itd --name nginx1.0 nginx</code> // -d: 后台启动容器;-i: 以交互模式运行容器，通常与 -t 同时使用;-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用; –name：容器的别名，默认为随机的,这儿为 nginx1.0</p>\n<pre><code>第一次使用run运行指定别名后,以后可通过docker start+ 别名的方式启动\n</code></pre><p><code>docker ps</code> // 查看正在运行的容器</p>\n<p><code>docker ps -a</code> // 查看所有容器</p>\n<p><code>docker ps -l</code> // 查看最近一次运行的容器</p>\n<p><code>docker exec -it nginx1.0 bash</code> // 进入 nginx1.0 容器的命令行</p>\n<p><code>docker start nginx1.0</code> // 启动 nginx1.0 容器</p>\n<p><code>docker stop nginx1.0</code> // 停止 nginx1.0 容器</p>\n<p><code>docker rm nginx1.0</code> // 删除 nginx1.0 容器</p>\n<h4 id=\"docker-网络\"><a href=\"#docker-网络\" class=\"headerlink\" title=\"docker 网络\"></a>docker 网络</h4><p>linux 使用 namespace 来进行资源的隔离 ，docker 的隔离性</p>\n<p>1.docker 的网路类型分为：</p>\n<p>Bridge 模式：桥接（默认的模式）</p>\n<p>host 模式：容器将不会获得独立的 network namespace，将和主机公用一个；即在 docker 中使用网络和主机上一样的；</p>\n<p>None：不与外界任何东西进行通讯</p>\n<p>2.采用 Bridge 的时候需要和主机通讯，就需要使用端口映射</p>\n<p>docker run -d –name nginx1.0 -p 8080:80 nginx # 主机的 8080 端口映射到容器中的 80 端口</p>\n<pre><code>多个端口映射可以跟多个-p,比如:-p 8080:80 -p 6379:6379\n</code></pre><h4 id=\"docker-镜像备份和导入镜像\"><a href=\"#docker-镜像备份和导入镜像\" class=\"headerlink\" title=\"docker 镜像备份和导入镜像\"></a>docker 镜像备份和导入镜像</h4><p><code>docker save -o /home/xxx/images/nginx.tar nginx1.0</code> // 将 nginx1.0 镜像备份到/home/xxx/images/目录下</p>\n<p><code>docker load --input /home/xxx/images/nginx.tar</code> // 导入镜像</p>\n<h4 id=\"docker挂载物理机本地目录\"><a href=\"#docker挂载物理机本地目录\" class=\"headerlink\" title=\"docker挂载物理机本地目录\"></a>docker挂载物理机本地目录</h4><p>docker可以支持把一个宿主机上的目录挂载到镜像里。</p>\n<p><code>docker run -itd -v /home/bz/Downloads:/home/Downloads nginx1.0</code> // 通过-v参数，冒号前为宿主机目录，必须为绝对路径，冒号后为镜像内挂载的路径</p>\n<p>默认挂载的路径权限为读写。如果指定为只读可以用：ro</p>\n<p><code>docker run -itd -v /home/bz/Downloads:/home/Downloads:ro nginx1.0</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"deepin-linux-安装最新版-docker\"><a href=\"#deepin-linux-安装最新版-docker\" class=\"headerlink\" title=\"deepin linux 安装最新版 docker\"></a>deepin linux 安装最新版 docker</h3><p>可以参考官放 wiki 文档进行安装,地址如下:</p>\n<p><a href=\"https://wiki.deepin.org/wiki/Docker#.E5.9C.A8_Deepin_.E4.B8.AD.E5.AE.89.E8.A3.85_Docker_.E6.9C.80.E6.96.B0.E7.89.88.E7.9A.84.E6.96.B9.E6.B3.95\" target=\"_blank\" rel=\"noopener\">https://wiki.deepin.org/wiki/Docker#.E5.9C.A8_Deepin_.E4.B8.AD.E5.AE.89.E8.A3.85_Docker_.E6.9C.80.E6.96.B0.E7.89.88.E7.9A.84.E6.96.B9.E6.B3.95</a></p>\n<p>但官网打开速度比较慢,另外关于最后一项禁止开启自启官方说的方式是无效的,笔者亲试至少在(deepin 15.10.1 基于 unstable 升级上来的)是无效的.所以将详情步骤记录如下:</p>\n<pre><code>注:执行apt命令之前,最好先执行一次更新仓库操作sudo apt update\n</code></pre><p>1.如果以前安装过老版本，要确保先卸载以前版本.</p>\n<p><code>sudo apt remove docker.io docker-engine</code></p>\n<p>2.安装密钥管理与下载相关的工具</p>\n<p>// 密钥管理（add-apt-repository ca-certificates 等）与下载（curl 等）相关的工具</p>\n<p><code>sudo apt-get install apt-transport-https ca-certificates curl python-software-properties software-properties-common</code></p>\n<p>3.下载并安装密钥</p>\n<p><code>curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -</code></p>\n<p>执行成功后返回 OK 即可.如果不成功的话,可能是网络问题,我这儿是处于翻墙状态,所以是能成功的.不能成功的话,可以按照官方 wiki 上说的使用国内镜像源<code>curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/debian/gpg | sudo apt-key add -</code></p>\n<p>4.查看密钥是否安装成功</p>\n<p><code>sudo apt-get fingerprint 0EBFCD88</code></p>\n<p>如果成功会提示</p>\n<p><code>pub 4096R/0EBFCD88 2017-02-22 Key fingerprint = 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88</code><br><code>uid Docker Release (CE deb) &lt;docker@docker.com&gt;</code><br><code>sub 4096R/F273FCD8 2017-02-22</code></p>\n<p>5.在 source.list 中添加 docker-ce 软件源</p>\n<pre><code>在此需要注意当前系统版本,执行 cat /etc/debian_version查看当前系统是基于debian的哪个版本.debian版本号和系统代号如下:\n</code></pre><table>\n<thead>\n<tr>\n<th>系统代号</th>\n<th>版本号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>squeeze</td>\n<td>6.x</td>\n</tr>\n<tr>\n<td>wheezy</td>\n<td>7.x</td>\n</tr>\n<tr>\n<td>jessie</td>\n<td>8.x</td>\n</tr>\n<tr>\n<td>stretch</td>\n<td>9.x</td>\n</tr>\n</tbody>\n</table>\n<p>deepin 15.10.x 是基于 debian9.0 的,所以加入源如下:</p>\n<p>sudo vim /etc/apt/sources.list</p>\n<p><code>deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/debian stretch stable</code></p>\n<p>6.更新仓库</p>\n<p><code>sudo apt update</code></p>\n<p>7.安装 docker-ce</p>\n<p><code>sudo apt install docker-ce</code></p>\n<pre><code>注:这一步网络不好可能会导致失败,多试几次总会成功的.\n</code></pre><p>8.启动 docker</p>\n<p><code>sudo systemctl start docker</code> 或者<br><code>service docker start</code></p>\n<p>9.查看安装的版本信息</p>\n<p><code>docker version</code></p>\n<p>10.验证 docker 是否被正确安装并且能够正常使用</p>\n<p><code>sudo docker run hello-world</code></p>\n<p>如果能够正常下载，并能够正常执行，则说明 docker 正常安装</p>\n<p>11.让普通用户也能运行 docker</p>\n<pre><code>默认情况下，普通用户运行 docker 会有权限问题，每次运行都得加 sudo，很麻烦。把你的账号加到 docker 用户组后就不用加 sudo 了：\n</code></pre><p><code>sudo usermod -aG docker test</code> // test 是用户名,替换为自己的,执行后注销登录</p>\n<p>12.docker service 默认是开机自启的,强迫症取消开机自启的</p>\n<pre><code>这一点,官方说的安装chkconfig来管理\n</code></pre><p>安装 chkconfig</p>\n<p><code>sudo apt install chkconfig</code></p>\n<p>移除自启</p>\n<p><code>sudo chkconfig --del docker</code></p>\n<pre><code>但是试了,重启无效无效.需要通过systemctl命令来禁止\n</code></pre><p><code>sudo systemctl disable docker</code></p>\n<h3 id=\"docker-使用初识\"><a href=\"#docker-使用初识\" class=\"headerlink\" title=\"docker 使用初识\"></a>docker 使用初识</h3><h4 id=\"docker-入门命令\"><a href=\"#docker-入门命令\" class=\"headerlink\" title=\"docker 入门命令\"></a>docker 入门命令</h4><p>docker 安装后,默认是没有任何镜像的,如果安装后执行了 docker run hello-world 的话,是有一个 hello-world 的镜像的.</p>\n<p><code>docker images</code> // 查看本地的镜像</p>\n<p>可以通过 pull 命令获取相关镜像</p>\n<p><code>docker search nginx</code> // 在 docker.io 上搜索 nginx 相关的镜像</p>\n<p><code>docker pull nginx:latest</code> // latest 代表取最新版本,要获取其他版本 docker pull nginx:xxxx</p>\n<p><code>docker run -itd --name nginx1.0 nginx</code> // -d: 后台启动容器;-i: 以交互模式运行容器，通常与 -t 同时使用;-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用; –name：容器的别名，默认为随机的,这儿为 nginx1.0</p>\n<pre><code>第一次使用run运行指定别名后,以后可通过docker start+ 别名的方式启动\n</code></pre><p><code>docker ps</code> // 查看正在运行的容器</p>\n<p><code>docker ps -a</code> // 查看所有容器</p>\n<p><code>docker ps -l</code> // 查看最近一次运行的容器</p>\n<p><code>docker exec -it nginx1.0 bash</code> // 进入 nginx1.0 容器的命令行</p>\n<p><code>docker start nginx1.0</code> // 启动 nginx1.0 容器</p>\n<p><code>docker stop nginx1.0</code> // 停止 nginx1.0 容器</p>\n<p><code>docker rm nginx1.0</code> // 删除 nginx1.0 容器</p>\n<h4 id=\"docker-网络\"><a href=\"#docker-网络\" class=\"headerlink\" title=\"docker 网络\"></a>docker 网络</h4><p>linux 使用 namespace 来进行资源的隔离 ，docker 的隔离性</p>\n<p>1.docker 的网路类型分为：</p>\n<p>Bridge 模式：桥接（默认的模式）</p>\n<p>host 模式：容器将不会获得独立的 network namespace，将和主机公用一个；即在 docker 中使用网络和主机上一样的；</p>\n<p>None：不与外界任何东西进行通讯</p>\n<p>2.采用 Bridge 的时候需要和主机通讯，就需要使用端口映射</p>\n<p>docker run -d –name nginx1.0 -p 8080:80 nginx # 主机的 8080 端口映射到容器中的 80 端口</p>\n<pre><code>多个端口映射可以跟多个-p,比如:-p 8080:80 -p 6379:6379\n</code></pre><h4 id=\"docker-镜像备份和导入镜像\"><a href=\"#docker-镜像备份和导入镜像\" class=\"headerlink\" title=\"docker 镜像备份和导入镜像\"></a>docker 镜像备份和导入镜像</h4><p><code>docker save -o /home/xxx/images/nginx.tar nginx1.0</code> // 将 nginx1.0 镜像备份到/home/xxx/images/目录下</p>\n<p><code>docker load --input /home/xxx/images/nginx.tar</code> // 导入镜像</p>\n<h4 id=\"docker挂载物理机本地目录\"><a href=\"#docker挂载物理机本地目录\" class=\"headerlink\" title=\"docker挂载物理机本地目录\"></a>docker挂载物理机本地目录</h4><p>docker可以支持把一个宿主机上的目录挂载到镜像里。</p>\n<p><code>docker run -itd -v /home/bz/Downloads:/home/Downloads nginx1.0</code> // 通过-v参数，冒号前为宿主机目录，必须为绝对路径，冒号后为镜像内挂载的路径</p>\n<p>默认挂载的路径权限为读写。如果指定为只读可以用：ro</p>\n<p><code>docker run -itd -v /home/bz/Downloads:/home/Downloads:ro nginx1.0</code></p>\n"},{"title":"git常用的使用总结","date":"2019-03-16T03:29:32.000Z","_content":"\n    摘要:Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目\n\n### 对一个已存在的远程仓库进行clone和提交代码操作\nclone代码\n>$ git clone [-b branchName] 远程地址 [filefolder name]\n\n>-b代表clone某个分支,后面跟分支的名称.代码clone到本地后,当前路径会多一个与git 远程项目名相同的文件夹(手工指定文件夹名除外).\n\n>$ cd 文件夹名\n\n提交代码:\n>$ git status // 查看当前工作目录的状态\n\n>$ git add . 或 git add -u 或 git add -A(git add --all的缩写) //添加要提交的文件到git暂存区. 相关区别:三条命令对应的git版本不一样也有区别.\n\n>git1.x 版本![](/images/git1.x.jpg)\n\n>git2.x 版本![](/images/git2.x.jpg)\n\n>使用2.x以上版本的git使用-a和.是一样的.本人通常使用.更加方便快捷\n\n>$ git status // 添加文件到暂存区后再次查看确保文件的状态\n\n>$ git commit -m \"注释\"\n\n>$ git remote -v // 查看当前已经存在的git 远程url\n\n>$ git push -u 远程名称 本地要提交的分支:远程分支 // 远程分支不存在的时候会自动在远程创建该名称分支\n\n### 已有代码在用户本地,远程不存在的情况\n>$ cd existing_folder\n\n>$ git init\n\n>$ git status\n\n>$ git remote add origin git@code.aliyun.com:baz/foo.git\n\n>$ git add .\n\n>$ git status\n\n>$ git commit -m \"注释\"\n\n>$ git push -u origin master:master // 提交本地master到远程master\n\n\n### 对远程初始化仓库有git history,本地代码也有git history的情况\n>针对远程本地都有git 提交的情况,比较特殊.比如阿里云code上面新建项目必须选择对应的模板,会进行对仓库初始化操作.而本地存在之前的项目(已经含有git记录,比如gitlab,coding之类的).推荐方式:先从远程clone下来.然后删除clone下来的文件夹下的文件(.git目录除外).然后commit->push提交到远程\n\n1.删除远程仓库不需要的文件\n\n>$ git clone alicodeurl xxx\n\n>$ cd xxx\n\n>//去资源文件管理器中手动删除除.git目录外的其他文件. linux/osx也可cd 目录再rm删除\n\n>$ git status\n\n>$ git add .\n\n>$ git status\n\n>$ git commit -m \"注释\"\n\n>$ git push -u origin master:master // 提交本地master到远程master\n\n2.对本地项目进行提交到远程\n\n>$ cd project filefolder\n\n>$ git remote add origin git@code.aliyun.com:baz/foo.git\n\n>$ git pull origin master --allow-unrelated-histories // 会弹出merge的编辑器,删除或者增加内容后退出\n\n>$ git add .\n\n>$ git commit -m \"注释\"\n\n>$ git push -u origin master:master // 提交本地master到远程master\n\n### 项目开发中的分支使用\n\n切换分支\n>$ git checkout 分支名称\n\n创建分支dev\n\n>$ git checkout -b dev  // 创建并进入到分支,git branch 可查看当前分支指针状态\n\n#### 注\n约定在Dev分支上面进行编码开发.上述的所有提交代码命令必须在dev分支上执行,最后的一句git push 换成以下命令\n\n>$ git push -u origin dev:dev // 提交本地dev到远程dev.第一次远程无dev会自动创建dev\n\n更新远程分支代码到本地:\n>$ git fetch origin dev // fetch远程dev分支代码 ..避免使用pull\n\n在当前分支合并fetch下面的代码\n>$ git merge origin/dev  // 合并从远程dev分支fetch下来的代码\n\n## 注意\n\n版本正式上线后,需要将dev分支发布到Master分支.采用以下命令:\n>$ git checkout master  // 切换到Master分支\n\n>$ git merge --no-ff dev // 对Dev分支进行合并\n\n>使用--no-ff参数后，会执行正常合并，在Master分支上生成一个新节点。为了保证版本演进的清晰，推荐采用这种做法\n\n\n### Git4个阶段的撤销操作\n\n>了解git阶段首选理解git的几个区:\n\n>工作区(working area),\n\n>暂存区(stage),\n\n>本地仓库(local repository),\n\n>远程仓库(remote repository).\n\n>每将文件存到不同的区的时候会产生一个状态,在加上最开始的一个状态总共5个状态.\n\n>未修改(Origin)\n\n>已修改(Modified)\n\n>已暂存(Staged)\n\n>已提交(Committed)\n\n>已推送(Pushed)\n\n##### 1.文件处于已修改的状态,即修改过文件.未暂存(add)\n\n>文件已修改,恢复到初始状态(未做任何修改状态)\n\n>$git checkout . 或者 $git reset --hard origin/dev    // 恢复到与远程dev保持一致的状态,相当于刚clone dev的状态\n\n##### 2.文件处于已暂存(stage),未提交(commit)\n\n>文件已经进行过git add . 操作,但是还未进行git commit操作\n\n>$git reset  // 恢复到已修改的状态\n\n>$git checkout . // 继续执行这条,就恢复到初始状态(未做任何修改状态)\n\n>如果要实现恢复到初始状态(未做任何修改状态),除了通过执行上面2步命令外,也可一直接执行下面这句,一步恢复到初始状态\n\n>$git reset --hard // 一步到初始状态\n\n##### 3.文件处于已提交(commit),未推送(push)\n\n>这种情况下,代表已经提交到本地仓库了,既然已经污染了你的本地仓库，那么就从远程仓库把代码取回来吧.恢复到初始状态了,\n\n>$git reset --hard origin/dev  //<b>直接恢复到初始化状态,但已做的修改全部会丢失</b>\n\n##### 4.文件处于已推送(push)\n\n>既git add了，又git commit了，并且还git push了，这时代码已经进入远程仓库。如果想恢复的话.由于本地仓库和远程仓库是等价的，只需要先恢复本地仓库，再强制push到远程仓库就好了\n\n>$git reset --hard HEAD^   //将本地恢复到初始状态,<b>之前已做的修改全部会丢失</b>\n\n>$git push -f // 将本地仓库初始化后推送到远程,将远程保持和本地一致\n\n##### 注:只要还未影响到本地仓库(local repository)的时候,即没有commit时,都可以恢复到已修改的状态.一旦commit后,影响了本地仓库,就只能恢复到上一次的本地仓库的版本.所做的修改都会丢失..\n\n###git撤销暂存区的文件\n>有时候执行git add . 后,将当前目录下的所有改动文件都添加到了暂存区,此时如果有三两个文件是不需要添加进暂存区的,可以执行以下命令将文件从暂存区移除\n>$git rm --cached 文件名\n\n### git tag的常用使用\n\n>Git可以对某个版本打上标签(tag)，表示本版本为发行版\n\n>$git tag // 查看所有标签\n\n>$git tag -l 1.0.*  // 打印符合检索条件的标签\n\n>$git checkout 1.0.0 // 查看对应标签状态\n\n>$git tag -a 1.0.0 -m \"1.0.0版本\" // 创建带备注标签(推荐)\n\n>$git tag -a 1.0.0 0c3b62d -m \"备注信息\" // 针对特定commit版本SHA创建标签\n\n>$git tag -d 1.0.0 // 删除本地1.0.0标签\n\n>$git push origin --tags // 将本地所有标签发布到远程仓库\n\n>$git push origin 1.0.0 // 指定标签版本(1.0.0)发送\n\n>$git push origin --delete 1.0.0 // 删除远程仓库对应标签,此命令需要Git版本 > V1.7.0\n\n>$git push origin :refs/tags/1.0.0 // 删除远程仓库对应标签,此命令需要Git版本 < V1.7.0\n","source":"_posts/git常用的使用总结.md","raw":"---\ntitle: git常用的使用总结\ndate: 2019-03-16 11:29:32\ntags:\n  - Git\n---\n\n    摘要:Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目\n\n### 对一个已存在的远程仓库进行clone和提交代码操作\nclone代码\n>$ git clone [-b branchName] 远程地址 [filefolder name]\n\n>-b代表clone某个分支,后面跟分支的名称.代码clone到本地后,当前路径会多一个与git 远程项目名相同的文件夹(手工指定文件夹名除外).\n\n>$ cd 文件夹名\n\n提交代码:\n>$ git status // 查看当前工作目录的状态\n\n>$ git add . 或 git add -u 或 git add -A(git add --all的缩写) //添加要提交的文件到git暂存区. 相关区别:三条命令对应的git版本不一样也有区别.\n\n>git1.x 版本![](/images/git1.x.jpg)\n\n>git2.x 版本![](/images/git2.x.jpg)\n\n>使用2.x以上版本的git使用-a和.是一样的.本人通常使用.更加方便快捷\n\n>$ git status // 添加文件到暂存区后再次查看确保文件的状态\n\n>$ git commit -m \"注释\"\n\n>$ git remote -v // 查看当前已经存在的git 远程url\n\n>$ git push -u 远程名称 本地要提交的分支:远程分支 // 远程分支不存在的时候会自动在远程创建该名称分支\n\n### 已有代码在用户本地,远程不存在的情况\n>$ cd existing_folder\n\n>$ git init\n\n>$ git status\n\n>$ git remote add origin git@code.aliyun.com:baz/foo.git\n\n>$ git add .\n\n>$ git status\n\n>$ git commit -m \"注释\"\n\n>$ git push -u origin master:master // 提交本地master到远程master\n\n\n### 对远程初始化仓库有git history,本地代码也有git history的情况\n>针对远程本地都有git 提交的情况,比较特殊.比如阿里云code上面新建项目必须选择对应的模板,会进行对仓库初始化操作.而本地存在之前的项目(已经含有git记录,比如gitlab,coding之类的).推荐方式:先从远程clone下来.然后删除clone下来的文件夹下的文件(.git目录除外).然后commit->push提交到远程\n\n1.删除远程仓库不需要的文件\n\n>$ git clone alicodeurl xxx\n\n>$ cd xxx\n\n>//去资源文件管理器中手动删除除.git目录外的其他文件. linux/osx也可cd 目录再rm删除\n\n>$ git status\n\n>$ git add .\n\n>$ git status\n\n>$ git commit -m \"注释\"\n\n>$ git push -u origin master:master // 提交本地master到远程master\n\n2.对本地项目进行提交到远程\n\n>$ cd project filefolder\n\n>$ git remote add origin git@code.aliyun.com:baz/foo.git\n\n>$ git pull origin master --allow-unrelated-histories // 会弹出merge的编辑器,删除或者增加内容后退出\n\n>$ git add .\n\n>$ git commit -m \"注释\"\n\n>$ git push -u origin master:master // 提交本地master到远程master\n\n### 项目开发中的分支使用\n\n切换分支\n>$ git checkout 分支名称\n\n创建分支dev\n\n>$ git checkout -b dev  // 创建并进入到分支,git branch 可查看当前分支指针状态\n\n#### 注\n约定在Dev分支上面进行编码开发.上述的所有提交代码命令必须在dev分支上执行,最后的一句git push 换成以下命令\n\n>$ git push -u origin dev:dev // 提交本地dev到远程dev.第一次远程无dev会自动创建dev\n\n更新远程分支代码到本地:\n>$ git fetch origin dev // fetch远程dev分支代码 ..避免使用pull\n\n在当前分支合并fetch下面的代码\n>$ git merge origin/dev  // 合并从远程dev分支fetch下来的代码\n\n## 注意\n\n版本正式上线后,需要将dev分支发布到Master分支.采用以下命令:\n>$ git checkout master  // 切换到Master分支\n\n>$ git merge --no-ff dev // 对Dev分支进行合并\n\n>使用--no-ff参数后，会执行正常合并，在Master分支上生成一个新节点。为了保证版本演进的清晰，推荐采用这种做法\n\n\n### Git4个阶段的撤销操作\n\n>了解git阶段首选理解git的几个区:\n\n>工作区(working area),\n\n>暂存区(stage),\n\n>本地仓库(local repository),\n\n>远程仓库(remote repository).\n\n>每将文件存到不同的区的时候会产生一个状态,在加上最开始的一个状态总共5个状态.\n\n>未修改(Origin)\n\n>已修改(Modified)\n\n>已暂存(Staged)\n\n>已提交(Committed)\n\n>已推送(Pushed)\n\n##### 1.文件处于已修改的状态,即修改过文件.未暂存(add)\n\n>文件已修改,恢复到初始状态(未做任何修改状态)\n\n>$git checkout . 或者 $git reset --hard origin/dev    // 恢复到与远程dev保持一致的状态,相当于刚clone dev的状态\n\n##### 2.文件处于已暂存(stage),未提交(commit)\n\n>文件已经进行过git add . 操作,但是还未进行git commit操作\n\n>$git reset  // 恢复到已修改的状态\n\n>$git checkout . // 继续执行这条,就恢复到初始状态(未做任何修改状态)\n\n>如果要实现恢复到初始状态(未做任何修改状态),除了通过执行上面2步命令外,也可一直接执行下面这句,一步恢复到初始状态\n\n>$git reset --hard // 一步到初始状态\n\n##### 3.文件处于已提交(commit),未推送(push)\n\n>这种情况下,代表已经提交到本地仓库了,既然已经污染了你的本地仓库，那么就从远程仓库把代码取回来吧.恢复到初始状态了,\n\n>$git reset --hard origin/dev  //<b>直接恢复到初始化状态,但已做的修改全部会丢失</b>\n\n##### 4.文件处于已推送(push)\n\n>既git add了，又git commit了，并且还git push了，这时代码已经进入远程仓库。如果想恢复的话.由于本地仓库和远程仓库是等价的，只需要先恢复本地仓库，再强制push到远程仓库就好了\n\n>$git reset --hard HEAD^   //将本地恢复到初始状态,<b>之前已做的修改全部会丢失</b>\n\n>$git push -f // 将本地仓库初始化后推送到远程,将远程保持和本地一致\n\n##### 注:只要还未影响到本地仓库(local repository)的时候,即没有commit时,都可以恢复到已修改的状态.一旦commit后,影响了本地仓库,就只能恢复到上一次的本地仓库的版本.所做的修改都会丢失..\n\n###git撤销暂存区的文件\n>有时候执行git add . 后,将当前目录下的所有改动文件都添加到了暂存区,此时如果有三两个文件是不需要添加进暂存区的,可以执行以下命令将文件从暂存区移除\n>$git rm --cached 文件名\n\n### git tag的常用使用\n\n>Git可以对某个版本打上标签(tag)，表示本版本为发行版\n\n>$git tag // 查看所有标签\n\n>$git tag -l 1.0.*  // 打印符合检索条件的标签\n\n>$git checkout 1.0.0 // 查看对应标签状态\n\n>$git tag -a 1.0.0 -m \"1.0.0版本\" // 创建带备注标签(推荐)\n\n>$git tag -a 1.0.0 0c3b62d -m \"备注信息\" // 针对特定commit版本SHA创建标签\n\n>$git tag -d 1.0.0 // 删除本地1.0.0标签\n\n>$git push origin --tags // 将本地所有标签发布到远程仓库\n\n>$git push origin 1.0.0 // 指定标签版本(1.0.0)发送\n\n>$git push origin --delete 1.0.0 // 删除远程仓库对应标签,此命令需要Git版本 > V1.7.0\n\n>$git push origin :refs/tags/1.0.0 // 删除远程仓库对应标签,此命令需要Git版本 < V1.7.0\n","slug":"git常用的使用总结","published":1,"updated":"2019-09-02T07:37:22.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck024pnvp000oy6fg338x0rfw","content":"<pre><code>摘要:Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目\n</code></pre><h3 id=\"对一个已存在的远程仓库进行clone和提交代码操作\"><a href=\"#对一个已存在的远程仓库进行clone和提交代码操作\" class=\"headerlink\" title=\"对一个已存在的远程仓库进行clone和提交代码操作\"></a>对一个已存在的远程仓库进行clone和提交代码操作</h3><p>clone代码</p>\n<blockquote>\n<p>$ git clone [-b branchName] 远程地址 [filefolder name]</p>\n</blockquote>\n<blockquote>\n<p>-b代表clone某个分支,后面跟分支的名称.代码clone到本地后,当前路径会多一个与git 远程项目名相同的文件夹(手工指定文件夹名除外).</p>\n</blockquote>\n<blockquote>\n<p>$ cd 文件夹名</p>\n</blockquote>\n<p>提交代码:</p>\n<blockquote>\n<p>$ git status // 查看当前工作目录的状态</p>\n</blockquote>\n<blockquote>\n<p>$ git add . 或 git add -u 或 git add -A(git add –all的缩写) //添加要提交的文件到git暂存区. 相关区别:三条命令对应的git版本不一样也有区别.</p>\n</blockquote>\n<blockquote>\n<p>git1.x 版本<img src=\"/images/git1.x.jpg\" alt></p>\n</blockquote>\n<blockquote>\n<p>git2.x 版本<img src=\"/images/git2.x.jpg\" alt></p>\n</blockquote>\n<blockquote>\n<p>使用2.x以上版本的git使用-a和.是一样的.本人通常使用.更加方便快捷</p>\n</blockquote>\n<blockquote>\n<p>$ git status // 添加文件到暂存区后再次查看确保文件的状态</p>\n</blockquote>\n<blockquote>\n<p>$ git commit -m “注释”</p>\n</blockquote>\n<blockquote>\n<p>$ git remote -v // 查看当前已经存在的git 远程url</p>\n</blockquote>\n<blockquote>\n<p>$ git push -u 远程名称 本地要提交的分支:远程分支 // 远程分支不存在的时候会自动在远程创建该名称分支</p>\n</blockquote>\n<h3 id=\"已有代码在用户本地-远程不存在的情况\"><a href=\"#已有代码在用户本地-远程不存在的情况\" class=\"headerlink\" title=\"已有代码在用户本地,远程不存在的情况\"></a>已有代码在用户本地,远程不存在的情况</h3><blockquote>\n<p>$ cd existing_folder</p>\n</blockquote>\n<blockquote>\n<p>$ git init</p>\n</blockquote>\n<blockquote>\n<p>$ git status</p>\n</blockquote>\n<blockquote>\n<p>$ git remote add origin <a href=\"mailto:git@code.aliyun.com\" target=\"_blank\" rel=\"noopener\">git@code.aliyun.com</a>:baz/foo.git</p>\n</blockquote>\n<blockquote>\n<p>$ git add .</p>\n</blockquote>\n<blockquote>\n<p>$ git status</p>\n</blockquote>\n<blockquote>\n<p>$ git commit -m “注释”</p>\n</blockquote>\n<blockquote>\n<p>$ git push -u origin master:master // 提交本地master到远程master</p>\n</blockquote>\n<h3 id=\"对远程初始化仓库有git-history-本地代码也有git-history的情况\"><a href=\"#对远程初始化仓库有git-history-本地代码也有git-history的情况\" class=\"headerlink\" title=\"对远程初始化仓库有git history,本地代码也有git history的情况\"></a>对远程初始化仓库有git history,本地代码也有git history的情况</h3><blockquote>\n<p>针对远程本地都有git 提交的情况,比较特殊.比如阿里云code上面新建项目必须选择对应的模板,会进行对仓库初始化操作.而本地存在之前的项目(已经含有git记录,比如gitlab,coding之类的).推荐方式:先从远程clone下来.然后删除clone下来的文件夹下的文件(.git目录除外).然后commit-&gt;push提交到远程</p>\n</blockquote>\n<p>1.删除远程仓库不需要的文件</p>\n<blockquote>\n<p>$ git clone alicodeurl xxx</p>\n</blockquote>\n<blockquote>\n<p>$ cd xxx</p>\n</blockquote>\n<blockquote>\n<p>//去资源文件管理器中手动删除除.git目录外的其他文件. linux/osx也可cd 目录再rm删除</p>\n</blockquote>\n<blockquote>\n<p>$ git status</p>\n</blockquote>\n<blockquote>\n<p>$ git add .</p>\n</blockquote>\n<blockquote>\n<p>$ git status</p>\n</blockquote>\n<blockquote>\n<p>$ git commit -m “注释”</p>\n</blockquote>\n<blockquote>\n<p>$ git push -u origin master:master // 提交本地master到远程master</p>\n</blockquote>\n<p>2.对本地项目进行提交到远程</p>\n<blockquote>\n<p>$ cd project filefolder</p>\n</blockquote>\n<blockquote>\n<p>$ git remote add origin <a href=\"mailto:git@code.aliyun.com\" target=\"_blank\" rel=\"noopener\">git@code.aliyun.com</a>:baz/foo.git</p>\n</blockquote>\n<blockquote>\n<p>$ git pull origin master –allow-unrelated-histories // 会弹出merge的编辑器,删除或者增加内容后退出</p>\n</blockquote>\n<blockquote>\n<p>$ git add .</p>\n</blockquote>\n<blockquote>\n<p>$ git commit -m “注释”</p>\n</blockquote>\n<blockquote>\n<p>$ git push -u origin master:master // 提交本地master到远程master</p>\n</blockquote>\n<h3 id=\"项目开发中的分支使用\"><a href=\"#项目开发中的分支使用\" class=\"headerlink\" title=\"项目开发中的分支使用\"></a>项目开发中的分支使用</h3><p>切换分支</p>\n<blockquote>\n<p>$ git checkout 分支名称</p>\n</blockquote>\n<p>创建分支dev</p>\n<blockquote>\n<p>$ git checkout -b dev  // 创建并进入到分支,git branch 可查看当前分支指针状态</p>\n</blockquote>\n<h4 id=\"注\"><a href=\"#注\" class=\"headerlink\" title=\"注\"></a>注</h4><p>约定在Dev分支上面进行编码开发.上述的所有提交代码命令必须在dev分支上执行,最后的一句git push 换成以下命令</p>\n<blockquote>\n<p>$ git push -u origin dev:dev // 提交本地dev到远程dev.第一次远程无dev会自动创建dev</p>\n</blockquote>\n<p>更新远程分支代码到本地:</p>\n<blockquote>\n<p>$ git fetch origin dev // fetch远程dev分支代码 ..避免使用pull</p>\n</blockquote>\n<p>在当前分支合并fetch下面的代码</p>\n<blockquote>\n<p>$ git merge origin/dev  // 合并从远程dev分支fetch下来的代码</p>\n</blockquote>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>版本正式上线后,需要将dev分支发布到Master分支.采用以下命令:</p>\n<blockquote>\n<p>$ git checkout master  // 切换到Master分支</p>\n</blockquote>\n<blockquote>\n<p>$ git merge –no-ff dev // 对Dev分支进行合并</p>\n</blockquote>\n<blockquote>\n<p>使用–no-ff参数后，会执行正常合并，在Master分支上生成一个新节点。为了保证版本演进的清晰，推荐采用这种做法</p>\n</blockquote>\n<h3 id=\"Git4个阶段的撤销操作\"><a href=\"#Git4个阶段的撤销操作\" class=\"headerlink\" title=\"Git4个阶段的撤销操作\"></a>Git4个阶段的撤销操作</h3><blockquote>\n<p>了解git阶段首选理解git的几个区:</p>\n</blockquote>\n<blockquote>\n<p>工作区(working area),</p>\n</blockquote>\n<blockquote>\n<p>暂存区(stage),</p>\n</blockquote>\n<blockquote>\n<p>本地仓库(local repository),</p>\n</blockquote>\n<blockquote>\n<p>远程仓库(remote repository).</p>\n</blockquote>\n<blockquote>\n<p>每将文件存到不同的区的时候会产生一个状态,在加上最开始的一个状态总共5个状态.</p>\n</blockquote>\n<blockquote>\n<p>未修改(Origin)</p>\n</blockquote>\n<blockquote>\n<p>已修改(Modified)</p>\n</blockquote>\n<blockquote>\n<p>已暂存(Staged)</p>\n</blockquote>\n<blockquote>\n<p>已提交(Committed)</p>\n</blockquote>\n<blockquote>\n<p>已推送(Pushed)</p>\n</blockquote>\n<h5 id=\"1-文件处于已修改的状态-即修改过文件-未暂存-add\"><a href=\"#1-文件处于已修改的状态-即修改过文件-未暂存-add\" class=\"headerlink\" title=\"1.文件处于已修改的状态,即修改过文件.未暂存(add)\"></a>1.文件处于已修改的状态,即修改过文件.未暂存(add)</h5><blockquote>\n<p>文件已修改,恢复到初始状态(未做任何修改状态)</p>\n</blockquote>\n<blockquote>\n<p>$git checkout . 或者 $git reset –hard origin/dev    // 恢复到与远程dev保持一致的状态,相当于刚clone dev的状态</p>\n</blockquote>\n<h5 id=\"2-文件处于已暂存-stage-未提交-commit\"><a href=\"#2-文件处于已暂存-stage-未提交-commit\" class=\"headerlink\" title=\"2.文件处于已暂存(stage),未提交(commit)\"></a>2.文件处于已暂存(stage),未提交(commit)</h5><blockquote>\n<p>文件已经进行过git add . 操作,但是还未进行git commit操作</p>\n</blockquote>\n<blockquote>\n<p>$git reset  // 恢复到已修改的状态</p>\n</blockquote>\n<blockquote>\n<p>$git checkout . // 继续执行这条,就恢复到初始状态(未做任何修改状态)</p>\n</blockquote>\n<blockquote>\n<p>如果要实现恢复到初始状态(未做任何修改状态),除了通过执行上面2步命令外,也可一直接执行下面这句,一步恢复到初始状态</p>\n</blockquote>\n<blockquote>\n<p>$git reset –hard // 一步到初始状态</p>\n</blockquote>\n<h5 id=\"3-文件处于已提交-commit-未推送-push\"><a href=\"#3-文件处于已提交-commit-未推送-push\" class=\"headerlink\" title=\"3.文件处于已提交(commit),未推送(push)\"></a>3.文件处于已提交(commit),未推送(push)</h5><blockquote>\n<p>这种情况下,代表已经提交到本地仓库了,既然已经污染了你的本地仓库，那么就从远程仓库把代码取回来吧.恢复到初始状态了,</p>\n</blockquote>\n<blockquote>\n<p>$git reset –hard origin/dev  //<b>直接恢复到初始化状态,但已做的修改全部会丢失</b></p>\n</blockquote>\n<h5 id=\"4-文件处于已推送-push\"><a href=\"#4-文件处于已推送-push\" class=\"headerlink\" title=\"4.文件处于已推送(push)\"></a>4.文件处于已推送(push)</h5><blockquote>\n<p>既git add了，又git commit了，并且还git push了，这时代码已经进入远程仓库。如果想恢复的话.由于本地仓库和远程仓库是等价的，只需要先恢复本地仓库，再强制push到远程仓库就好了</p>\n</blockquote>\n<blockquote>\n<p>$git reset –hard HEAD^   //将本地恢复到初始状态,<b>之前已做的修改全部会丢失</b></p>\n</blockquote>\n<blockquote>\n<p>$git push -f // 将本地仓库初始化后推送到远程,将远程保持和本地一致</p>\n</blockquote>\n<h5 id=\"注-只要还未影响到本地仓库-local-repository-的时候-即没有commit时-都可以恢复到已修改的状态-一旦commit后-影响了本地仓库-就只能恢复到上一次的本地仓库的版本-所做的修改都会丢失\"><a href=\"#注-只要还未影响到本地仓库-local-repository-的时候-即没有commit时-都可以恢复到已修改的状态-一旦commit后-影响了本地仓库-就只能恢复到上一次的本地仓库的版本-所做的修改都会丢失\" class=\"headerlink\" title=\"注:只要还未影响到本地仓库(local repository)的时候,即没有commit时,都可以恢复到已修改的状态.一旦commit后,影响了本地仓库,就只能恢复到上一次的本地仓库的版本.所做的修改都会丢失..\"></a>注:只要还未影响到本地仓库(local repository)的时候,即没有commit时,都可以恢复到已修改的状态.一旦commit后,影响了本地仓库,就只能恢复到上一次的本地仓库的版本.所做的修改都会丢失..</h5><p>###git撤销暂存区的文件</p>\n<blockquote>\n<p>有时候执行git add . 后,将当前目录下的所有改动文件都添加到了暂存区,此时如果有三两个文件是不需要添加进暂存区的,可以执行以下命令将文件从暂存区移除<br>$git rm –cached 文件名</p>\n</blockquote>\n<h3 id=\"git-tag的常用使用\"><a href=\"#git-tag的常用使用\" class=\"headerlink\" title=\"git tag的常用使用\"></a>git tag的常用使用</h3><blockquote>\n<p>Git可以对某个版本打上标签(tag)，表示本版本为发行版</p>\n</blockquote>\n<blockquote>\n<p>$git tag // 查看所有标签</p>\n</blockquote>\n<blockquote>\n<p>$git tag -l 1.0.*  // 打印符合检索条件的标签</p>\n</blockquote>\n<blockquote>\n<p>$git checkout 1.0.0 // 查看对应标签状态</p>\n</blockquote>\n<blockquote>\n<p>$git tag -a 1.0.0 -m “1.0.0版本” // 创建带备注标签(推荐)</p>\n</blockquote>\n<blockquote>\n<p>$git tag -a 1.0.0 0c3b62d -m “备注信息” // 针对特定commit版本SHA创建标签</p>\n</blockquote>\n<blockquote>\n<p>$git tag -d 1.0.0 // 删除本地1.0.0标签</p>\n</blockquote>\n<blockquote>\n<p>$git push origin –tags // 将本地所有标签发布到远程仓库</p>\n</blockquote>\n<blockquote>\n<p>$git push origin 1.0.0 // 指定标签版本(1.0.0)发送</p>\n</blockquote>\n<blockquote>\n<p>$git push origin –delete 1.0.0 // 删除远程仓库对应标签,此命令需要Git版本 &gt; V1.7.0</p>\n</blockquote>\n<blockquote>\n<p>$git push origin :refs/tags/1.0.0 // 删除远程仓库对应标签,此命令需要Git版本 &lt; V1.7.0</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>摘要:Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目\n</code></pre><h3 id=\"对一个已存在的远程仓库进行clone和提交代码操作\"><a href=\"#对一个已存在的远程仓库进行clone和提交代码操作\" class=\"headerlink\" title=\"对一个已存在的远程仓库进行clone和提交代码操作\"></a>对一个已存在的远程仓库进行clone和提交代码操作</h3><p>clone代码</p>\n<blockquote>\n<p>$ git clone [-b branchName] 远程地址 [filefolder name]</p>\n</blockquote>\n<blockquote>\n<p>-b代表clone某个分支,后面跟分支的名称.代码clone到本地后,当前路径会多一个与git 远程项目名相同的文件夹(手工指定文件夹名除外).</p>\n</blockquote>\n<blockquote>\n<p>$ cd 文件夹名</p>\n</blockquote>\n<p>提交代码:</p>\n<blockquote>\n<p>$ git status // 查看当前工作目录的状态</p>\n</blockquote>\n<blockquote>\n<p>$ git add . 或 git add -u 或 git add -A(git add –all的缩写) //添加要提交的文件到git暂存区. 相关区别:三条命令对应的git版本不一样也有区别.</p>\n</blockquote>\n<blockquote>\n<p>git1.x 版本<img src=\"/images/git1.x.jpg\" alt></p>\n</blockquote>\n<blockquote>\n<p>git2.x 版本<img src=\"/images/git2.x.jpg\" alt></p>\n</blockquote>\n<blockquote>\n<p>使用2.x以上版本的git使用-a和.是一样的.本人通常使用.更加方便快捷</p>\n</blockquote>\n<blockquote>\n<p>$ git status // 添加文件到暂存区后再次查看确保文件的状态</p>\n</blockquote>\n<blockquote>\n<p>$ git commit -m “注释”</p>\n</blockquote>\n<blockquote>\n<p>$ git remote -v // 查看当前已经存在的git 远程url</p>\n</blockquote>\n<blockquote>\n<p>$ git push -u 远程名称 本地要提交的分支:远程分支 // 远程分支不存在的时候会自动在远程创建该名称分支</p>\n</blockquote>\n<h3 id=\"已有代码在用户本地-远程不存在的情况\"><a href=\"#已有代码在用户本地-远程不存在的情况\" class=\"headerlink\" title=\"已有代码在用户本地,远程不存在的情况\"></a>已有代码在用户本地,远程不存在的情况</h3><blockquote>\n<p>$ cd existing_folder</p>\n</blockquote>\n<blockquote>\n<p>$ git init</p>\n</blockquote>\n<blockquote>\n<p>$ git status</p>\n</blockquote>\n<blockquote>\n<p>$ git remote add origin <a href=\"mailto:git@code.aliyun.com\" target=\"_blank\" rel=\"noopener\">git@code.aliyun.com</a>:baz/foo.git</p>\n</blockquote>\n<blockquote>\n<p>$ git add .</p>\n</blockquote>\n<blockquote>\n<p>$ git status</p>\n</blockquote>\n<blockquote>\n<p>$ git commit -m “注释”</p>\n</blockquote>\n<blockquote>\n<p>$ git push -u origin master:master // 提交本地master到远程master</p>\n</blockquote>\n<h3 id=\"对远程初始化仓库有git-history-本地代码也有git-history的情况\"><a href=\"#对远程初始化仓库有git-history-本地代码也有git-history的情况\" class=\"headerlink\" title=\"对远程初始化仓库有git history,本地代码也有git history的情况\"></a>对远程初始化仓库有git history,本地代码也有git history的情况</h3><blockquote>\n<p>针对远程本地都有git 提交的情况,比较特殊.比如阿里云code上面新建项目必须选择对应的模板,会进行对仓库初始化操作.而本地存在之前的项目(已经含有git记录,比如gitlab,coding之类的).推荐方式:先从远程clone下来.然后删除clone下来的文件夹下的文件(.git目录除外).然后commit-&gt;push提交到远程</p>\n</blockquote>\n<p>1.删除远程仓库不需要的文件</p>\n<blockquote>\n<p>$ git clone alicodeurl xxx</p>\n</blockquote>\n<blockquote>\n<p>$ cd xxx</p>\n</blockquote>\n<blockquote>\n<p>//去资源文件管理器中手动删除除.git目录外的其他文件. linux/osx也可cd 目录再rm删除</p>\n</blockquote>\n<blockquote>\n<p>$ git status</p>\n</blockquote>\n<blockquote>\n<p>$ git add .</p>\n</blockquote>\n<blockquote>\n<p>$ git status</p>\n</blockquote>\n<blockquote>\n<p>$ git commit -m “注释”</p>\n</blockquote>\n<blockquote>\n<p>$ git push -u origin master:master // 提交本地master到远程master</p>\n</blockquote>\n<p>2.对本地项目进行提交到远程</p>\n<blockquote>\n<p>$ cd project filefolder</p>\n</blockquote>\n<blockquote>\n<p>$ git remote add origin <a href=\"mailto:git@code.aliyun.com\" target=\"_blank\" rel=\"noopener\">git@code.aliyun.com</a>:baz/foo.git</p>\n</blockquote>\n<blockquote>\n<p>$ git pull origin master –allow-unrelated-histories // 会弹出merge的编辑器,删除或者增加内容后退出</p>\n</blockquote>\n<blockquote>\n<p>$ git add .</p>\n</blockquote>\n<blockquote>\n<p>$ git commit -m “注释”</p>\n</blockquote>\n<blockquote>\n<p>$ git push -u origin master:master // 提交本地master到远程master</p>\n</blockquote>\n<h3 id=\"项目开发中的分支使用\"><a href=\"#项目开发中的分支使用\" class=\"headerlink\" title=\"项目开发中的分支使用\"></a>项目开发中的分支使用</h3><p>切换分支</p>\n<blockquote>\n<p>$ git checkout 分支名称</p>\n</blockquote>\n<p>创建分支dev</p>\n<blockquote>\n<p>$ git checkout -b dev  // 创建并进入到分支,git branch 可查看当前分支指针状态</p>\n</blockquote>\n<h4 id=\"注\"><a href=\"#注\" class=\"headerlink\" title=\"注\"></a>注</h4><p>约定在Dev分支上面进行编码开发.上述的所有提交代码命令必须在dev分支上执行,最后的一句git push 换成以下命令</p>\n<blockquote>\n<p>$ git push -u origin dev:dev // 提交本地dev到远程dev.第一次远程无dev会自动创建dev</p>\n</blockquote>\n<p>更新远程分支代码到本地:</p>\n<blockquote>\n<p>$ git fetch origin dev // fetch远程dev分支代码 ..避免使用pull</p>\n</blockquote>\n<p>在当前分支合并fetch下面的代码</p>\n<blockquote>\n<p>$ git merge origin/dev  // 合并从远程dev分支fetch下来的代码</p>\n</blockquote>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>版本正式上线后,需要将dev分支发布到Master分支.采用以下命令:</p>\n<blockquote>\n<p>$ git checkout master  // 切换到Master分支</p>\n</blockquote>\n<blockquote>\n<p>$ git merge –no-ff dev // 对Dev分支进行合并</p>\n</blockquote>\n<blockquote>\n<p>使用–no-ff参数后，会执行正常合并，在Master分支上生成一个新节点。为了保证版本演进的清晰，推荐采用这种做法</p>\n</blockquote>\n<h3 id=\"Git4个阶段的撤销操作\"><a href=\"#Git4个阶段的撤销操作\" class=\"headerlink\" title=\"Git4个阶段的撤销操作\"></a>Git4个阶段的撤销操作</h3><blockquote>\n<p>了解git阶段首选理解git的几个区:</p>\n</blockquote>\n<blockquote>\n<p>工作区(working area),</p>\n</blockquote>\n<blockquote>\n<p>暂存区(stage),</p>\n</blockquote>\n<blockquote>\n<p>本地仓库(local repository),</p>\n</blockquote>\n<blockquote>\n<p>远程仓库(remote repository).</p>\n</blockquote>\n<blockquote>\n<p>每将文件存到不同的区的时候会产生一个状态,在加上最开始的一个状态总共5个状态.</p>\n</blockquote>\n<blockquote>\n<p>未修改(Origin)</p>\n</blockquote>\n<blockquote>\n<p>已修改(Modified)</p>\n</blockquote>\n<blockquote>\n<p>已暂存(Staged)</p>\n</blockquote>\n<blockquote>\n<p>已提交(Committed)</p>\n</blockquote>\n<blockquote>\n<p>已推送(Pushed)</p>\n</blockquote>\n<h5 id=\"1-文件处于已修改的状态-即修改过文件-未暂存-add\"><a href=\"#1-文件处于已修改的状态-即修改过文件-未暂存-add\" class=\"headerlink\" title=\"1.文件处于已修改的状态,即修改过文件.未暂存(add)\"></a>1.文件处于已修改的状态,即修改过文件.未暂存(add)</h5><blockquote>\n<p>文件已修改,恢复到初始状态(未做任何修改状态)</p>\n</blockquote>\n<blockquote>\n<p>$git checkout . 或者 $git reset –hard origin/dev    // 恢复到与远程dev保持一致的状态,相当于刚clone dev的状态</p>\n</blockquote>\n<h5 id=\"2-文件处于已暂存-stage-未提交-commit\"><a href=\"#2-文件处于已暂存-stage-未提交-commit\" class=\"headerlink\" title=\"2.文件处于已暂存(stage),未提交(commit)\"></a>2.文件处于已暂存(stage),未提交(commit)</h5><blockquote>\n<p>文件已经进行过git add . 操作,但是还未进行git commit操作</p>\n</blockquote>\n<blockquote>\n<p>$git reset  // 恢复到已修改的状态</p>\n</blockquote>\n<blockquote>\n<p>$git checkout . // 继续执行这条,就恢复到初始状态(未做任何修改状态)</p>\n</blockquote>\n<blockquote>\n<p>如果要实现恢复到初始状态(未做任何修改状态),除了通过执行上面2步命令外,也可一直接执行下面这句,一步恢复到初始状态</p>\n</blockquote>\n<blockquote>\n<p>$git reset –hard // 一步到初始状态</p>\n</blockquote>\n<h5 id=\"3-文件处于已提交-commit-未推送-push\"><a href=\"#3-文件处于已提交-commit-未推送-push\" class=\"headerlink\" title=\"3.文件处于已提交(commit),未推送(push)\"></a>3.文件处于已提交(commit),未推送(push)</h5><blockquote>\n<p>这种情况下,代表已经提交到本地仓库了,既然已经污染了你的本地仓库，那么就从远程仓库把代码取回来吧.恢复到初始状态了,</p>\n</blockquote>\n<blockquote>\n<p>$git reset –hard origin/dev  //<b>直接恢复到初始化状态,但已做的修改全部会丢失</b></p>\n</blockquote>\n<h5 id=\"4-文件处于已推送-push\"><a href=\"#4-文件处于已推送-push\" class=\"headerlink\" title=\"4.文件处于已推送(push)\"></a>4.文件处于已推送(push)</h5><blockquote>\n<p>既git add了，又git commit了，并且还git push了，这时代码已经进入远程仓库。如果想恢复的话.由于本地仓库和远程仓库是等价的，只需要先恢复本地仓库，再强制push到远程仓库就好了</p>\n</blockquote>\n<blockquote>\n<p>$git reset –hard HEAD^   //将本地恢复到初始状态,<b>之前已做的修改全部会丢失</b></p>\n</blockquote>\n<blockquote>\n<p>$git push -f // 将本地仓库初始化后推送到远程,将远程保持和本地一致</p>\n</blockquote>\n<h5 id=\"注-只要还未影响到本地仓库-local-repository-的时候-即没有commit时-都可以恢复到已修改的状态-一旦commit后-影响了本地仓库-就只能恢复到上一次的本地仓库的版本-所做的修改都会丢失\"><a href=\"#注-只要还未影响到本地仓库-local-repository-的时候-即没有commit时-都可以恢复到已修改的状态-一旦commit后-影响了本地仓库-就只能恢复到上一次的本地仓库的版本-所做的修改都会丢失\" class=\"headerlink\" title=\"注:只要还未影响到本地仓库(local repository)的时候,即没有commit时,都可以恢复到已修改的状态.一旦commit后,影响了本地仓库,就只能恢复到上一次的本地仓库的版本.所做的修改都会丢失..\"></a>注:只要还未影响到本地仓库(local repository)的时候,即没有commit时,都可以恢复到已修改的状态.一旦commit后,影响了本地仓库,就只能恢复到上一次的本地仓库的版本.所做的修改都会丢失..</h5><p>###git撤销暂存区的文件</p>\n<blockquote>\n<p>有时候执行git add . 后,将当前目录下的所有改动文件都添加到了暂存区,此时如果有三两个文件是不需要添加进暂存区的,可以执行以下命令将文件从暂存区移除<br>$git rm –cached 文件名</p>\n</blockquote>\n<h3 id=\"git-tag的常用使用\"><a href=\"#git-tag的常用使用\" class=\"headerlink\" title=\"git tag的常用使用\"></a>git tag的常用使用</h3><blockquote>\n<p>Git可以对某个版本打上标签(tag)，表示本版本为发行版</p>\n</blockquote>\n<blockquote>\n<p>$git tag // 查看所有标签</p>\n</blockquote>\n<blockquote>\n<p>$git tag -l 1.0.*  // 打印符合检索条件的标签</p>\n</blockquote>\n<blockquote>\n<p>$git checkout 1.0.0 // 查看对应标签状态</p>\n</blockquote>\n<blockquote>\n<p>$git tag -a 1.0.0 -m “1.0.0版本” // 创建带备注标签(推荐)</p>\n</blockquote>\n<blockquote>\n<p>$git tag -a 1.0.0 0c3b62d -m “备注信息” // 针对特定commit版本SHA创建标签</p>\n</blockquote>\n<blockquote>\n<p>$git tag -d 1.0.0 // 删除本地1.0.0标签</p>\n</blockquote>\n<blockquote>\n<p>$git push origin –tags // 将本地所有标签发布到远程仓库</p>\n</blockquote>\n<blockquote>\n<p>$git push origin 1.0.0 // 指定标签版本(1.0.0)发送</p>\n</blockquote>\n<blockquote>\n<p>$git push origin –delete 1.0.0 // 删除远程仓库对应标签,此命令需要Git版本 &gt; V1.7.0</p>\n</blockquote>\n<blockquote>\n<p>$git push origin :refs/tags/1.0.0 // 删除远程仓库对应标签,此命令需要Git版本 &lt; V1.7.0</p>\n</blockquote>\n"},{"title":"java实现图片的灰度化处理","date":"2018-06-12T07:36:11.000Z","_content":"\n    摘要:24位彩色图与8位灰度图\n\n    在一个24位彩色图像中，每个像素由三个字节表示，通常表示为RGB。\n    通常，许多24位彩色图像存储为32位图像，每个像素多余的字节存储为一个alpha值，表现有特殊影响的信息\n    在RGB模型中，如果R=G=B时，则彩色表示一种灰度颜色，其中R=G=B的值叫灰度值，\n    因此，灰度图像每个像素只需一个字节存放灰度值（又称强度值、亮度值），灰度范围为0-255.\n    这样就得到一幅图片的灰度图\n\n常见的几种灰度化的方法:\n\n    分量法：使用RGB三个分量中的一个作为灰度图的灰度值。\n    最值法：使用RGB三个分量中最大值或最小值作为灰度图的灰度值。\n    均值法：使用RGB三个分量的平均值作为灰度图的灰度值。\n    加权法：由于人眼颜色敏感度不同，按下一定的权值对RGB三分量进行加权平均能得到较合理的灰度图像。\n    一般情况按照：Y = 0.30R + 0.59G + 0.11B.加权法实际上是取一幅图片的亮度值\n    人眼对绿色的敏感最高，对蓝色敏感最低 ）作为灰度值来计算，用到了YUV模型\n\njava编码实现图片灰度化\n\n1.强制设置灰度化的方法（效果相对就差）\n\n    ```java\n    /**\n     * 图片灰化（效果不行，不建议。据说：搜索“Java实现灰度化”，十有八九都是一种方法）\n     *\n     * @param bufferedImage 待处理图片\n     * @return\n     * @throws Exception\n     */\n    public static BufferedImage grayImage(BufferedImage bufferedImage) throws Exception {\n\n        int width = bufferedImage.getWidth();  \n        int height = bufferedImage.getHeight();  \n\n        BufferedImage grayBufferedImage = new BufferedImage(width, height,\n                                        BufferedImage.TYPE_BYTE_GRAY);\n        for (int x = 0; x < width; x++) {  \n            for(int y = 0 ; y < height; y++) {  \n            \tgrayBufferedImage.setRGB(x, y, bufferedImage.getRGB(x, j));  \n            }  \n        }  \n    }\n    ```\n\n2.加权法灰度化（效果较好）\n\n    ```java\n    /**\n     * 图片灰化（参考：http://www.codeceo.com/article/java-image-gray.html）\n     *\n     * @param bufferedImage 待处理图片\n     * @return\n     * @throws Exception\n     */\n    public static BufferedImage grayImage(BufferedImage bufferedImage) throws\n      Exception {\n    \tint width = bufferedImage.getWidth();\n    \tint height = bufferedImage.getHeight();\n    \tBufferedImage grayBufferedImage = new BufferedImage(width, height,\n                                        BufferedImage.TYPE_BYTE_GRAY);\n    \tfor (int x = 0; x < width; x++) {\n    \t\tfor (int y = 0; y < height; y++) {\n    \t\t\t// 计算灰度值\n    \t\t\tfinal int color = bufferedImage.getRGB(x, y);\n    \t\t\tfinal int r = (color >> 16) & 0xff;\n    \t\t\tfinal int g = (color >> 8) & 0xff;\n    \t\t\tfinal int b = color & 0xff;\n    \t\t\tint gray = (int) (0.3 * r + 0.59 * g + 0.11 * b);\n    \t\t\tint newPixel = colorToRGB(255, gray, gray, gray);\n    \t\t\tgrayBufferedImage.setRGB(x, y, newPixel);\n    \t\t}\n    \t}\n    \treturn grayBufferedImage;\n    }\n\n    /**\n     * 颜色分量转换为RGB值\n     *\n     * @param alpha\n     * @param red\n     * @param green\n     * @param blue\n     * @return\n     */\n    private static int colorToRGB(int alpha, int red, int green, int blue) {\n    \tint newPixel = 0;\n    \tnewPixel += alpha;\n    \tnewPixel = newPixel << 8;\n    \tnewPixel += red;\n    \tnewPixel = newPixel << 8;\n    \tnewPixel += green;\n    \tnewPixel = newPixel << 8;\n    \tnewPixel += blue;\n    \treturn newPixel;\n    }\n    ```\n","source":"_posts/java实现图片的灰度化处理.md","raw":"---\ntitle: java实现图片的灰度化处理\ndate: 2018-06-12 15:36:11\ntags: java\n---\n\n    摘要:24位彩色图与8位灰度图\n\n    在一个24位彩色图像中，每个像素由三个字节表示，通常表示为RGB。\n    通常，许多24位彩色图像存储为32位图像，每个像素多余的字节存储为一个alpha值，表现有特殊影响的信息\n    在RGB模型中，如果R=G=B时，则彩色表示一种灰度颜色，其中R=G=B的值叫灰度值，\n    因此，灰度图像每个像素只需一个字节存放灰度值（又称强度值、亮度值），灰度范围为0-255.\n    这样就得到一幅图片的灰度图\n\n常见的几种灰度化的方法:\n\n    分量法：使用RGB三个分量中的一个作为灰度图的灰度值。\n    最值法：使用RGB三个分量中最大值或最小值作为灰度图的灰度值。\n    均值法：使用RGB三个分量的平均值作为灰度图的灰度值。\n    加权法：由于人眼颜色敏感度不同，按下一定的权值对RGB三分量进行加权平均能得到较合理的灰度图像。\n    一般情况按照：Y = 0.30R + 0.59G + 0.11B.加权法实际上是取一幅图片的亮度值\n    人眼对绿色的敏感最高，对蓝色敏感最低 ）作为灰度值来计算，用到了YUV模型\n\njava编码实现图片灰度化\n\n1.强制设置灰度化的方法（效果相对就差）\n\n    ```java\n    /**\n     * 图片灰化（效果不行，不建议。据说：搜索“Java实现灰度化”，十有八九都是一种方法）\n     *\n     * @param bufferedImage 待处理图片\n     * @return\n     * @throws Exception\n     */\n    public static BufferedImage grayImage(BufferedImage bufferedImage) throws Exception {\n\n        int width = bufferedImage.getWidth();  \n        int height = bufferedImage.getHeight();  \n\n        BufferedImage grayBufferedImage = new BufferedImage(width, height,\n                                        BufferedImage.TYPE_BYTE_GRAY);\n        for (int x = 0; x < width; x++) {  \n            for(int y = 0 ; y < height; y++) {  \n            \tgrayBufferedImage.setRGB(x, y, bufferedImage.getRGB(x, j));  \n            }  \n        }  \n    }\n    ```\n\n2.加权法灰度化（效果较好）\n\n    ```java\n    /**\n     * 图片灰化（参考：http://www.codeceo.com/article/java-image-gray.html）\n     *\n     * @param bufferedImage 待处理图片\n     * @return\n     * @throws Exception\n     */\n    public static BufferedImage grayImage(BufferedImage bufferedImage) throws\n      Exception {\n    \tint width = bufferedImage.getWidth();\n    \tint height = bufferedImage.getHeight();\n    \tBufferedImage grayBufferedImage = new BufferedImage(width, height,\n                                        BufferedImage.TYPE_BYTE_GRAY);\n    \tfor (int x = 0; x < width; x++) {\n    \t\tfor (int y = 0; y < height; y++) {\n    \t\t\t// 计算灰度值\n    \t\t\tfinal int color = bufferedImage.getRGB(x, y);\n    \t\t\tfinal int r = (color >> 16) & 0xff;\n    \t\t\tfinal int g = (color >> 8) & 0xff;\n    \t\t\tfinal int b = color & 0xff;\n    \t\t\tint gray = (int) (0.3 * r + 0.59 * g + 0.11 * b);\n    \t\t\tint newPixel = colorToRGB(255, gray, gray, gray);\n    \t\t\tgrayBufferedImage.setRGB(x, y, newPixel);\n    \t\t}\n    \t}\n    \treturn grayBufferedImage;\n    }\n\n    /**\n     * 颜色分量转换为RGB值\n     *\n     * @param alpha\n     * @param red\n     * @param green\n     * @param blue\n     * @return\n     */\n    private static int colorToRGB(int alpha, int red, int green, int blue) {\n    \tint newPixel = 0;\n    \tnewPixel += alpha;\n    \tnewPixel = newPixel << 8;\n    \tnewPixel += red;\n    \tnewPixel = newPixel << 8;\n    \tnewPixel += green;\n    \tnewPixel = newPixel << 8;\n    \tnewPixel += blue;\n    \treturn newPixel;\n    }\n    ```\n","slug":"java实现图片的灰度化处理","published":1,"updated":"2019-09-02T07:37:22.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck024pnvq000ry6fg1l2av12m","content":"<pre><code>摘要:24位彩色图与8位灰度图\n\n在一个24位彩色图像中，每个像素由三个字节表示，通常表示为RGB。\n通常，许多24位彩色图像存储为32位图像，每个像素多余的字节存储为一个alpha值，表现有特殊影响的信息\n在RGB模型中，如果R=G=B时，则彩色表示一种灰度颜色，其中R=G=B的值叫灰度值，\n因此，灰度图像每个像素只需一个字节存放灰度值（又称强度值、亮度值），灰度范围为0-255.\n这样就得到一幅图片的灰度图\n</code></pre><p>常见的几种灰度化的方法:</p>\n<pre><code>分量法：使用RGB三个分量中的一个作为灰度图的灰度值。\n最值法：使用RGB三个分量中最大值或最小值作为灰度图的灰度值。\n均值法：使用RGB三个分量的平均值作为灰度图的灰度值。\n加权法：由于人眼颜色敏感度不同，按下一定的权值对RGB三分量进行加权平均能得到较合理的灰度图像。\n一般情况按照：Y = 0.30R + 0.59G + 0.11B.加权法实际上是取一幅图片的亮度值\n人眼对绿色的敏感最高，对蓝色敏感最低 ）作为灰度值来计算，用到了YUV模型\n</code></pre><p>java编码实现图片灰度化</p>\n<p>1.强制设置灰度化的方法（效果相对就差）</p>\n<pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 图片灰化（效果不行，不建议。据说：搜索“Java实现灰度化”，十有八九都是一种方法）</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> bufferedImage 待处理图片</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BufferedImage <span class=\"title\">grayImage</span><span class=\"params\">(BufferedImage bufferedImage)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> width = bufferedImage.getWidth();  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> height = bufferedImage.getHeight();  </span><br><span class=\"line\"></span><br><span class=\"line\">    BufferedImage grayBufferedImage = <span class=\"keyword\">new</span> BufferedImage(width, height,</span><br><span class=\"line\">                                    BufferedImage.TYPE_BYTE_GRAY);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; width; x++) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> y = <span class=\"number\">0</span> ; y &lt; height; y++) &#123;  </span><br><span class=\"line\">        \tgrayBufferedImage.setRGB(x, y, bufferedImage.getRGB(x, j));  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><p>2.加权法灰度化（效果较好）</p>\n<pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 图片灰化（参考：http://www.codeceo.com/article/java-image-gray.html）</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> bufferedImage 待处理图片</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BufferedImage <span class=\"title\">grayImage</span><span class=\"params\">(BufferedImage bufferedImage)</span> <span class=\"keyword\">throws</span></span></span><br><span class=\"line\"><span class=\"function\">  Exception </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> width = bufferedImage.getWidth();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> height = bufferedImage.getHeight();</span><br><span class=\"line\">\tBufferedImage grayBufferedImage = <span class=\"keyword\">new</span> BufferedImage(width, height,</span><br><span class=\"line\">                                    BufferedImage.TYPE_BYTE_GRAY);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; width; x++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> y = <span class=\"number\">0</span>; y &lt; height; y++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 计算灰度值</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> color = bufferedImage.getRGB(x, y);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> r = (color &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> g = (color &gt;&gt; <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> b = color &amp; <span class=\"number\">0xff</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> gray = (<span class=\"keyword\">int</span>) (<span class=\"number\">0.3</span> * r + <span class=\"number\">0.59</span> * g + <span class=\"number\">0.11</span> * b);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> newPixel = colorToRGB(<span class=\"number\">255</span>, gray, gray, gray);</span><br><span class=\"line\">\t\t\tgrayBufferedImage.setRGB(x, y, newPixel);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> grayBufferedImage;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 颜色分量转换为RGB值</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> alpha</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> red</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> green</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> blue</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">colorToRGB</span><span class=\"params\">(<span class=\"keyword\">int</span> alpha, <span class=\"keyword\">int</span> red, <span class=\"keyword\">int</span> green, <span class=\"keyword\">int</span> blue)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> newPixel = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tnewPixel += alpha;</span><br><span class=\"line\">\tnewPixel = newPixel &lt;&lt; <span class=\"number\">8</span>;</span><br><span class=\"line\">\tnewPixel += red;</span><br><span class=\"line\">\tnewPixel = newPixel &lt;&lt; <span class=\"number\">8</span>;</span><br><span class=\"line\">\tnewPixel += green;</span><br><span class=\"line\">\tnewPixel = newPixel &lt;&lt; <span class=\"number\">8</span>;</span><br><span class=\"line\">\tnewPixel += blue;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> newPixel;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>摘要:24位彩色图与8位灰度图\n\n在一个24位彩色图像中，每个像素由三个字节表示，通常表示为RGB。\n通常，许多24位彩色图像存储为32位图像，每个像素多余的字节存储为一个alpha值，表现有特殊影响的信息\n在RGB模型中，如果R=G=B时，则彩色表示一种灰度颜色，其中R=G=B的值叫灰度值，\n因此，灰度图像每个像素只需一个字节存放灰度值（又称强度值、亮度值），灰度范围为0-255.\n这样就得到一幅图片的灰度图\n</code></pre><p>常见的几种灰度化的方法:</p>\n<pre><code>分量法：使用RGB三个分量中的一个作为灰度图的灰度值。\n最值法：使用RGB三个分量中最大值或最小值作为灰度图的灰度值。\n均值法：使用RGB三个分量的平均值作为灰度图的灰度值。\n加权法：由于人眼颜色敏感度不同，按下一定的权值对RGB三分量进行加权平均能得到较合理的灰度图像。\n一般情况按照：Y = 0.30R + 0.59G + 0.11B.加权法实际上是取一幅图片的亮度值\n人眼对绿色的敏感最高，对蓝色敏感最低 ）作为灰度值来计算，用到了YUV模型\n</code></pre><p>java编码实现图片灰度化</p>\n<p>1.强制设置灰度化的方法（效果相对就差）</p>\n<pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 图片灰化（效果不行，不建议。据说：搜索“Java实现灰度化”，十有八九都是一种方法）</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> bufferedImage 待处理图片</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BufferedImage <span class=\"title\">grayImage</span><span class=\"params\">(BufferedImage bufferedImage)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> width = bufferedImage.getWidth();  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> height = bufferedImage.getHeight();  </span><br><span class=\"line\"></span><br><span class=\"line\">    BufferedImage grayBufferedImage = <span class=\"keyword\">new</span> BufferedImage(width, height,</span><br><span class=\"line\">                                    BufferedImage.TYPE_BYTE_GRAY);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; width; x++) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> y = <span class=\"number\">0</span> ; y &lt; height; y++) &#123;  </span><br><span class=\"line\">        \tgrayBufferedImage.setRGB(x, y, bufferedImage.getRGB(x, j));  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><p>2.加权法灰度化（效果较好）</p>\n<pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 图片灰化（参考：http://www.codeceo.com/article/java-image-gray.html）</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> bufferedImage 待处理图片</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BufferedImage <span class=\"title\">grayImage</span><span class=\"params\">(BufferedImage bufferedImage)</span> <span class=\"keyword\">throws</span></span></span><br><span class=\"line\"><span class=\"function\">  Exception </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> width = bufferedImage.getWidth();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> height = bufferedImage.getHeight();</span><br><span class=\"line\">\tBufferedImage grayBufferedImage = <span class=\"keyword\">new</span> BufferedImage(width, height,</span><br><span class=\"line\">                                    BufferedImage.TYPE_BYTE_GRAY);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; width; x++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> y = <span class=\"number\">0</span>; y &lt; height; y++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 计算灰度值</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> color = bufferedImage.getRGB(x, y);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> r = (color &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> g = (color &gt;&gt; <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> b = color &amp; <span class=\"number\">0xff</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> gray = (<span class=\"keyword\">int</span>) (<span class=\"number\">0.3</span> * r + <span class=\"number\">0.59</span> * g + <span class=\"number\">0.11</span> * b);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> newPixel = colorToRGB(<span class=\"number\">255</span>, gray, gray, gray);</span><br><span class=\"line\">\t\t\tgrayBufferedImage.setRGB(x, y, newPixel);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> grayBufferedImage;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 颜色分量转换为RGB值</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> alpha</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> red</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> green</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> blue</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">colorToRGB</span><span class=\"params\">(<span class=\"keyword\">int</span> alpha, <span class=\"keyword\">int</span> red, <span class=\"keyword\">int</span> green, <span class=\"keyword\">int</span> blue)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> newPixel = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tnewPixel += alpha;</span><br><span class=\"line\">\tnewPixel = newPixel &lt;&lt; <span class=\"number\">8</span>;</span><br><span class=\"line\">\tnewPixel += red;</span><br><span class=\"line\">\tnewPixel = newPixel &lt;&lt; <span class=\"number\">8</span>;</span><br><span class=\"line\">\tnewPixel += green;</span><br><span class=\"line\">\tnewPixel = newPixel &lt;&lt; <span class=\"number\">8</span>;</span><br><span class=\"line\">\tnewPixel += blue;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> newPixel;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>"},{"title":"linux下nginx部署配置多站点","date":"2018-05-13T03:25:50.000Z","_content":"\n    摘要:\n      有时候你想在一台服务器上为不同的域名运行不同的站点。\n      比如www.siteA.com作为博客，www.siteB.com作为论坛。你可以把两个域名的IP都解析到你的服务器上，\n      但是没法在Nginx的根目录里同时运行两个不同的网站.\n      这时可以在nginx上面配置部署多个站点(使用nginx虚拟目录),为你节省服务器费用.\n      假设你把博客放在”/home/user/www/blog”下，论坛放在”/home/user/www/forum”下。下面我们就开始进行配置:\n\n1.在Nginx配置目录下，创建一个”vhost”目录。本例假设Nginx是默认安装，配置目录在”/etc/nginx”\n\n`sudo mkdir /etc/nginx/vhost #创建保存站点配置文件的目录`\n\n2.创建siteA的配置文件\n\n'sudo vim /etc/nginx/vhost/siteA.conf #打开该文件(没有的话保存后会自动新建)'\n\n在文件里面输入以下配置内容(具体的相关目录及location内容根据自己实际情况修改,下面只是nginx配置文件的基本结构,其实可以拷贝nginx自带的配置文件到vhost目录下,然后对文件内容进行修改):\n\n    server {\n      listen 80; # 监听端口\n      server_name www.siteA.com siteA.com; # 站点域名\n      root /home/user/www/blog; # 站点根目录\n      index index.html index.htm index.php; # 默认导航页\n\n      #rewrite ^(.*) https://$host$1 permanent; #重定向到https\n\n      location / {\n        # WordPress固定链接URL重写\n        if (!-e $request_filename) {\n          rewrite (.*) /index.php;\n        }\n      }\n      location / {\n        # WordPress固定链接URL重写\n        if (!-e $request_filename) {\n          rewrite (.*) /index.php;\n        }\n      }\n      location ^~ /device/ {\n    \t  proxy_pass http://127.0.0.1:8080;\n      }\n      location ^~ /upload/ {  \n        root  /aaa/bbb;\n        expires   7d;\n      }\n    }\n\n3.跟第二步一样,创建siteB的配置文件.(\"server_name”和\"root”目录的内容和siteA不同)\n\n'sudo vim /etc/nginx/vhost/siteB.conf #打开该文件(没有的话保存后会自动新建)'\n\n在文件里面输入以下配置内容(具体的相关目录及location内容根据自己实际情况修改,下面只是nginx配置文件的基本结构,其实可以拷贝nginx自带的配置文件到vhost目录下,然后对文件内容进行修改):\n\n    server {\n      listen 80; # 监听端口\n      server_name www.siteB.com siteB.com; # 站点域名\n      root /home/user/www/blog; # 站点根目录\n      index index.html index.htm index.php; # 默认导航页\n\n      #rewrite ^(.*) https://$host$1 permanent; #重定向到https\n\n      location / {\n        # WordPress固定链接URL重写\n        if (!-e $request_filename) {\n          rewrite (.*) /index.php;\n        }\n      }\n      location ^~ /device/ {\n    \t  proxy_pass http://127.0.0.1:8080;\n      }\n      location ^~ /upload/ {  \n        root  /aaa/bbb;\n        expires   7d;\n      }\n      # websocket地址\n      location ^~ /ws {\n\t\t    proxy_pass http://127.0.0.1:10002;\n\t    }\n    }\n\n4.打开编辑nginx的配置文件\n\n`sudo vim /etc/nginx/nginx.conf`\n\n将我们第一步创建的虚拟目录的路径增加到nginx.conf文件中去,将下面的内容加入到”http {}”部分的末尾\n\n    http {\n      ...\n      include /etc/nginx/vhost/*.conf;\n    }\n\n5.重启nginx服务(注意:所有的配置文件修改保存后,先不急重新加载配置,先使用`nginx -t`测试下文件内容是否有错在进行重新加载配置操作)\n\n`sudo service nginx restart`\n\n6.访问www.siteA.com和www.siteB.com，你将发现浏览器会打开不同的站点\n\nnginx禁止ip访问的小技巧:\n\n假如你的Nginx根目录设在”/home/user/www”，你想阻止别人通过”http://IP地址/blog”或”http://IP地址/forum”来访问你的站点，最简单的方法就是禁止IP地址访问。方法如下：\n\n打开Nginx网站默认配置文件，记得先备份\n\n`sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/default_bak #备份原来的默认文件`\n\n`sudo vim /etc/nginx/sites-available/default #编辑文件`\n\n将其所有内容删除，只留以下配置\n\n    server {\n      listen 80 default_server;\n      server_name _;\n      return 404;\n    }\n\n然后重启nginx或者`nginx -s reload`使配置文件生效,别人将无法通过IP地址访问网站了\n\n如果你不想禁止IP地址访问整个目录，只是要防止别人通过IP访问你的博客和论坛。那就需要禁止”/blog”和”/forum”的目录访问\n\n打开Nginx网站默认配置文件，同上面一样，记得先备份一下\n\n在\"server { }\"节点的部分加上以下配置,然后重启nginx或者reload nginx配置即可.\n\n    location ^~ /blog/ {\n      deny all;\n    }\n    location ^~ /forum/ {\n      deny all;\n    }\n\n7.nginx常用的配置选项模板\n    /etc/nginx/nginx.conf\n\n    http {\n      sendfile on;\n      tcp_nopush on;\n      tcp_nodelay on;\n      keepalive_timeout 65;\n      types_hash_max_size 2048;\n      server_tokens off; # 关闭nginx版本标识\n\n      underscores_in_headers on; #自定义Header中含有下划线的情况 必须定义\n      gzip  on;\n      gzip_min_length 1k;\n      gzip_buffers 16 64k;\n      gzip_http_version 1.1;\n      gzip_comp_level 6;\n      gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n      gzip_vary on;\n      gzip_disable \"MSIE [1-6]\\.\";\n\n      #proxy_connect_timeout 600;  #nginx跟后端服务器连接超时时间(代理连接超时)\n      \n      proxy_buffer_size     32k;  #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n      proxy_buffers         4 32k;#proxy_buffers缓冲区，网页平均在32k以下的话，这样设置\n      proxy_busy_buffers_size  64k;           #高负荷下缓冲大小（proxy_buffers*2）\n      proxy_temp_file_write_size  1024m;       #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n      client_max_body_size 100M;\n\n      # 给后端服务器暴露获取客户端真实IP地址的头\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header REMOTE-HOST $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n      # websocket 支持\n      proxy_http_version 1.1;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection \"upgrade\";\n      proxy_read_timeout    600;  #连接成功后，后端服务器响应时间(代理接收超时)\n      proxy_send_timeout    600;  #后端服务器数据回传时间(代理发送超时)\n    }\n\n8.站点配置文件样例,例如:/etc/nginx/vhost/a.conf\n\n    server {\n      listen          80;\n      server_name     www.aaa.com  aaa.com;\n      root            /opt/pages/;\n      index           index.html index.htm;\n\n      # Cookie的HttpOnly属性，指示浏览器不要在除HTTP（和HTTPS)请求之外暴露Cookie。一个有HttpOnly属性的Cookie，是不可以通过例如调用JavaScript(引用document.cookie)这种非HTTP方式来访问。因此，也不可能通过跨域脚本（一种非常普通的攻击技术）来偷走这种Cookie。\n      add_header                  Set-Cookie \"HttpOnly\";\n      # Cookie的Secure属性，意味着保持Cookie通信只限于加密传输，指示浏览器仅仅在通过安全/加密连接才能使用该Cookie。如果一个Web服务器从一个非安全连接里设置了一个带有secure属性的Cookie，当Cookie被发送到客户端时，它仍然能通过中间人攻击来拦截\n      add_header                  Set-Cookie \"Secure\";\n      # X-Frame-Options HTTP 响应头是用来给浏览器指示允许一个页面可否在 <frame>, <iframe> 或者 <object> 中展现的标记。网站可以使用此功能，来确保自己网站的内容没有被嵌到别人的网站中去，也从而避免了点击劫持 (clickjacking) 的攻击。它有三个可选择项：(DENY：表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许；SAMEORIGIN：表示该页面可以在相同域名页面的 frame 中展示；ALLOW-FROM uri地址：表示该页面可以在指定来源的 frame 中展示；)\n      add_header                  X-Frame-Options \"SAMEORIGIN\";\n\n      # 禁用OPTIONS TRACE不安全方法,屏蔽GET、POST、之外的HTTP方法\n      if ($request_method !~* GET|POST) {\n          return 403;\n      }\n\n      # 跨域配置\n      location / {\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';\n        add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';\n\n        if ($request_method = 'OPTIONS') {\n          return 204;\n        }\n      }\n\n      # 转发以/api/开头的请求\n      location ^~ /api/ {\n        proxy_pass http://127.0.0.1:8080;\n      }\n\n      # 以/upload开头的请求\n      location ^~ /upload/ {\n        root  /opt/dir/;\n        expires   7d;\n      }\n    }\n\n9.nginx负载均衡配置\n  \n  在http节点下配置服务器列表\n\n    http {\n      # upstream模块：配置反向代理服务器组，Nginx会根据配置，将请求分发给组里的某一台服务器。serverGroup是服务器组的名称.\n      upstream serverGroup {\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n      }\n      # serverGroup内部的server指令：配置处理请求的服务器IP或域名，端口可选，不配置默认使用80端口。通过上面的配置(默认的是轮询策略,把每个请求逐一分配到不同的server，如果分配到的server不可用，则分配到下一个，直到可用)，Nginx默认将请求依次分配给100，101来处理，可以通过修改下面这些参数来改变默认的分配策略：\n\n      1.weight权重,默认为1，将请求平均分配给每台server.值越大，则被访问的概率越大.下面标示101访问数量是100的2倍\n      upstream serverGroup {\n        server 192.168.0.100:8080 weight=1;\n        server 192.168.0.101:8080 weight=2 max_fails=3 fail_timeout=15;\n        server 192.168.0.102:8080 down; #down 表示当前服务器不参与负载均衡，也就是说不会被访问到\n        server 192.168.0.103:8080 backup; #backup 表示备份机，所有服务器挂了之后才会生效\n      }\n      max_fails:默认为1。某台Server允许请求失败的次数，超过最大次数后，在fail_timeout时间内，新的请求将不会分配给这台机器。如果设置为0，Nginx会将这台Server置为永久无效状态，然后将请求发给定义了proxy_next_upstream fastcgi_next_upstream, uwsgi_next_upstream, scgi_next_upstream, and memcached_next_upstream指令来处理这次错误的请求\n      fail_timeout:默认为10秒。某台Server达到max_fails次失败请求后，在fail_timeout期间内，nginx会认为这台Server暂时不可用，不会将请求分配给它\n\n      2.最少连接,把请求分配到连接数最少的server\n      upstream serverGroup {\n        least_conn;\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n      }\n\n      3.ip_hash,根据访问客户端ip的hash值分配，这样同一客户端的请求都会被分配到同一个server上，如果牵扯到session的问题，用这个是最好的选择\n      upstream serverGroup {\n        ip_hash;\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n      }\n    }\n\n  在server节点下配置proxy_pass\n\n    server {\n        listen  80;\n        server_name serverGroup;\n        location / {\n          proxy_pass   http://serverGroup; # 表示将所有请求转发到tomcats服务器组中配置的某一台服务器上\n        }\n    }","source":"_posts/linux下nginx部署配置多站点.md","raw":"---\ntitle: linux下nginx部署配置多站点\ndate: 2018-05-13 11:25:50\ntags:\n  - linux\n  - nginx\n---\n\n    摘要:\n      有时候你想在一台服务器上为不同的域名运行不同的站点。\n      比如www.siteA.com作为博客，www.siteB.com作为论坛。你可以把两个域名的IP都解析到你的服务器上，\n      但是没法在Nginx的根目录里同时运行两个不同的网站.\n      这时可以在nginx上面配置部署多个站点(使用nginx虚拟目录),为你节省服务器费用.\n      假设你把博客放在”/home/user/www/blog”下，论坛放在”/home/user/www/forum”下。下面我们就开始进行配置:\n\n1.在Nginx配置目录下，创建一个”vhost”目录。本例假设Nginx是默认安装，配置目录在”/etc/nginx”\n\n`sudo mkdir /etc/nginx/vhost #创建保存站点配置文件的目录`\n\n2.创建siteA的配置文件\n\n'sudo vim /etc/nginx/vhost/siteA.conf #打开该文件(没有的话保存后会自动新建)'\n\n在文件里面输入以下配置内容(具体的相关目录及location内容根据自己实际情况修改,下面只是nginx配置文件的基本结构,其实可以拷贝nginx自带的配置文件到vhost目录下,然后对文件内容进行修改):\n\n    server {\n      listen 80; # 监听端口\n      server_name www.siteA.com siteA.com; # 站点域名\n      root /home/user/www/blog; # 站点根目录\n      index index.html index.htm index.php; # 默认导航页\n\n      #rewrite ^(.*) https://$host$1 permanent; #重定向到https\n\n      location / {\n        # WordPress固定链接URL重写\n        if (!-e $request_filename) {\n          rewrite (.*) /index.php;\n        }\n      }\n      location / {\n        # WordPress固定链接URL重写\n        if (!-e $request_filename) {\n          rewrite (.*) /index.php;\n        }\n      }\n      location ^~ /device/ {\n    \t  proxy_pass http://127.0.0.1:8080;\n      }\n      location ^~ /upload/ {  \n        root  /aaa/bbb;\n        expires   7d;\n      }\n    }\n\n3.跟第二步一样,创建siteB的配置文件.(\"server_name”和\"root”目录的内容和siteA不同)\n\n'sudo vim /etc/nginx/vhost/siteB.conf #打开该文件(没有的话保存后会自动新建)'\n\n在文件里面输入以下配置内容(具体的相关目录及location内容根据自己实际情况修改,下面只是nginx配置文件的基本结构,其实可以拷贝nginx自带的配置文件到vhost目录下,然后对文件内容进行修改):\n\n    server {\n      listen 80; # 监听端口\n      server_name www.siteB.com siteB.com; # 站点域名\n      root /home/user/www/blog; # 站点根目录\n      index index.html index.htm index.php; # 默认导航页\n\n      #rewrite ^(.*) https://$host$1 permanent; #重定向到https\n\n      location / {\n        # WordPress固定链接URL重写\n        if (!-e $request_filename) {\n          rewrite (.*) /index.php;\n        }\n      }\n      location ^~ /device/ {\n    \t  proxy_pass http://127.0.0.1:8080;\n      }\n      location ^~ /upload/ {  \n        root  /aaa/bbb;\n        expires   7d;\n      }\n      # websocket地址\n      location ^~ /ws {\n\t\t    proxy_pass http://127.0.0.1:10002;\n\t    }\n    }\n\n4.打开编辑nginx的配置文件\n\n`sudo vim /etc/nginx/nginx.conf`\n\n将我们第一步创建的虚拟目录的路径增加到nginx.conf文件中去,将下面的内容加入到”http {}”部分的末尾\n\n    http {\n      ...\n      include /etc/nginx/vhost/*.conf;\n    }\n\n5.重启nginx服务(注意:所有的配置文件修改保存后,先不急重新加载配置,先使用`nginx -t`测试下文件内容是否有错在进行重新加载配置操作)\n\n`sudo service nginx restart`\n\n6.访问www.siteA.com和www.siteB.com，你将发现浏览器会打开不同的站点\n\nnginx禁止ip访问的小技巧:\n\n假如你的Nginx根目录设在”/home/user/www”，你想阻止别人通过”http://IP地址/blog”或”http://IP地址/forum”来访问你的站点，最简单的方法就是禁止IP地址访问。方法如下：\n\n打开Nginx网站默认配置文件，记得先备份\n\n`sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/default_bak #备份原来的默认文件`\n\n`sudo vim /etc/nginx/sites-available/default #编辑文件`\n\n将其所有内容删除，只留以下配置\n\n    server {\n      listen 80 default_server;\n      server_name _;\n      return 404;\n    }\n\n然后重启nginx或者`nginx -s reload`使配置文件生效,别人将无法通过IP地址访问网站了\n\n如果你不想禁止IP地址访问整个目录，只是要防止别人通过IP访问你的博客和论坛。那就需要禁止”/blog”和”/forum”的目录访问\n\n打开Nginx网站默认配置文件，同上面一样，记得先备份一下\n\n在\"server { }\"节点的部分加上以下配置,然后重启nginx或者reload nginx配置即可.\n\n    location ^~ /blog/ {\n      deny all;\n    }\n    location ^~ /forum/ {\n      deny all;\n    }\n\n7.nginx常用的配置选项模板\n    /etc/nginx/nginx.conf\n\n    http {\n      sendfile on;\n      tcp_nopush on;\n      tcp_nodelay on;\n      keepalive_timeout 65;\n      types_hash_max_size 2048;\n      server_tokens off; # 关闭nginx版本标识\n\n      underscores_in_headers on; #自定义Header中含有下划线的情况 必须定义\n      gzip  on;\n      gzip_min_length 1k;\n      gzip_buffers 16 64k;\n      gzip_http_version 1.1;\n      gzip_comp_level 6;\n      gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n      gzip_vary on;\n      gzip_disable \"MSIE [1-6]\\.\";\n\n      #proxy_connect_timeout 600;  #nginx跟后端服务器连接超时时间(代理连接超时)\n      \n      proxy_buffer_size     32k;  #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n      proxy_buffers         4 32k;#proxy_buffers缓冲区，网页平均在32k以下的话，这样设置\n      proxy_busy_buffers_size  64k;           #高负荷下缓冲大小（proxy_buffers*2）\n      proxy_temp_file_write_size  1024m;       #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n      client_max_body_size 100M;\n\n      # 给后端服务器暴露获取客户端真实IP地址的头\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header REMOTE-HOST $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n      # websocket 支持\n      proxy_http_version 1.1;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection \"upgrade\";\n      proxy_read_timeout    600;  #连接成功后，后端服务器响应时间(代理接收超时)\n      proxy_send_timeout    600;  #后端服务器数据回传时间(代理发送超时)\n    }\n\n8.站点配置文件样例,例如:/etc/nginx/vhost/a.conf\n\n    server {\n      listen          80;\n      server_name     www.aaa.com  aaa.com;\n      root            /opt/pages/;\n      index           index.html index.htm;\n\n      # Cookie的HttpOnly属性，指示浏览器不要在除HTTP（和HTTPS)请求之外暴露Cookie。一个有HttpOnly属性的Cookie，是不可以通过例如调用JavaScript(引用document.cookie)这种非HTTP方式来访问。因此，也不可能通过跨域脚本（一种非常普通的攻击技术）来偷走这种Cookie。\n      add_header                  Set-Cookie \"HttpOnly\";\n      # Cookie的Secure属性，意味着保持Cookie通信只限于加密传输，指示浏览器仅仅在通过安全/加密连接才能使用该Cookie。如果一个Web服务器从一个非安全连接里设置了一个带有secure属性的Cookie，当Cookie被发送到客户端时，它仍然能通过中间人攻击来拦截\n      add_header                  Set-Cookie \"Secure\";\n      # X-Frame-Options HTTP 响应头是用来给浏览器指示允许一个页面可否在 <frame>, <iframe> 或者 <object> 中展现的标记。网站可以使用此功能，来确保自己网站的内容没有被嵌到别人的网站中去，也从而避免了点击劫持 (clickjacking) 的攻击。它有三个可选择项：(DENY：表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许；SAMEORIGIN：表示该页面可以在相同域名页面的 frame 中展示；ALLOW-FROM uri地址：表示该页面可以在指定来源的 frame 中展示；)\n      add_header                  X-Frame-Options \"SAMEORIGIN\";\n\n      # 禁用OPTIONS TRACE不安全方法,屏蔽GET、POST、之外的HTTP方法\n      if ($request_method !~* GET|POST) {\n          return 403;\n      }\n\n      # 跨域配置\n      location / {\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';\n        add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';\n\n        if ($request_method = 'OPTIONS') {\n          return 204;\n        }\n      }\n\n      # 转发以/api/开头的请求\n      location ^~ /api/ {\n        proxy_pass http://127.0.0.1:8080;\n      }\n\n      # 以/upload开头的请求\n      location ^~ /upload/ {\n        root  /opt/dir/;\n        expires   7d;\n      }\n    }\n\n9.nginx负载均衡配置\n  \n  在http节点下配置服务器列表\n\n    http {\n      # upstream模块：配置反向代理服务器组，Nginx会根据配置，将请求分发给组里的某一台服务器。serverGroup是服务器组的名称.\n      upstream serverGroup {\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n      }\n      # serverGroup内部的server指令：配置处理请求的服务器IP或域名，端口可选，不配置默认使用80端口。通过上面的配置(默认的是轮询策略,把每个请求逐一分配到不同的server，如果分配到的server不可用，则分配到下一个，直到可用)，Nginx默认将请求依次分配给100，101来处理，可以通过修改下面这些参数来改变默认的分配策略：\n\n      1.weight权重,默认为1，将请求平均分配给每台server.值越大，则被访问的概率越大.下面标示101访问数量是100的2倍\n      upstream serverGroup {\n        server 192.168.0.100:8080 weight=1;\n        server 192.168.0.101:8080 weight=2 max_fails=3 fail_timeout=15;\n        server 192.168.0.102:8080 down; #down 表示当前服务器不参与负载均衡，也就是说不会被访问到\n        server 192.168.0.103:8080 backup; #backup 表示备份机，所有服务器挂了之后才会生效\n      }\n      max_fails:默认为1。某台Server允许请求失败的次数，超过最大次数后，在fail_timeout时间内，新的请求将不会分配给这台机器。如果设置为0，Nginx会将这台Server置为永久无效状态，然后将请求发给定义了proxy_next_upstream fastcgi_next_upstream, uwsgi_next_upstream, scgi_next_upstream, and memcached_next_upstream指令来处理这次错误的请求\n      fail_timeout:默认为10秒。某台Server达到max_fails次失败请求后，在fail_timeout期间内，nginx会认为这台Server暂时不可用，不会将请求分配给它\n\n      2.最少连接,把请求分配到连接数最少的server\n      upstream serverGroup {\n        least_conn;\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n      }\n\n      3.ip_hash,根据访问客户端ip的hash值分配，这样同一客户端的请求都会被分配到同一个server上，如果牵扯到session的问题，用这个是最好的选择\n      upstream serverGroup {\n        ip_hash;\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n      }\n    }\n\n  在server节点下配置proxy_pass\n\n    server {\n        listen  80;\n        server_name serverGroup;\n        location / {\n          proxy_pass   http://serverGroup; # 表示将所有请求转发到tomcats服务器组中配置的某一台服务器上\n        }\n    }","slug":"linux下nginx部署配置多站点","published":1,"updated":"2019-09-02T07:37:22.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck024pnvs000ty6fg7uo9xt2x","content":"<pre><code>摘要:\n  有时候你想在一台服务器上为不同的域名运行不同的站点。\n  比如www.siteA.com作为博客，www.siteB.com作为论坛。你可以把两个域名的IP都解析到你的服务器上，\n  但是没法在Nginx的根目录里同时运行两个不同的网站.\n  这时可以在nginx上面配置部署多个站点(使用nginx虚拟目录),为你节省服务器费用.\n  假设你把博客放在”/home/user/www/blog”下，论坛放在”/home/user/www/forum”下。下面我们就开始进行配置:\n</code></pre><p>1.在Nginx配置目录下，创建一个”vhost”目录。本例假设Nginx是默认安装，配置目录在”/etc/nginx”</p>\n<p><code>sudo mkdir /etc/nginx/vhost #创建保存站点配置文件的目录</code></p>\n<p>2.创建siteA的配置文件</p>\n<p>‘sudo vim /etc/nginx/vhost/siteA.conf #打开该文件(没有的话保存后会自动新建)’</p>\n<p>在文件里面输入以下配置内容(具体的相关目录及location内容根据自己实际情况修改,下面只是nginx配置文件的基本结构,其实可以拷贝nginx自带的配置文件到vhost目录下,然后对文件内容进行修改):</p>\n<pre><code>server {\n  listen 80; # 监听端口\n  server_name www.siteA.com siteA.com; # 站点域名\n  root /home/user/www/blog; # 站点根目录\n  index index.html index.htm index.php; # 默认导航页\n\n  #rewrite ^(.*) https://$host$1 permanent; #重定向到https\n\n  location / {\n    # WordPress固定链接URL重写\n    if (!-e $request_filename) {\n      rewrite (.*) /index.php;\n    }\n  }\n  location / {\n    # WordPress固定链接URL重写\n    if (!-e $request_filename) {\n      rewrite (.*) /index.php;\n    }\n  }\n  location ^~ /device/ {\n      proxy_pass http://127.0.0.1:8080;\n  }\n  location ^~ /upload/ {  \n    root  /aaa/bbb;\n    expires   7d;\n  }\n}\n</code></pre><p>3.跟第二步一样,创建siteB的配置文件.(“server_name”和”root”目录的内容和siteA不同)</p>\n<p>‘sudo vim /etc/nginx/vhost/siteB.conf #打开该文件(没有的话保存后会自动新建)’</p>\n<p>在文件里面输入以下配置内容(具体的相关目录及location内容根据自己实际情况修改,下面只是nginx配置文件的基本结构,其实可以拷贝nginx自带的配置文件到vhost目录下,然后对文件内容进行修改):</p>\n<pre><code>server {\n  listen 80; # 监听端口\n  server_name www.siteB.com siteB.com; # 站点域名\n  root /home/user/www/blog; # 站点根目录\n  index index.html index.htm index.php; # 默认导航页\n\n  #rewrite ^(.*) https://$host$1 permanent; #重定向到https\n\n  location / {\n    # WordPress固定链接URL重写\n    if (!-e $request_filename) {\n      rewrite (.*) /index.php;\n    }\n  }\n  location ^~ /device/ {\n      proxy_pass http://127.0.0.1:8080;\n  }\n  location ^~ /upload/ {  \n    root  /aaa/bbb;\n    expires   7d;\n  }\n  # websocket地址\n  location ^~ /ws {\n        proxy_pass http://127.0.0.1:10002;\n    }\n}\n</code></pre><p>4.打开编辑nginx的配置文件</p>\n<p><code>sudo vim /etc/nginx/nginx.conf</code></p>\n<p>将我们第一步创建的虚拟目录的路径增加到nginx.conf文件中去,将下面的内容加入到”http {}”部分的末尾</p>\n<pre><code>http {\n  ...\n  include /etc/nginx/vhost/*.conf;\n}\n</code></pre><p>5.重启nginx服务(注意:所有的配置文件修改保存后,先不急重新加载配置,先使用<code>nginx -t</code>测试下文件内容是否有错在进行重新加载配置操作)</p>\n<p><code>sudo service nginx restart</code></p>\n<p>6.访问<a href=\"http://www.siteA.com和www.siteB.com，你将发现浏览器会打开不同的站点\" target=\"_blank\" rel=\"noopener\">www.siteA.com和www.siteB.com，你将发现浏览器会打开不同的站点</a></p>\n<p>nginx禁止ip访问的小技巧:</p>\n<p>假如你的Nginx根目录设在”/home/user/www”，你想阻止别人通过”<a href=\"http://IP地址/blog”或”http://IP地址/forum”来访问你的站点，最简单的方法就是禁止IP地址访问。方法如下：\" target=\"_blank\" rel=\"noopener\">http://IP地址/blog”或”http://IP地址/forum”来访问你的站点，最简单的方法就是禁止IP地址访问。方法如下：</a></p>\n<p>打开Nginx网站默认配置文件，记得先备份</p>\n<p><code>sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/default_bak #备份原来的默认文件</code></p>\n<p><code>sudo vim /etc/nginx/sites-available/default #编辑文件</code></p>\n<p>将其所有内容删除，只留以下配置</p>\n<pre><code>server {\n  listen 80 default_server;\n  server_name _;\n  return 404;\n}\n</code></pre><p>然后重启nginx或者<code>nginx -s reload</code>使配置文件生效,别人将无法通过IP地址访问网站了</p>\n<p>如果你不想禁止IP地址访问整个目录，只是要防止别人通过IP访问你的博客和论坛。那就需要禁止”/blog”和”/forum”的目录访问</p>\n<p>打开Nginx网站默认配置文件，同上面一样，记得先备份一下</p>\n<p>在”server { }”节点的部分加上以下配置,然后重启nginx或者reload nginx配置即可.</p>\n<pre><code>location ^~ /blog/ {\n  deny all;\n}\nlocation ^~ /forum/ {\n  deny all;\n}\n</code></pre><p>7.nginx常用的配置选项模板<br>    /etc/nginx/nginx.conf</p>\n<pre><code>http {\n  sendfile on;\n  tcp_nopush on;\n  tcp_nodelay on;\n  keepalive_timeout 65;\n  types_hash_max_size 2048;\n  server_tokens off; # 关闭nginx版本标识\n\n  underscores_in_headers on; #自定义Header中含有下划线的情况 必须定义\n  gzip  on;\n  gzip_min_length 1k;\n  gzip_buffers 16 64k;\n  gzip_http_version 1.1;\n  gzip_comp_level 6;\n  gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n  gzip_vary on;\n  gzip_disable &quot;MSIE [1-6]\\.&quot;;\n\n  #proxy_connect_timeout 600;  #nginx跟后端服务器连接超时时间(代理连接超时)\n\n  proxy_buffer_size     32k;  #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n  proxy_buffers         4 32k;#proxy_buffers缓冲区，网页平均在32k以下的话，这样设置\n  proxy_busy_buffers_size  64k;           #高负荷下缓冲大小（proxy_buffers*2）\n  proxy_temp_file_write_size  1024m;       #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n  client_max_body_size 100M;\n\n  # 给后端服务器暴露获取客户端真实IP地址的头\n  proxy_set_header X-Real-IP $remote_addr;\n  proxy_set_header REMOTE-HOST $remote_addr;\n  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n  # websocket 支持\n  proxy_http_version 1.1;\n  proxy_set_header Upgrade $http_upgrade;\n  proxy_set_header Connection &quot;upgrade&quot;;\n  proxy_read_timeout    600;  #连接成功后，后端服务器响应时间(代理接收超时)\n  proxy_send_timeout    600;  #后端服务器数据回传时间(代理发送超时)\n}\n</code></pre><p>8.站点配置文件样例,例如:/etc/nginx/vhost/a.conf</p>\n<pre><code>server {\n  listen          80;\n  server_name     www.aaa.com  aaa.com;\n  root            /opt/pages/;\n  index           index.html index.htm;\n\n  # Cookie的HttpOnly属性，指示浏览器不要在除HTTP（和HTTPS)请求之外暴露Cookie。一个有HttpOnly属性的Cookie，是不可以通过例如调用JavaScript(引用document.cookie)这种非HTTP方式来访问。因此，也不可能通过跨域脚本（一种非常普通的攻击技术）来偷走这种Cookie。\n  add_header                  Set-Cookie &quot;HttpOnly&quot;;\n  # Cookie的Secure属性，意味着保持Cookie通信只限于加密传输，指示浏览器仅仅在通过安全/加密连接才能使用该Cookie。如果一个Web服务器从一个非安全连接里设置了一个带有secure属性的Cookie，当Cookie被发送到客户端时，它仍然能通过中间人攻击来拦截\n  add_header                  Set-Cookie &quot;Secure&quot;;\n  # X-Frame-Options HTTP 响应头是用来给浏览器指示允许一个页面可否在 &lt;frame&gt;, &lt;iframe&gt; 或者 &lt;object&gt; 中展现的标记。网站可以使用此功能，来确保自己网站的内容没有被嵌到别人的网站中去，也从而避免了点击劫持 (clickjacking) 的攻击。它有三个可选择项：(DENY：表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许；SAMEORIGIN：表示该页面可以在相同域名页面的 frame 中展示；ALLOW-FROM uri地址：表示该页面可以在指定来源的 frame 中展示；)\n  add_header                  X-Frame-Options &quot;SAMEORIGIN&quot;;\n\n  # 禁用OPTIONS TRACE不安全方法,屏蔽GET、POST、之外的HTTP方法\n  if ($request_method !~* GET|POST) {\n      return 403;\n  }\n\n  # 跨域配置\n  location / {\n    add_header Access-Control-Allow-Origin *;\n    add_header Access-Control-Allow-Methods &apos;GET, POST, OPTIONS&apos;;\n    add_header Access-Control-Allow-Headers &apos;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&apos;;\n\n    if ($request_method = &apos;OPTIONS&apos;) {\n      return 204;\n    }\n  }\n\n  # 转发以/api/开头的请求\n  location ^~ /api/ {\n    proxy_pass http://127.0.0.1:8080;\n  }\n\n  # 以/upload开头的请求\n  location ^~ /upload/ {\n    root  /opt/dir/;\n    expires   7d;\n  }\n}\n</code></pre><p>9.nginx负载均衡配置</p>\n<p>  在http节点下配置服务器列表</p>\n<pre><code>http {\n  # upstream模块：配置反向代理服务器组，Nginx会根据配置，将请求分发给组里的某一台服务器。serverGroup是服务器组的名称.\n  upstream serverGroup {\n    server 192.168.0.100:8080;\n    server 192.168.0.101:8080;\n  }\n  # serverGroup内部的server指令：配置处理请求的服务器IP或域名，端口可选，不配置默认使用80端口。通过上面的配置(默认的是轮询策略,把每个请求逐一分配到不同的server，如果分配到的server不可用，则分配到下一个，直到可用)，Nginx默认将请求依次分配给100，101来处理，可以通过修改下面这些参数来改变默认的分配策略：\n\n  1.weight权重,默认为1，将请求平均分配给每台server.值越大，则被访问的概率越大.下面标示101访问数量是100的2倍\n  upstream serverGroup {\n    server 192.168.0.100:8080 weight=1;\n    server 192.168.0.101:8080 weight=2 max_fails=3 fail_timeout=15;\n    server 192.168.0.102:8080 down; #down 表示当前服务器不参与负载均衡，也就是说不会被访问到\n    server 192.168.0.103:8080 backup; #backup 表示备份机，所有服务器挂了之后才会生效\n  }\n  max_fails:默认为1。某台Server允许请求失败的次数，超过最大次数后，在fail_timeout时间内，新的请求将不会分配给这台机器。如果设置为0，Nginx会将这台Server置为永久无效状态，然后将请求发给定义了proxy_next_upstream fastcgi_next_upstream, uwsgi_next_upstream, scgi_next_upstream, and memcached_next_upstream指令来处理这次错误的请求\n  fail_timeout:默认为10秒。某台Server达到max_fails次失败请求后，在fail_timeout期间内，nginx会认为这台Server暂时不可用，不会将请求分配给它\n\n  2.最少连接,把请求分配到连接数最少的server\n  upstream serverGroup {\n    least_conn;\n    server 192.168.0.100:8080;\n    server 192.168.0.101:8080;\n  }\n\n  3.ip_hash,根据访问客户端ip的hash值分配，这样同一客户端的请求都会被分配到同一个server上，如果牵扯到session的问题，用这个是最好的选择\n  upstream serverGroup {\n    ip_hash;\n    server 192.168.0.100:8080;\n    server 192.168.0.101:8080;\n  }\n}\n</code></pre><p>  在server节点下配置proxy_pass</p>\n<pre><code>server {\n    listen  80;\n    server_name serverGroup;\n    location / {\n      proxy_pass   http://serverGroup; # 表示将所有请求转发到tomcats服务器组中配置的某一台服务器上\n    }\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>摘要:\n  有时候你想在一台服务器上为不同的域名运行不同的站点。\n  比如www.siteA.com作为博客，www.siteB.com作为论坛。你可以把两个域名的IP都解析到你的服务器上，\n  但是没法在Nginx的根目录里同时运行两个不同的网站.\n  这时可以在nginx上面配置部署多个站点(使用nginx虚拟目录),为你节省服务器费用.\n  假设你把博客放在”/home/user/www/blog”下，论坛放在”/home/user/www/forum”下。下面我们就开始进行配置:\n</code></pre><p>1.在Nginx配置目录下，创建一个”vhost”目录。本例假设Nginx是默认安装，配置目录在”/etc/nginx”</p>\n<p><code>sudo mkdir /etc/nginx/vhost #创建保存站点配置文件的目录</code></p>\n<p>2.创建siteA的配置文件</p>\n<p>‘sudo vim /etc/nginx/vhost/siteA.conf #打开该文件(没有的话保存后会自动新建)’</p>\n<p>在文件里面输入以下配置内容(具体的相关目录及location内容根据自己实际情况修改,下面只是nginx配置文件的基本结构,其实可以拷贝nginx自带的配置文件到vhost目录下,然后对文件内容进行修改):</p>\n<pre><code>server {\n  listen 80; # 监听端口\n  server_name www.siteA.com siteA.com; # 站点域名\n  root /home/user/www/blog; # 站点根目录\n  index index.html index.htm index.php; # 默认导航页\n\n  #rewrite ^(.*) https://$host$1 permanent; #重定向到https\n\n  location / {\n    # WordPress固定链接URL重写\n    if (!-e $request_filename) {\n      rewrite (.*) /index.php;\n    }\n  }\n  location / {\n    # WordPress固定链接URL重写\n    if (!-e $request_filename) {\n      rewrite (.*) /index.php;\n    }\n  }\n  location ^~ /device/ {\n      proxy_pass http://127.0.0.1:8080;\n  }\n  location ^~ /upload/ {  \n    root  /aaa/bbb;\n    expires   7d;\n  }\n}\n</code></pre><p>3.跟第二步一样,创建siteB的配置文件.(“server_name”和”root”目录的内容和siteA不同)</p>\n<p>‘sudo vim /etc/nginx/vhost/siteB.conf #打开该文件(没有的话保存后会自动新建)’</p>\n<p>在文件里面输入以下配置内容(具体的相关目录及location内容根据自己实际情况修改,下面只是nginx配置文件的基本结构,其实可以拷贝nginx自带的配置文件到vhost目录下,然后对文件内容进行修改):</p>\n<pre><code>server {\n  listen 80; # 监听端口\n  server_name www.siteB.com siteB.com; # 站点域名\n  root /home/user/www/blog; # 站点根目录\n  index index.html index.htm index.php; # 默认导航页\n\n  #rewrite ^(.*) https://$host$1 permanent; #重定向到https\n\n  location / {\n    # WordPress固定链接URL重写\n    if (!-e $request_filename) {\n      rewrite (.*) /index.php;\n    }\n  }\n  location ^~ /device/ {\n      proxy_pass http://127.0.0.1:8080;\n  }\n  location ^~ /upload/ {  \n    root  /aaa/bbb;\n    expires   7d;\n  }\n  # websocket地址\n  location ^~ /ws {\n        proxy_pass http://127.0.0.1:10002;\n    }\n}\n</code></pre><p>4.打开编辑nginx的配置文件</p>\n<p><code>sudo vim /etc/nginx/nginx.conf</code></p>\n<p>将我们第一步创建的虚拟目录的路径增加到nginx.conf文件中去,将下面的内容加入到”http {}”部分的末尾</p>\n<pre><code>http {\n  ...\n  include /etc/nginx/vhost/*.conf;\n}\n</code></pre><p>5.重启nginx服务(注意:所有的配置文件修改保存后,先不急重新加载配置,先使用<code>nginx -t</code>测试下文件内容是否有错在进行重新加载配置操作)</p>\n<p><code>sudo service nginx restart</code></p>\n<p>6.访问<a href=\"http://www.siteA.com和www.siteB.com，你将发现浏览器会打开不同的站点\" target=\"_blank\" rel=\"noopener\">www.siteA.com和www.siteB.com，你将发现浏览器会打开不同的站点</a></p>\n<p>nginx禁止ip访问的小技巧:</p>\n<p>假如你的Nginx根目录设在”/home/user/www”，你想阻止别人通过”<a href=\"http://IP地址/blog”或”http://IP地址/forum”来访问你的站点，最简单的方法就是禁止IP地址访问。方法如下：\" target=\"_blank\" rel=\"noopener\">http://IP地址/blog”或”http://IP地址/forum”来访问你的站点，最简单的方法就是禁止IP地址访问。方法如下：</a></p>\n<p>打开Nginx网站默认配置文件，记得先备份</p>\n<p><code>sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/default_bak #备份原来的默认文件</code></p>\n<p><code>sudo vim /etc/nginx/sites-available/default #编辑文件</code></p>\n<p>将其所有内容删除，只留以下配置</p>\n<pre><code>server {\n  listen 80 default_server;\n  server_name _;\n  return 404;\n}\n</code></pre><p>然后重启nginx或者<code>nginx -s reload</code>使配置文件生效,别人将无法通过IP地址访问网站了</p>\n<p>如果你不想禁止IP地址访问整个目录，只是要防止别人通过IP访问你的博客和论坛。那就需要禁止”/blog”和”/forum”的目录访问</p>\n<p>打开Nginx网站默认配置文件，同上面一样，记得先备份一下</p>\n<p>在”server { }”节点的部分加上以下配置,然后重启nginx或者reload nginx配置即可.</p>\n<pre><code>location ^~ /blog/ {\n  deny all;\n}\nlocation ^~ /forum/ {\n  deny all;\n}\n</code></pre><p>7.nginx常用的配置选项模板<br>    /etc/nginx/nginx.conf</p>\n<pre><code>http {\n  sendfile on;\n  tcp_nopush on;\n  tcp_nodelay on;\n  keepalive_timeout 65;\n  types_hash_max_size 2048;\n  server_tokens off; # 关闭nginx版本标识\n\n  underscores_in_headers on; #自定义Header中含有下划线的情况 必须定义\n  gzip  on;\n  gzip_min_length 1k;\n  gzip_buffers 16 64k;\n  gzip_http_version 1.1;\n  gzip_comp_level 6;\n  gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n  gzip_vary on;\n  gzip_disable &quot;MSIE [1-6]\\.&quot;;\n\n  #proxy_connect_timeout 600;  #nginx跟后端服务器连接超时时间(代理连接超时)\n\n  proxy_buffer_size     32k;  #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n  proxy_buffers         4 32k;#proxy_buffers缓冲区，网页平均在32k以下的话，这样设置\n  proxy_busy_buffers_size  64k;           #高负荷下缓冲大小（proxy_buffers*2）\n  proxy_temp_file_write_size  1024m;       #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n  client_max_body_size 100M;\n\n  # 给后端服务器暴露获取客户端真实IP地址的头\n  proxy_set_header X-Real-IP $remote_addr;\n  proxy_set_header REMOTE-HOST $remote_addr;\n  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n  # websocket 支持\n  proxy_http_version 1.1;\n  proxy_set_header Upgrade $http_upgrade;\n  proxy_set_header Connection &quot;upgrade&quot;;\n  proxy_read_timeout    600;  #连接成功后，后端服务器响应时间(代理接收超时)\n  proxy_send_timeout    600;  #后端服务器数据回传时间(代理发送超时)\n}\n</code></pre><p>8.站点配置文件样例,例如:/etc/nginx/vhost/a.conf</p>\n<pre><code>server {\n  listen          80;\n  server_name     www.aaa.com  aaa.com;\n  root            /opt/pages/;\n  index           index.html index.htm;\n\n  # Cookie的HttpOnly属性，指示浏览器不要在除HTTP（和HTTPS)请求之外暴露Cookie。一个有HttpOnly属性的Cookie，是不可以通过例如调用JavaScript(引用document.cookie)这种非HTTP方式来访问。因此，也不可能通过跨域脚本（一种非常普通的攻击技术）来偷走这种Cookie。\n  add_header                  Set-Cookie &quot;HttpOnly&quot;;\n  # Cookie的Secure属性，意味着保持Cookie通信只限于加密传输，指示浏览器仅仅在通过安全/加密连接才能使用该Cookie。如果一个Web服务器从一个非安全连接里设置了一个带有secure属性的Cookie，当Cookie被发送到客户端时，它仍然能通过中间人攻击来拦截\n  add_header                  Set-Cookie &quot;Secure&quot;;\n  # X-Frame-Options HTTP 响应头是用来给浏览器指示允许一个页面可否在 &lt;frame&gt;, &lt;iframe&gt; 或者 &lt;object&gt; 中展现的标记。网站可以使用此功能，来确保自己网站的内容没有被嵌到别人的网站中去，也从而避免了点击劫持 (clickjacking) 的攻击。它有三个可选择项：(DENY：表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许；SAMEORIGIN：表示该页面可以在相同域名页面的 frame 中展示；ALLOW-FROM uri地址：表示该页面可以在指定来源的 frame 中展示；)\n  add_header                  X-Frame-Options &quot;SAMEORIGIN&quot;;\n\n  # 禁用OPTIONS TRACE不安全方法,屏蔽GET、POST、之外的HTTP方法\n  if ($request_method !~* GET|POST) {\n      return 403;\n  }\n\n  # 跨域配置\n  location / {\n    add_header Access-Control-Allow-Origin *;\n    add_header Access-Control-Allow-Methods &apos;GET, POST, OPTIONS&apos;;\n    add_header Access-Control-Allow-Headers &apos;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&apos;;\n\n    if ($request_method = &apos;OPTIONS&apos;) {\n      return 204;\n    }\n  }\n\n  # 转发以/api/开头的请求\n  location ^~ /api/ {\n    proxy_pass http://127.0.0.1:8080;\n  }\n\n  # 以/upload开头的请求\n  location ^~ /upload/ {\n    root  /opt/dir/;\n    expires   7d;\n  }\n}\n</code></pre><p>9.nginx负载均衡配置</p>\n<p>  在http节点下配置服务器列表</p>\n<pre><code>http {\n  # upstream模块：配置反向代理服务器组，Nginx会根据配置，将请求分发给组里的某一台服务器。serverGroup是服务器组的名称.\n  upstream serverGroup {\n    server 192.168.0.100:8080;\n    server 192.168.0.101:8080;\n  }\n  # serverGroup内部的server指令：配置处理请求的服务器IP或域名，端口可选，不配置默认使用80端口。通过上面的配置(默认的是轮询策略,把每个请求逐一分配到不同的server，如果分配到的server不可用，则分配到下一个，直到可用)，Nginx默认将请求依次分配给100，101来处理，可以通过修改下面这些参数来改变默认的分配策略：\n\n  1.weight权重,默认为1，将请求平均分配给每台server.值越大，则被访问的概率越大.下面标示101访问数量是100的2倍\n  upstream serverGroup {\n    server 192.168.0.100:8080 weight=1;\n    server 192.168.0.101:8080 weight=2 max_fails=3 fail_timeout=15;\n    server 192.168.0.102:8080 down; #down 表示当前服务器不参与负载均衡，也就是说不会被访问到\n    server 192.168.0.103:8080 backup; #backup 表示备份机，所有服务器挂了之后才会生效\n  }\n  max_fails:默认为1。某台Server允许请求失败的次数，超过最大次数后，在fail_timeout时间内，新的请求将不会分配给这台机器。如果设置为0，Nginx会将这台Server置为永久无效状态，然后将请求发给定义了proxy_next_upstream fastcgi_next_upstream, uwsgi_next_upstream, scgi_next_upstream, and memcached_next_upstream指令来处理这次错误的请求\n  fail_timeout:默认为10秒。某台Server达到max_fails次失败请求后，在fail_timeout期间内，nginx会认为这台Server暂时不可用，不会将请求分配给它\n\n  2.最少连接,把请求分配到连接数最少的server\n  upstream serverGroup {\n    least_conn;\n    server 192.168.0.100:8080;\n    server 192.168.0.101:8080;\n  }\n\n  3.ip_hash,根据访问客户端ip的hash值分配，这样同一客户端的请求都会被分配到同一个server上，如果牵扯到session的问题，用这个是最好的选择\n  upstream serverGroup {\n    ip_hash;\n    server 192.168.0.100:8080;\n    server 192.168.0.101:8080;\n  }\n}\n</code></pre><p>  在server节点下配置proxy_pass</p>\n<pre><code>server {\n    listen  80;\n    server_name serverGroup;\n    location / {\n      proxy_pass   http://serverGroup; # 表示将所有请求转发到tomcats服务器组中配置的某一台服务器上\n    }\n}\n</code></pre>"},{"title":"linux使用systemd方式添加开机自动执行脚本","date":"2019-06-26T02:31:19.000Z","_content":"  \n>前段时间在一台公网服务器上搭建了vpn服务用来映射内网一台gitlab服务器,实现跨网络也能进行代码提交等操作.过程中经过查找网络上的博客文档基本都没啥问题,但是后续使用过程中,发现客户端(pptp-linux)vpn连接会自动断开(大约是晚上的时候),后面写了一个脚本后台常驻,检测vpn是否连接,如果断开则自动重连.但是问题来了,如果服务器关机了然后开机,则不会自动去连接,需要手工执行连接的脚本.于是,查找相关的systemd方式实现开机启动执行相关脚本.由于内网服务器默认登录的账户不是root身份,所以使用其他小伙伴的建立/etc/rc.local文件的方式是未成功.以下是测试能够通过的方式(我的内网gitlab服务器是Ubuntu18.04.1-server版,理论上只要使用systemd的方式来管理系统服务启动的发行版都可以)\n\n### 准备好要执行的脚本文件(auto_conn.sh)\n\n```bash\n  #! /bin/sh\n  while true\n  pppdNum=`ifconfig | grep ppp0 | wc -l`\n  do echo \"pppdNum = $pppdNum\"\n  if [ $pppdNum -le 0 ]\n  then\n        # \n        echo \"vpn is down,waitting for connectting again...\"\n        sleep 10\n        pppdNum_1=`ifconfig | grep ppp0 | wc -l`\n        echo \"pppdNum = $pppdNum_1\"\n        #\n        if [ $pppdNum_1 -ge 1 ]\n        then\n            echo \"vpn has autolly connect success again!\"\n            # xxxxx是sudo执行的密码,每次连接后需要手工添加路由表,不然不能访问到服务器,ppp0是该网卡的名称.可通过ifconfig查看192.168.2.0/24是自己外网vpn服务器给内部电脑分配的内网ip网关前缀\n            echo 'xxxxx' | sudo -S route add -net 192.168.2.0/24 ppp0\n        else\n            echo \"connectting..\"\n            # xxxxx是sudo执行的密码,vpn_name是自定义vpn连接的名称,000.000.000.000是vpn服务器的ip(公网ip),username是vpn登录的用户名,passwd是vpn登录的密码\n            echo 'xxxxxx' | sudo -S pptpsetup --create vpn_name --server 000.000.000.000 --username username --password passwd vpn-only --encrypt --start\n            echo 'c vpn_client' > /var/run/xl2tpd/l2tp-control\n                sleep 10\n            # xxxxx是sudo执行的密码,每次连接后需要手工添加路由表,不然不能访问到服务器,ppp0是该网卡的名称.可通过ifconfig查看192.168.2.0/24是自己外网vpn服务器给内部电脑分配的内网ip网关前缀\n            echo 'xxxxxx' | sudo -S route add -net 192.168.2.0/24 ppp0\n        fi\n  fi\n  sleep 5\n\n  done\n```\n    注: 某条命令需要sudo执行的话,在脚本中可使用echo 'xxxxxx' | sudo -S 的方式,xxxxxx就是对应的密码\n\n然后给脚本添加执行权限.sudo chmod +x\n\n### 创建一个service文件\n\n`sudo vim /etc/systemd/system/auto_startVPN.service`\n\n详细内容如下:\n\n```bash\n[Unit]\nDescription=自动连接vpn #自定义的简介描述\nAfter=network-online.target.wants #脚本所需要的前置service，可在/etc/systemd/system/下查看\n\n[Service]\nExecStart=/home/xxx/xxx/auto_conn.sh #第一步中的脚本文件路径\n\n[Install]\nWantedBy=multi-user.target\n\n```\nservice文件一般正常的启动文件主要分成三部分\n\n[Unit] 段: 启动顺序与依赖关系\n\n[Service] 段: 启动行为,如何启动，启动类型\n\n[Install] 段: 定义如何安装这个配置文件，即怎样做到开机启动\n\n### 使用systemctl命令使能这个服务开机启动\n\n`sudo systemctl daemon-reload` //重新加载配置文件\n\n`sudo systemctl enable auto_startVPN.service` //设置开机启动刚刚新建的自动连接vpn的服务\n\n重启电脑,等待个大约10多秒,执行ifconfig,会发现连接中会有ppp0这个网卡设备和对应的ip地址等信息,说明脚本执行成功也成功的自动连接上了vpn服务器.","source":"_posts/linux使用systemd方式添加开机自动执行脚本.md","raw":"---\ntitle: linux使用systemd方式添加开机自动执行脚本\ndate: 2019-06-26 10:31:19\ntags:\n  - linux\n---\n  \n>前段时间在一台公网服务器上搭建了vpn服务用来映射内网一台gitlab服务器,实现跨网络也能进行代码提交等操作.过程中经过查找网络上的博客文档基本都没啥问题,但是后续使用过程中,发现客户端(pptp-linux)vpn连接会自动断开(大约是晚上的时候),后面写了一个脚本后台常驻,检测vpn是否连接,如果断开则自动重连.但是问题来了,如果服务器关机了然后开机,则不会自动去连接,需要手工执行连接的脚本.于是,查找相关的systemd方式实现开机启动执行相关脚本.由于内网服务器默认登录的账户不是root身份,所以使用其他小伙伴的建立/etc/rc.local文件的方式是未成功.以下是测试能够通过的方式(我的内网gitlab服务器是Ubuntu18.04.1-server版,理论上只要使用systemd的方式来管理系统服务启动的发行版都可以)\n\n### 准备好要执行的脚本文件(auto_conn.sh)\n\n```bash\n  #! /bin/sh\n  while true\n  pppdNum=`ifconfig | grep ppp0 | wc -l`\n  do echo \"pppdNum = $pppdNum\"\n  if [ $pppdNum -le 0 ]\n  then\n        # \n        echo \"vpn is down,waitting for connectting again...\"\n        sleep 10\n        pppdNum_1=`ifconfig | grep ppp0 | wc -l`\n        echo \"pppdNum = $pppdNum_1\"\n        #\n        if [ $pppdNum_1 -ge 1 ]\n        then\n            echo \"vpn has autolly connect success again!\"\n            # xxxxx是sudo执行的密码,每次连接后需要手工添加路由表,不然不能访问到服务器,ppp0是该网卡的名称.可通过ifconfig查看192.168.2.0/24是自己外网vpn服务器给内部电脑分配的内网ip网关前缀\n            echo 'xxxxx' | sudo -S route add -net 192.168.2.0/24 ppp0\n        else\n            echo \"connectting..\"\n            # xxxxx是sudo执行的密码,vpn_name是自定义vpn连接的名称,000.000.000.000是vpn服务器的ip(公网ip),username是vpn登录的用户名,passwd是vpn登录的密码\n            echo 'xxxxxx' | sudo -S pptpsetup --create vpn_name --server 000.000.000.000 --username username --password passwd vpn-only --encrypt --start\n            echo 'c vpn_client' > /var/run/xl2tpd/l2tp-control\n                sleep 10\n            # xxxxx是sudo执行的密码,每次连接后需要手工添加路由表,不然不能访问到服务器,ppp0是该网卡的名称.可通过ifconfig查看192.168.2.0/24是自己外网vpn服务器给内部电脑分配的内网ip网关前缀\n            echo 'xxxxxx' | sudo -S route add -net 192.168.2.0/24 ppp0\n        fi\n  fi\n  sleep 5\n\n  done\n```\n    注: 某条命令需要sudo执行的话,在脚本中可使用echo 'xxxxxx' | sudo -S 的方式,xxxxxx就是对应的密码\n\n然后给脚本添加执行权限.sudo chmod +x\n\n### 创建一个service文件\n\n`sudo vim /etc/systemd/system/auto_startVPN.service`\n\n详细内容如下:\n\n```bash\n[Unit]\nDescription=自动连接vpn #自定义的简介描述\nAfter=network-online.target.wants #脚本所需要的前置service，可在/etc/systemd/system/下查看\n\n[Service]\nExecStart=/home/xxx/xxx/auto_conn.sh #第一步中的脚本文件路径\n\n[Install]\nWantedBy=multi-user.target\n\n```\nservice文件一般正常的启动文件主要分成三部分\n\n[Unit] 段: 启动顺序与依赖关系\n\n[Service] 段: 启动行为,如何启动，启动类型\n\n[Install] 段: 定义如何安装这个配置文件，即怎样做到开机启动\n\n### 使用systemctl命令使能这个服务开机启动\n\n`sudo systemctl daemon-reload` //重新加载配置文件\n\n`sudo systemctl enable auto_startVPN.service` //设置开机启动刚刚新建的自动连接vpn的服务\n\n重启电脑,等待个大约10多秒,执行ifconfig,会发现连接中会有ppp0这个网卡设备和对应的ip地址等信息,说明脚本执行成功也成功的自动连接上了vpn服务器.","slug":"linux使用systemd方式添加开机自动执行脚本","published":1,"updated":"2019-09-02T07:37:22.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck024pnvu000wy6fg3gqr080q","content":"<blockquote>\n<p>前段时间在一台公网服务器上搭建了vpn服务用来映射内网一台gitlab服务器,实现跨网络也能进行代码提交等操作.过程中经过查找网络上的博客文档基本都没啥问题,但是后续使用过程中,发现客户端(pptp-linux)vpn连接会自动断开(大约是晚上的时候),后面写了一个脚本后台常驻,检测vpn是否连接,如果断开则自动重连.但是问题来了,如果服务器关机了然后开机,则不会自动去连接,需要手工执行连接的脚本.于是,查找相关的systemd方式实现开机启动执行相关脚本.由于内网服务器默认登录的账户不是root身份,所以使用其他小伙伴的建立/etc/rc.local文件的方式是未成功.以下是测试能够通过的方式(我的内网gitlab服务器是Ubuntu18.04.1-server版,理论上只要使用systemd的方式来管理系统服务启动的发行版都可以)</p>\n</blockquote>\n<h3 id=\"准备好要执行的脚本文件-auto-conn-sh\"><a href=\"#准备好要执行的脚本文件-auto-conn-sh\" class=\"headerlink\" title=\"准备好要执行的脚本文件(auto_conn.sh)\"></a>准备好要执行的脚本文件(auto_conn.sh)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/sh</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></span><br><span class=\"line\">pppdNum=`ifconfig | grep ppp0 | wc -l`</span><br><span class=\"line\"><span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> <span class=\"string\">\"pppdNum = <span class=\"variable\">$pppdNum</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$pppdNum</span> -le 0 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">      <span class=\"comment\"># </span></span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"vpn is down,waitting for connectting again...\"</span></span><br><span class=\"line\">      sleep 10</span><br><span class=\"line\">      pppdNum_1=`ifconfig | grep ppp0 | wc -l`</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"pppdNum = <span class=\"variable\">$pppdNum_1</span>\"</span></span><br><span class=\"line\">      <span class=\"comment\">#</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> [ <span class=\"variable\">$pppdNum_1</span> -ge 1 ]</span><br><span class=\"line\">      <span class=\"keyword\">then</span></span><br><span class=\"line\">          <span class=\"built_in\">echo</span> <span class=\"string\">\"vpn has autolly connect success again!\"</span></span><br><span class=\"line\">          <span class=\"comment\"># xxxxx是sudo执行的密码,每次连接后需要手工添加路由表,不然不能访问到服务器,ppp0是该网卡的名称.可通过ifconfig查看192.168.2.0/24是自己外网vpn服务器给内部电脑分配的内网ip网关前缀</span></span><br><span class=\"line\">          <span class=\"built_in\">echo</span> <span class=\"string\">'xxxxx'</span> | sudo -S route add -net 192.168.2.0/24 ppp0</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">          <span class=\"built_in\">echo</span> <span class=\"string\">\"connectting..\"</span></span><br><span class=\"line\">          <span class=\"comment\"># xxxxx是sudo执行的密码,vpn_name是自定义vpn连接的名称,000.000.000.000是vpn服务器的ip(公网ip),username是vpn登录的用户名,passwd是vpn登录的密码</span></span><br><span class=\"line\">          <span class=\"built_in\">echo</span> <span class=\"string\">'xxxxxx'</span> | sudo -S pptpsetup --create vpn_name --server 000.000.000.000 --username username --password passwd vpn-only --encrypt --start</span><br><span class=\"line\">          <span class=\"built_in\">echo</span> <span class=\"string\">'c vpn_client'</span> &gt; /var/run/xl2tpd/l2tp-control</span><br><span class=\"line\">              sleep 10</span><br><span class=\"line\">          <span class=\"comment\"># xxxxx是sudo执行的密码,每次连接后需要手工添加路由表,不然不能访问到服务器,ppp0是该网卡的名称.可通过ifconfig查看192.168.2.0/24是自己外网vpn服务器给内部电脑分配的内网ip网关前缀</span></span><br><span class=\"line\">          <span class=\"built_in\">echo</span> <span class=\"string\">'xxxxxx'</span> | sudo -S route add -net 192.168.2.0/24 ppp0</span><br><span class=\"line\">      <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">sleep 5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<pre><code>注: 某条命令需要sudo执行的话,在脚本中可使用echo &apos;xxxxxx&apos; | sudo -S 的方式,xxxxxx就是对应的密码\n</code></pre><p>然后给脚本添加执行权限.sudo chmod +x</p>\n<h3 id=\"创建一个service文件\"><a href=\"#创建一个service文件\" class=\"headerlink\" title=\"创建一个service文件\"></a>创建一个service文件</h3><p><code>sudo vim /etc/systemd/system/auto_startVPN.service</code></p>\n<p>详细内容如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=自动连接vpn <span class=\"comment\">#自定义的简介描述</span></span><br><span class=\"line\">After=network-online.target.wants <span class=\"comment\">#脚本所需要的前置service，可在/etc/systemd/system/下查看</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/home/xxx/xxx/auto_conn.sh <span class=\"comment\">#第一步中的脚本文件路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<p>service文件一般正常的启动文件主要分成三部分</p>\n<p>[Unit] 段: 启动顺序与依赖关系</p>\n<p>[Service] 段: 启动行为,如何启动，启动类型</p>\n<p>[Install] 段: 定义如何安装这个配置文件，即怎样做到开机启动</p>\n<h3 id=\"使用systemctl命令使能这个服务开机启动\"><a href=\"#使用systemctl命令使能这个服务开机启动\" class=\"headerlink\" title=\"使用systemctl命令使能这个服务开机启动\"></a>使用systemctl命令使能这个服务开机启动</h3><p><code>sudo systemctl daemon-reload</code> //重新加载配置文件</p>\n<p><code>sudo systemctl enable auto_startVPN.service</code> //设置开机启动刚刚新建的自动连接vpn的服务</p>\n<p>重启电脑,等待个大约10多秒,执行ifconfig,会发现连接中会有ppp0这个网卡设备和对应的ip地址等信息,说明脚本执行成功也成功的自动连接上了vpn服务器.</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>前段时间在一台公网服务器上搭建了vpn服务用来映射内网一台gitlab服务器,实现跨网络也能进行代码提交等操作.过程中经过查找网络上的博客文档基本都没啥问题,但是后续使用过程中,发现客户端(pptp-linux)vpn连接会自动断开(大约是晚上的时候),后面写了一个脚本后台常驻,检测vpn是否连接,如果断开则自动重连.但是问题来了,如果服务器关机了然后开机,则不会自动去连接,需要手工执行连接的脚本.于是,查找相关的systemd方式实现开机启动执行相关脚本.由于内网服务器默认登录的账户不是root身份,所以使用其他小伙伴的建立/etc/rc.local文件的方式是未成功.以下是测试能够通过的方式(我的内网gitlab服务器是Ubuntu18.04.1-server版,理论上只要使用systemd的方式来管理系统服务启动的发行版都可以)</p>\n</blockquote>\n<h3 id=\"准备好要执行的脚本文件-auto-conn-sh\"><a href=\"#准备好要执行的脚本文件-auto-conn-sh\" class=\"headerlink\" title=\"准备好要执行的脚本文件(auto_conn.sh)\"></a>准备好要执行的脚本文件(auto_conn.sh)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/sh</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></span><br><span class=\"line\">pppdNum=`ifconfig | grep ppp0 | wc -l`</span><br><span class=\"line\"><span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> <span class=\"string\">\"pppdNum = <span class=\"variable\">$pppdNum</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$pppdNum</span> -le 0 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">      <span class=\"comment\"># </span></span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"vpn is down,waitting for connectting again...\"</span></span><br><span class=\"line\">      sleep 10</span><br><span class=\"line\">      pppdNum_1=`ifconfig | grep ppp0 | wc -l`</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"pppdNum = <span class=\"variable\">$pppdNum_1</span>\"</span></span><br><span class=\"line\">      <span class=\"comment\">#</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> [ <span class=\"variable\">$pppdNum_1</span> -ge 1 ]</span><br><span class=\"line\">      <span class=\"keyword\">then</span></span><br><span class=\"line\">          <span class=\"built_in\">echo</span> <span class=\"string\">\"vpn has autolly connect success again!\"</span></span><br><span class=\"line\">          <span class=\"comment\"># xxxxx是sudo执行的密码,每次连接后需要手工添加路由表,不然不能访问到服务器,ppp0是该网卡的名称.可通过ifconfig查看192.168.2.0/24是自己外网vpn服务器给内部电脑分配的内网ip网关前缀</span></span><br><span class=\"line\">          <span class=\"built_in\">echo</span> <span class=\"string\">'xxxxx'</span> | sudo -S route add -net 192.168.2.0/24 ppp0</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">          <span class=\"built_in\">echo</span> <span class=\"string\">\"connectting..\"</span></span><br><span class=\"line\">          <span class=\"comment\"># xxxxx是sudo执行的密码,vpn_name是自定义vpn连接的名称,000.000.000.000是vpn服务器的ip(公网ip),username是vpn登录的用户名,passwd是vpn登录的密码</span></span><br><span class=\"line\">          <span class=\"built_in\">echo</span> <span class=\"string\">'xxxxxx'</span> | sudo -S pptpsetup --create vpn_name --server 000.000.000.000 --username username --password passwd vpn-only --encrypt --start</span><br><span class=\"line\">          <span class=\"built_in\">echo</span> <span class=\"string\">'c vpn_client'</span> &gt; /var/run/xl2tpd/l2tp-control</span><br><span class=\"line\">              sleep 10</span><br><span class=\"line\">          <span class=\"comment\"># xxxxx是sudo执行的密码,每次连接后需要手工添加路由表,不然不能访问到服务器,ppp0是该网卡的名称.可通过ifconfig查看192.168.2.0/24是自己外网vpn服务器给内部电脑分配的内网ip网关前缀</span></span><br><span class=\"line\">          <span class=\"built_in\">echo</span> <span class=\"string\">'xxxxxx'</span> | sudo -S route add -net 192.168.2.0/24 ppp0</span><br><span class=\"line\">      <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">sleep 5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<pre><code>注: 某条命令需要sudo执行的话,在脚本中可使用echo &apos;xxxxxx&apos; | sudo -S 的方式,xxxxxx就是对应的密码\n</code></pre><p>然后给脚本添加执行权限.sudo chmod +x</p>\n<h3 id=\"创建一个service文件\"><a href=\"#创建一个service文件\" class=\"headerlink\" title=\"创建一个service文件\"></a>创建一个service文件</h3><p><code>sudo vim /etc/systemd/system/auto_startVPN.service</code></p>\n<p>详细内容如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=自动连接vpn <span class=\"comment\">#自定义的简介描述</span></span><br><span class=\"line\">After=network-online.target.wants <span class=\"comment\">#脚本所需要的前置service，可在/etc/systemd/system/下查看</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/home/xxx/xxx/auto_conn.sh <span class=\"comment\">#第一步中的脚本文件路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<p>service文件一般正常的启动文件主要分成三部分</p>\n<p>[Unit] 段: 启动顺序与依赖关系</p>\n<p>[Service] 段: 启动行为,如何启动，启动类型</p>\n<p>[Install] 段: 定义如何安装这个配置文件，即怎样做到开机启动</p>\n<h3 id=\"使用systemctl命令使能这个服务开机启动\"><a href=\"#使用systemctl命令使能这个服务开机启动\" class=\"headerlink\" title=\"使用systemctl命令使能这个服务开机启动\"></a>使用systemctl命令使能这个服务开机启动</h3><p><code>sudo systemctl daemon-reload</code> //重新加载配置文件</p>\n<p><code>sudo systemctl enable auto_startVPN.service</code> //设置开机启动刚刚新建的自动连接vpn的服务</p>\n<p>重启电脑,等待个大约10多秒,执行ifconfig,会发现连接中会有ppp0这个网卡设备和对应的ip地址等信息,说明脚本执行成功也成功的自动连接上了vpn服务器.</p>\n"},{"title":"nginx限制某个IP同一时间段的访问次数","date":"2019-04-22T03:59:11.000Z","_content":"  摘要:\n      \n    nginx可以通过HttpLimitReqModul和HttpLimitZoneModule配置来限制ip在同一时间段的访问次数来防cc攻击\n\n    HttpLimitReqModul用来限制连单位时间内连接数的模块，使用limit_req_zone和limit_req指令配合使用来达到限制。一旦并发连接超过指定数量，就会返回503错误。\n\n    HttpLimitConnModul用来限制单个ip的并发连接数，使用limit_zone和limit_conn指令\n\n    注:两个模块的区别前一个是对一段时间内的连接数限制，后者是对同一时刻的连接数限制\n\n### HttpLimitReqModul 限制某一段时间内同一ip访问数实例\n\n在http作用域下配置limit_req_zone指令,如下:\n  ```json\n    http{\n      ...\n      #定义一个名为allips的limit_req_zone用来存储session，大小是10M内存，\n      #以$binary_remote_addr 为key,限制平均每秒的请求为20个，\n      #1M能存储16000个状态，rete的值必须为整数，\n      #如果限制两秒钟一个请求，可以设置成30r/m\n      limit_req_zone $binary_remote_addr zone=allips:10m rate=20r/s;\n      ...\n      server{\n          ...\n          location {\n              ...\n  \n              #限制每ip每秒不超过20个请求，漏桶数burst为5\n              #brust的意思就是，如果第1秒、2,3,4秒请求为19个，\n              #第5秒的请求为25个是被允许的。\n              #但是如果你第1秒就25个请求，第2秒超过20的请求返回503错误。\n              #nodelay，如果不设置该选项，严格使用平均速率限制请求数，\n              #第1秒25个请求时，5个请求放到第2秒执行，\n              #设置nodelay，25个请求将在第1秒执行。\n  \n              limit_req zone=allips burst=5 nodelay;\n              ...\n          }\n          ...\n      }\n      ...\n}\n  ```\n\n### HttpLimitZoneModule 限制并发连接数实例\n\n在http作用域下配置limit_zone指令,limit_zone只能定义在http作用域，limit_conn可以定义在http server location作用域.如下\n\n```json\n  http{\n    ...\n \n    #定义一个名为one的limit_zone,大小10M内存来存储session，\n    #以$binary_remote_addr 为key\n    #nginx 1.18以后用limit_conn_zone替换了limit_conn\n    #且只能放在http作用域\n    limit_conn_zone   one  $binary_remote_addr  10m; \n    ...\n    server{\n        ...\n        location {\n            ...\n           limit_conn one 20;          #连接数限制\n \n           #带宽限制,对单个连接限数，如果一个ip两个连接，就是500x2k\n           limit_rate 500k;           \n \n            ...\n        }\n        ...\n    }\n    ...\n}\n```\n\n### nginx白名单设置\n\n上面默认配置对多有的ip都有限制,有些时候我们不希望对搜索引擎的蜘蛛或者自己测试ip进行限制，\n对于特定的白名单ip我们可以借助geo指令实现,如下:\n    \n    geo指令定义了一个白名单$limited变量，默认值为1，如果客户端ip在上面的范围内，$limited的值为0\n\n```json\n  http{\n     geo $limited{\n        default 1;\n        #google\n        64.233.160.0/19 0;\n        65.52.0.0/14 0;\n        66.102.0.0/20 0;\n        66.249.64.0/19 0;\n        72.14.192.0/18 0;\n        74.125.0.0/16 0;\n        209.85.128.0/17 0;\n        216.239.32.0/19 0;\n        #M$\n        64.4.0.0/18 0;\n        157.60.0.0/16 0;\n        157.54.0.0/15 0;\n        157.56.0.0/14 0;\n        207.46.0.0/16 0;\n        207.68.192.0/20 0;\n        207.68.128.0/18 0;\n        #yahoo\n        8.12.144.0/24 0;\n        66.196.64.0/18 0;\n        66.228.160.0/19 0;\n        67.195.0.0/16 0;\n        74.6.0.0/16 0;\n        68.142.192.0/18 0;\n        72.30.0.0/16 0;\n        209.191.64.0/18 0;\n        #My IPs\n        127.0.0.1/32 0;\n        123.456.0.0/28 0; #example for your server CIDR\n    }\n```","source":"_posts/nginx限制某个IP同一时间段的访问次数.md","raw":"---\ntitle: nginx限制某个IP同一时间段的访问次数\ndate: 2019-04-22 11:59:11\ntags:\n  - nginx\n---\n  摘要:\n      \n    nginx可以通过HttpLimitReqModul和HttpLimitZoneModule配置来限制ip在同一时间段的访问次数来防cc攻击\n\n    HttpLimitReqModul用来限制连单位时间内连接数的模块，使用limit_req_zone和limit_req指令配合使用来达到限制。一旦并发连接超过指定数量，就会返回503错误。\n\n    HttpLimitConnModul用来限制单个ip的并发连接数，使用limit_zone和limit_conn指令\n\n    注:两个模块的区别前一个是对一段时间内的连接数限制，后者是对同一时刻的连接数限制\n\n### HttpLimitReqModul 限制某一段时间内同一ip访问数实例\n\n在http作用域下配置limit_req_zone指令,如下:\n  ```json\n    http{\n      ...\n      #定义一个名为allips的limit_req_zone用来存储session，大小是10M内存，\n      #以$binary_remote_addr 为key,限制平均每秒的请求为20个，\n      #1M能存储16000个状态，rete的值必须为整数，\n      #如果限制两秒钟一个请求，可以设置成30r/m\n      limit_req_zone $binary_remote_addr zone=allips:10m rate=20r/s;\n      ...\n      server{\n          ...\n          location {\n              ...\n  \n              #限制每ip每秒不超过20个请求，漏桶数burst为5\n              #brust的意思就是，如果第1秒、2,3,4秒请求为19个，\n              #第5秒的请求为25个是被允许的。\n              #但是如果你第1秒就25个请求，第2秒超过20的请求返回503错误。\n              #nodelay，如果不设置该选项，严格使用平均速率限制请求数，\n              #第1秒25个请求时，5个请求放到第2秒执行，\n              #设置nodelay，25个请求将在第1秒执行。\n  \n              limit_req zone=allips burst=5 nodelay;\n              ...\n          }\n          ...\n      }\n      ...\n}\n  ```\n\n### HttpLimitZoneModule 限制并发连接数实例\n\n在http作用域下配置limit_zone指令,limit_zone只能定义在http作用域，limit_conn可以定义在http server location作用域.如下\n\n```json\n  http{\n    ...\n \n    #定义一个名为one的limit_zone,大小10M内存来存储session，\n    #以$binary_remote_addr 为key\n    #nginx 1.18以后用limit_conn_zone替换了limit_conn\n    #且只能放在http作用域\n    limit_conn_zone   one  $binary_remote_addr  10m; \n    ...\n    server{\n        ...\n        location {\n            ...\n           limit_conn one 20;          #连接数限制\n \n           #带宽限制,对单个连接限数，如果一个ip两个连接，就是500x2k\n           limit_rate 500k;           \n \n            ...\n        }\n        ...\n    }\n    ...\n}\n```\n\n### nginx白名单设置\n\n上面默认配置对多有的ip都有限制,有些时候我们不希望对搜索引擎的蜘蛛或者自己测试ip进行限制，\n对于特定的白名单ip我们可以借助geo指令实现,如下:\n    \n    geo指令定义了一个白名单$limited变量，默认值为1，如果客户端ip在上面的范围内，$limited的值为0\n\n```json\n  http{\n     geo $limited{\n        default 1;\n        #google\n        64.233.160.0/19 0;\n        65.52.0.0/14 0;\n        66.102.0.0/20 0;\n        66.249.64.0/19 0;\n        72.14.192.0/18 0;\n        74.125.0.0/16 0;\n        209.85.128.0/17 0;\n        216.239.32.0/19 0;\n        #M$\n        64.4.0.0/18 0;\n        157.60.0.0/16 0;\n        157.54.0.0/15 0;\n        157.56.0.0/14 0;\n        207.46.0.0/16 0;\n        207.68.192.0/20 0;\n        207.68.128.0/18 0;\n        #yahoo\n        8.12.144.0/24 0;\n        66.196.64.0/18 0;\n        66.228.160.0/19 0;\n        67.195.0.0/16 0;\n        74.6.0.0/16 0;\n        68.142.192.0/18 0;\n        72.30.0.0/16 0;\n        209.191.64.0/18 0;\n        #My IPs\n        127.0.0.1/32 0;\n        123.456.0.0/28 0; #example for your server CIDR\n    }\n```","slug":"nginx限制某个IP同一时间段的访问次数","published":1,"updated":"2019-09-02T07:37:22.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck024pnvv000yy6fghtt7hqrt","content":"<p>  摘要:</p>\n<pre><code>nginx可以通过HttpLimitReqModul和HttpLimitZoneModule配置来限制ip在同一时间段的访问次数来防cc攻击\n\nHttpLimitReqModul用来限制连单位时间内连接数的模块，使用limit_req_zone和limit_req指令配合使用来达到限制。一旦并发连接超过指定数量，就会返回503错误。\n\nHttpLimitConnModul用来限制单个ip的并发连接数，使用limit_zone和limit_conn指令\n\n注:两个模块的区别前一个是对一段时间内的连接数限制，后者是对同一时刻的连接数限制\n</code></pre><h3 id=\"HttpLimitReqModul-限制某一段时间内同一ip访问数实例\"><a href=\"#HttpLimitReqModul-限制某一段时间内同一ip访问数实例\" class=\"headerlink\" title=\"HttpLimitReqModul 限制某一段时间内同一ip访问数实例\"></a>HttpLimitReqModul 限制某一段时间内同一ip访问数实例</h3><p>在http作用域下配置limit_req_zone指令,如下:<br>  <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    http&#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      #定义一个名为allips的limit_req_zone用来存储session，大小是10M内存，</span><br><span class=\"line\">      #以$binary_remote_addr 为key,限制平均每秒的请求为20个，</span><br><span class=\"line\">      #1M能存储16000个状态，rete的值必须为整数，</span><br><span class=\"line\">      #如果限制两秒钟一个请求，可以设置成30r/m</span><br><span class=\"line\">      limit_req_zone $binary_remote_addr zone=allips:10m rate=20r/s;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      server&#123;</span><br><span class=\"line\">          ...</span><br><span class=\"line\">          location &#123;</span><br><span class=\"line\">              ...</span><br><span class=\"line\">  </span><br><span class=\"line\">              #限制每ip每秒不超过20个请求，漏桶数burst为5</span><br><span class=\"line\">              #brust的意思就是，如果第1秒、2,3,4秒请求为19个，</span><br><span class=\"line\">              #第5秒的请求为25个是被允许的。</span><br><span class=\"line\">              #但是如果你第1秒就25个请求，第2秒超过20的请求返回503错误。</span><br><span class=\"line\">              #nodelay，如果不设置该选项，严格使用平均速率限制请求数，</span><br><span class=\"line\">              #第1秒25个请求时，5个请求放到第2秒执行，</span><br><span class=\"line\">              #设置nodelay，25个请求将在第1秒执行。</span><br><span class=\"line\">  </span><br><span class=\"line\">              limit_req zone=allips burst=5 nodelay;</span><br><span class=\"line\">              ...</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          ...</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"HttpLimitZoneModule-限制并发连接数实例\"><a href=\"#HttpLimitZoneModule-限制并发连接数实例\" class=\"headerlink\" title=\"HttpLimitZoneModule 限制并发连接数实例\"></a>HttpLimitZoneModule 限制并发连接数实例</h3><p>在http作用域下配置limit_zone指令,limit_zone只能定义在http作用域，limit_conn可以定义在http server location作用域.如下</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  http&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"> </span><br><span class=\"line\">    #定义一个名为one的limit_zone,大小10M内存来存储session，</span><br><span class=\"line\">    #以$binary_remote_addr 为key</span><br><span class=\"line\">    #nginx 1.18以后用limit_conn_zone替换了limit_conn</span><br><span class=\"line\">    #且只能放在http作用域</span><br><span class=\"line\">    limit_conn_zone   one  $binary_remote_addr  10m; </span><br><span class=\"line\">    ...</span><br><span class=\"line\">    server&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        location &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">           limit_conn one 20;          #连接数限制</span><br><span class=\"line\"> </span><br><span class=\"line\">           #带宽限制,对单个连接限数，如果一个ip两个连接，就是500x2k</span><br><span class=\"line\">           limit_rate 500k;           </span><br><span class=\"line\"> </span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"nginx白名单设置\"><a href=\"#nginx白名单设置\" class=\"headerlink\" title=\"nginx白名单设置\"></a>nginx白名单设置</h3><p>上面默认配置对多有的ip都有限制,有些时候我们不希望对搜索引擎的蜘蛛或者自己测试ip进行限制，<br>对于特定的白名单ip我们可以借助geo指令实现,如下:</p>\n<pre><code>geo指令定义了一个白名单$limited变量，默认值为1，如果客户端ip在上面的范围内，$limited的值为0\n</code></pre><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">   geo $limited&#123;</span><br><span class=\"line\">      default 1;</span><br><span class=\"line\">      #google</span><br><span class=\"line\">      64.233.160.0/19 0;</span><br><span class=\"line\">      65.52.0.0/14 0;</span><br><span class=\"line\">      66.102.0.0/20 0;</span><br><span class=\"line\">      66.249.64.0/19 0;</span><br><span class=\"line\">      72.14.192.0/18 0;</span><br><span class=\"line\">      74.125.0.0/16 0;</span><br><span class=\"line\">      209.85.128.0/17 0;</span><br><span class=\"line\">      216.239.32.0/19 0;</span><br><span class=\"line\">      #M$</span><br><span class=\"line\">      64.4.0.0/18 0;</span><br><span class=\"line\">      157.60.0.0/16 0;</span><br><span class=\"line\">      157.54.0.0/15 0;</span><br><span class=\"line\">      157.56.0.0/14 0;</span><br><span class=\"line\">      207.46.0.0/16 0;</span><br><span class=\"line\">      207.68.192.0/20 0;</span><br><span class=\"line\">      207.68.128.0/18 0;</span><br><span class=\"line\">      #yahoo</span><br><span class=\"line\">      8.12.144.0/24 0;</span><br><span class=\"line\">      66.196.64.0/18 0;</span><br><span class=\"line\">      66.228.160.0/19 0;</span><br><span class=\"line\">      67.195.0.0/16 0;</span><br><span class=\"line\">      74.6.0.0/16 0;</span><br><span class=\"line\">      68.142.192.0/18 0;</span><br><span class=\"line\">      72.30.0.0/16 0;</span><br><span class=\"line\">      209.191.64.0/18 0;</span><br><span class=\"line\">      #My IPs</span><br><span class=\"line\">      127.0.0.1/32 0;</span><br><span class=\"line\">      123.456.0.0/28 0; #example for your server CIDR</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>  摘要:</p>\n<pre><code>nginx可以通过HttpLimitReqModul和HttpLimitZoneModule配置来限制ip在同一时间段的访问次数来防cc攻击\n\nHttpLimitReqModul用来限制连单位时间内连接数的模块，使用limit_req_zone和limit_req指令配合使用来达到限制。一旦并发连接超过指定数量，就会返回503错误。\n\nHttpLimitConnModul用来限制单个ip的并发连接数，使用limit_zone和limit_conn指令\n\n注:两个模块的区别前一个是对一段时间内的连接数限制，后者是对同一时刻的连接数限制\n</code></pre><h3 id=\"HttpLimitReqModul-限制某一段时间内同一ip访问数实例\"><a href=\"#HttpLimitReqModul-限制某一段时间内同一ip访问数实例\" class=\"headerlink\" title=\"HttpLimitReqModul 限制某一段时间内同一ip访问数实例\"></a>HttpLimitReqModul 限制某一段时间内同一ip访问数实例</h3><p>在http作用域下配置limit_req_zone指令,如下:<br>  <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    http&#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      #定义一个名为allips的limit_req_zone用来存储session，大小是10M内存，</span><br><span class=\"line\">      #以$binary_remote_addr 为key,限制平均每秒的请求为20个，</span><br><span class=\"line\">      #1M能存储16000个状态，rete的值必须为整数，</span><br><span class=\"line\">      #如果限制两秒钟一个请求，可以设置成30r/m</span><br><span class=\"line\">      limit_req_zone $binary_remote_addr zone=allips:10m rate=20r/s;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      server&#123;</span><br><span class=\"line\">          ...</span><br><span class=\"line\">          location &#123;</span><br><span class=\"line\">              ...</span><br><span class=\"line\">  </span><br><span class=\"line\">              #限制每ip每秒不超过20个请求，漏桶数burst为5</span><br><span class=\"line\">              #brust的意思就是，如果第1秒、2,3,4秒请求为19个，</span><br><span class=\"line\">              #第5秒的请求为25个是被允许的。</span><br><span class=\"line\">              #但是如果你第1秒就25个请求，第2秒超过20的请求返回503错误。</span><br><span class=\"line\">              #nodelay，如果不设置该选项，严格使用平均速率限制请求数，</span><br><span class=\"line\">              #第1秒25个请求时，5个请求放到第2秒执行，</span><br><span class=\"line\">              #设置nodelay，25个请求将在第1秒执行。</span><br><span class=\"line\">  </span><br><span class=\"line\">              limit_req zone=allips burst=5 nodelay;</span><br><span class=\"line\">              ...</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          ...</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"HttpLimitZoneModule-限制并发连接数实例\"><a href=\"#HttpLimitZoneModule-限制并发连接数实例\" class=\"headerlink\" title=\"HttpLimitZoneModule 限制并发连接数实例\"></a>HttpLimitZoneModule 限制并发连接数实例</h3><p>在http作用域下配置limit_zone指令,limit_zone只能定义在http作用域，limit_conn可以定义在http server location作用域.如下</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  http&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"> </span><br><span class=\"line\">    #定义一个名为one的limit_zone,大小10M内存来存储session，</span><br><span class=\"line\">    #以$binary_remote_addr 为key</span><br><span class=\"line\">    #nginx 1.18以后用limit_conn_zone替换了limit_conn</span><br><span class=\"line\">    #且只能放在http作用域</span><br><span class=\"line\">    limit_conn_zone   one  $binary_remote_addr  10m; </span><br><span class=\"line\">    ...</span><br><span class=\"line\">    server&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        location &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">           limit_conn one 20;          #连接数限制</span><br><span class=\"line\"> </span><br><span class=\"line\">           #带宽限制,对单个连接限数，如果一个ip两个连接，就是500x2k</span><br><span class=\"line\">           limit_rate 500k;           </span><br><span class=\"line\"> </span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"nginx白名单设置\"><a href=\"#nginx白名单设置\" class=\"headerlink\" title=\"nginx白名单设置\"></a>nginx白名单设置</h3><p>上面默认配置对多有的ip都有限制,有些时候我们不希望对搜索引擎的蜘蛛或者自己测试ip进行限制，<br>对于特定的白名单ip我们可以借助geo指令实现,如下:</p>\n<pre><code>geo指令定义了一个白名单$limited变量，默认值为1，如果客户端ip在上面的范围内，$limited的值为0\n</code></pre><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">   geo $limited&#123;</span><br><span class=\"line\">      default 1;</span><br><span class=\"line\">      #google</span><br><span class=\"line\">      64.233.160.0/19 0;</span><br><span class=\"line\">      65.52.0.0/14 0;</span><br><span class=\"line\">      66.102.0.0/20 0;</span><br><span class=\"line\">      66.249.64.0/19 0;</span><br><span class=\"line\">      72.14.192.0/18 0;</span><br><span class=\"line\">      74.125.0.0/16 0;</span><br><span class=\"line\">      209.85.128.0/17 0;</span><br><span class=\"line\">      216.239.32.0/19 0;</span><br><span class=\"line\">      #M$</span><br><span class=\"line\">      64.4.0.0/18 0;</span><br><span class=\"line\">      157.60.0.0/16 0;</span><br><span class=\"line\">      157.54.0.0/15 0;</span><br><span class=\"line\">      157.56.0.0/14 0;</span><br><span class=\"line\">      207.46.0.0/16 0;</span><br><span class=\"line\">      207.68.192.0/20 0;</span><br><span class=\"line\">      207.68.128.0/18 0;</span><br><span class=\"line\">      #yahoo</span><br><span class=\"line\">      8.12.144.0/24 0;</span><br><span class=\"line\">      66.196.64.0/18 0;</span><br><span class=\"line\">      66.228.160.0/19 0;</span><br><span class=\"line\">      67.195.0.0/16 0;</span><br><span class=\"line\">      74.6.0.0/16 0;</span><br><span class=\"line\">      68.142.192.0/18 0;</span><br><span class=\"line\">      72.30.0.0/16 0;</span><br><span class=\"line\">      209.191.64.0/18 0;</span><br><span class=\"line\">      #My IPs</span><br><span class=\"line\">      127.0.0.1/32 0;</span><br><span class=\"line\">      123.456.0.0/28 0; #example for your server CIDR</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>"},{"title":"linux系统之间远程连接和传输文件","date":"2018-08-07T02:06:41.000Z","_content":"\n    >摘要: \n            \n    1.Windows与Windows系统之间可以开启远程桌面连接实现远程控制和传输文件,也可以搭建ftp服务器然后通过ftp客户端\n    (例如:fileZilla)来实现.\n    2.从Windows到Linux,可以使用xshell等工具来实现远程连接.然后使用winscp等工具实现文件传输.当然在Linux上\n    搭建ftp服务器,然后用ftp客户端连接也可\n    3.从Linux(桌面版,server版一般没必要)到Windows.可以使用remmina工具来远程连接Windows进行连接操作.\n    文件拷贝推荐在Windows上搭建ftpserver(fileZilla-server),然后使用fileZilla client连接传输文件.\n\n     注:fileZilla跨平台的.占用资源少,操作方便.简直神器~\n     \n    4.另外一种方式就是不分双方的操作系统.只要在对应的机器上安装对应的一些工具,比如teamviewer等.也可实现远程连接\n    和文件传输.\n    5.Linux到Linux之间通常是桌面端到server端的操作,有时候为了方便或者为了减少服务器资源占用,server端不需要安装\n    额外的一些工具等,这时推荐使用Linux下的ssh和scp命令进行操作(大力推荐~)\n\n## 1.ssh命令\n\n  简单说，SSH是一种网络协议，用于计算机之间的加密登录。如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露.SSH只是一种协议，存在多种实现，既有商业实现，也有开源实现。本文针对的实现是OpenSSH(linux一般自带)，它是自由软件，应用非常广泛.注:ssh协议默认端口一般是22\n  \n    ssh -V 查看当前安装的ssh版本\n\n1.1 连接到远程主机方式1\n    \n    ssh username@serverAddress username是登录远程主机的用户名,serverAddress远程主机地址\n\n1.2 连接到远程主机方式2\n\n    ssh serverAddress -l username -p 22 serverAddress远程主机地址,可以是一个域名地址或者ip地址,\n    username是登录远程主机的用户名, -p 指定远程服务端ssh协议开放的端口.\n\n## 2.scp命令\n\n    scp用于实现在Linux server端和Linux客户端实现文件传输\n\n2.1 上传文件到服务器端,注:是文件,不是文件夹\n\n    scp ./test.js root@192.168.1.106:/var/www/ #将本地当前目录下的test.js文件上传到192.168.1.106的\n    /var/www/目录下.root登录远程及其的用户名.\n\n2.2 上传文件夹(目录)到服务器端\n\n    scp -r ./test/ root@192.168.1.106:/var/www/ #将本地当前目录下的test目录上传到192.168.1.106的/var/www/目录下.\n    -r参数代表上传目录\n\n2.3 从服务器上下载文件\n\n    scp root@192.168.1.106:/var/www/test.js /home/ #将服务器/var/www/目录下的test.js文件下载到本地的home目录下\n\n2.4 从服务器下载整个目录\n\n    scp -r root@192.168.1.106:/var/www/test/ /home/ #将服务器上的/var/www/test/目录下载到本地的home目录下\n    -r参数代表目录","source":"_posts/linux系统之间远程连接和传输文件.md","raw":"---\ntitle: linux系统之间远程连接和传输文件\ndate: 2018-08-07 10:06:41\ntags: linux\n---\n\n    >摘要: \n            \n    1.Windows与Windows系统之间可以开启远程桌面连接实现远程控制和传输文件,也可以搭建ftp服务器然后通过ftp客户端\n    (例如:fileZilla)来实现.\n    2.从Windows到Linux,可以使用xshell等工具来实现远程连接.然后使用winscp等工具实现文件传输.当然在Linux上\n    搭建ftp服务器,然后用ftp客户端连接也可\n    3.从Linux(桌面版,server版一般没必要)到Windows.可以使用remmina工具来远程连接Windows进行连接操作.\n    文件拷贝推荐在Windows上搭建ftpserver(fileZilla-server),然后使用fileZilla client连接传输文件.\n\n     注:fileZilla跨平台的.占用资源少,操作方便.简直神器~\n     \n    4.另外一种方式就是不分双方的操作系统.只要在对应的机器上安装对应的一些工具,比如teamviewer等.也可实现远程连接\n    和文件传输.\n    5.Linux到Linux之间通常是桌面端到server端的操作,有时候为了方便或者为了减少服务器资源占用,server端不需要安装\n    额外的一些工具等,这时推荐使用Linux下的ssh和scp命令进行操作(大力推荐~)\n\n## 1.ssh命令\n\n  简单说，SSH是一种网络协议，用于计算机之间的加密登录。如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露.SSH只是一种协议，存在多种实现，既有商业实现，也有开源实现。本文针对的实现是OpenSSH(linux一般自带)，它是自由软件，应用非常广泛.注:ssh协议默认端口一般是22\n  \n    ssh -V 查看当前安装的ssh版本\n\n1.1 连接到远程主机方式1\n    \n    ssh username@serverAddress username是登录远程主机的用户名,serverAddress远程主机地址\n\n1.2 连接到远程主机方式2\n\n    ssh serverAddress -l username -p 22 serverAddress远程主机地址,可以是一个域名地址或者ip地址,\n    username是登录远程主机的用户名, -p 指定远程服务端ssh协议开放的端口.\n\n## 2.scp命令\n\n    scp用于实现在Linux server端和Linux客户端实现文件传输\n\n2.1 上传文件到服务器端,注:是文件,不是文件夹\n\n    scp ./test.js root@192.168.1.106:/var/www/ #将本地当前目录下的test.js文件上传到192.168.1.106的\n    /var/www/目录下.root登录远程及其的用户名.\n\n2.2 上传文件夹(目录)到服务器端\n\n    scp -r ./test/ root@192.168.1.106:/var/www/ #将本地当前目录下的test目录上传到192.168.1.106的/var/www/目录下.\n    -r参数代表上传目录\n\n2.3 从服务器上下载文件\n\n    scp root@192.168.1.106:/var/www/test.js /home/ #将服务器/var/www/目录下的test.js文件下载到本地的home目录下\n\n2.4 从服务器下载整个目录\n\n    scp -r root@192.168.1.106:/var/www/test/ /home/ #将服务器上的/var/www/test/目录下载到本地的home目录下\n    -r参数代表目录","slug":"linux系统之间远程连接和传输文件","published":1,"updated":"2019-09-02T07:37:22.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck024pnvx0011y6fga6vp7lwx","content":"<pre><code>&gt;摘要: \n\n1.Windows与Windows系统之间可以开启远程桌面连接实现远程控制和传输文件,也可以搭建ftp服务器然后通过ftp客户端\n(例如:fileZilla)来实现.\n2.从Windows到Linux,可以使用xshell等工具来实现远程连接.然后使用winscp等工具实现文件传输.当然在Linux上\n搭建ftp服务器,然后用ftp客户端连接也可\n3.从Linux(桌面版,server版一般没必要)到Windows.可以使用remmina工具来远程连接Windows进行连接操作.\n文件拷贝推荐在Windows上搭建ftpserver(fileZilla-server),然后使用fileZilla client连接传输文件.\n\n 注:fileZilla跨平台的.占用资源少,操作方便.简直神器~\n\n4.另外一种方式就是不分双方的操作系统.只要在对应的机器上安装对应的一些工具,比如teamviewer等.也可实现远程连接\n和文件传输.\n5.Linux到Linux之间通常是桌面端到server端的操作,有时候为了方便或者为了减少服务器资源占用,server端不需要安装\n额外的一些工具等,这时推荐使用Linux下的ssh和scp命令进行操作(大力推荐~)\n</code></pre><h2 id=\"1-ssh命令\"><a href=\"#1-ssh命令\" class=\"headerlink\" title=\"1.ssh命令\"></a>1.ssh命令</h2><p>  简单说，SSH是一种网络协议，用于计算机之间的加密登录。如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露.SSH只是一种协议，存在多种实现，既有商业实现，也有开源实现。本文针对的实现是OpenSSH(linux一般自带)，它是自由软件，应用非常广泛.注:ssh协议默认端口一般是22</p>\n<pre><code>ssh -V 查看当前安装的ssh版本\n</code></pre><p>1.1 连接到远程主机方式1</p>\n<pre><code>ssh username@serverAddress username是登录远程主机的用户名,serverAddress远程主机地址\n</code></pre><p>1.2 连接到远程主机方式2</p>\n<pre><code>ssh serverAddress -l username -p 22 serverAddress远程主机地址,可以是一个域名地址或者ip地址,\nusername是登录远程主机的用户名, -p 指定远程服务端ssh协议开放的端口.\n</code></pre><h2 id=\"2-scp命令\"><a href=\"#2-scp命令\" class=\"headerlink\" title=\"2.scp命令\"></a>2.scp命令</h2><pre><code>scp用于实现在Linux server端和Linux客户端实现文件传输\n</code></pre><p>2.1 上传文件到服务器端,注:是文件,不是文件夹</p>\n<pre><code>scp ./test.js root@192.168.1.106:/var/www/ #将本地当前目录下的test.js文件上传到192.168.1.106的\n/var/www/目录下.root登录远程及其的用户名.\n</code></pre><p>2.2 上传文件夹(目录)到服务器端</p>\n<pre><code>scp -r ./test/ root@192.168.1.106:/var/www/ #将本地当前目录下的test目录上传到192.168.1.106的/var/www/目录下.\n-r参数代表上传目录\n</code></pre><p>2.3 从服务器上下载文件</p>\n<pre><code>scp root@192.168.1.106:/var/www/test.js /home/ #将服务器/var/www/目录下的test.js文件下载到本地的home目录下\n</code></pre><p>2.4 从服务器下载整个目录</p>\n<pre><code>scp -r root@192.168.1.106:/var/www/test/ /home/ #将服务器上的/var/www/test/目录下载到本地的home目录下\n-r参数代表目录\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>&gt;摘要: \n\n1.Windows与Windows系统之间可以开启远程桌面连接实现远程控制和传输文件,也可以搭建ftp服务器然后通过ftp客户端\n(例如:fileZilla)来实现.\n2.从Windows到Linux,可以使用xshell等工具来实现远程连接.然后使用winscp等工具实现文件传输.当然在Linux上\n搭建ftp服务器,然后用ftp客户端连接也可\n3.从Linux(桌面版,server版一般没必要)到Windows.可以使用remmina工具来远程连接Windows进行连接操作.\n文件拷贝推荐在Windows上搭建ftpserver(fileZilla-server),然后使用fileZilla client连接传输文件.\n\n 注:fileZilla跨平台的.占用资源少,操作方便.简直神器~\n\n4.另外一种方式就是不分双方的操作系统.只要在对应的机器上安装对应的一些工具,比如teamviewer等.也可实现远程连接\n和文件传输.\n5.Linux到Linux之间通常是桌面端到server端的操作,有时候为了方便或者为了减少服务器资源占用,server端不需要安装\n额外的一些工具等,这时推荐使用Linux下的ssh和scp命令进行操作(大力推荐~)\n</code></pre><h2 id=\"1-ssh命令\"><a href=\"#1-ssh命令\" class=\"headerlink\" title=\"1.ssh命令\"></a>1.ssh命令</h2><p>  简单说，SSH是一种网络协议，用于计算机之间的加密登录。如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露.SSH只是一种协议，存在多种实现，既有商业实现，也有开源实现。本文针对的实现是OpenSSH(linux一般自带)，它是自由软件，应用非常广泛.注:ssh协议默认端口一般是22</p>\n<pre><code>ssh -V 查看当前安装的ssh版本\n</code></pre><p>1.1 连接到远程主机方式1</p>\n<pre><code>ssh username@serverAddress username是登录远程主机的用户名,serverAddress远程主机地址\n</code></pre><p>1.2 连接到远程主机方式2</p>\n<pre><code>ssh serverAddress -l username -p 22 serverAddress远程主机地址,可以是一个域名地址或者ip地址,\nusername是登录远程主机的用户名, -p 指定远程服务端ssh协议开放的端口.\n</code></pre><h2 id=\"2-scp命令\"><a href=\"#2-scp命令\" class=\"headerlink\" title=\"2.scp命令\"></a>2.scp命令</h2><pre><code>scp用于实现在Linux server端和Linux客户端实现文件传输\n</code></pre><p>2.1 上传文件到服务器端,注:是文件,不是文件夹</p>\n<pre><code>scp ./test.js root@192.168.1.106:/var/www/ #将本地当前目录下的test.js文件上传到192.168.1.106的\n/var/www/目录下.root登录远程及其的用户名.\n</code></pre><p>2.2 上传文件夹(目录)到服务器端</p>\n<pre><code>scp -r ./test/ root@192.168.1.106:/var/www/ #将本地当前目录下的test目录上传到192.168.1.106的/var/www/目录下.\n-r参数代表上传目录\n</code></pre><p>2.3 从服务器上下载文件</p>\n<pre><code>scp root@192.168.1.106:/var/www/test.js /home/ #将服务器/var/www/目录下的test.js文件下载到本地的home目录下\n</code></pre><p>2.4 从服务器下载整个目录</p>\n<pre><code>scp -r root@192.168.1.106:/var/www/test/ /home/ #将服务器上的/var/www/test/目录下载到本地的home目录下\n-r参数代表目录\n</code></pre>"},{"title":"nginx-rtmp-module-ffmpeg视频推流和rtsp转rtmp及hls","date":"2019-05-31T08:53:11.000Z","_content":"\n### RTSP、RTMP、HTTP协议比较\n\n#### 共同点\n\n1.都是用在应用层的协议\n\n2.理论上这三种协议都可以做直播和点播，但直播一般用RTSP和RTMP点播用HTTP\n\n#### 不同点\n\n1.HTTP协议（HyperText Transfer Protocol，超文本传输协议)，是因特网上应用最为广泛的一种网络传输协议，所有的WWW文件都必须遵守这个标准,HTTP是一个基于TCP/IP通信协议来传递数据(HTML 文件, 图片文件, 查询结果等).所以HTTP不是流媒体协议，RTMP和RTSP是流媒体协议\n\n2.RTMP是Real Time Messaging Protocol（实时消息传输协议）的首字母缩写。该协议基于TCP，是一个协议族，包括RTMP基本协议及RTMPT/RTMPS/RTMPE等多种变种。RTMP是一种设计用来进行实时数据通信的网络协议，主要用来在Flash/AIR平台和支持RTMP协议的流媒体/交互服务器之间进行音视频和数据通信,RTMP一般传输flv,f4v格式流.\n\n3.RTSP（Real Time Streaming Protocol），RFC2326，实时流传输协议.RTSP以客户端方式工作，对流媒体提供播放、暂停、后退、前进等操作.RTSP传输的一般是TS、MP4格式的流，其传输一般需要2~3个通道，命令和数据通道分离。使用RTSP协议传输流媒体数据需要有专门的媒体播放器和媒体服务器，也就是需要支持RTSP协议的客户端和服务器。\n\n### ffmpeg简介\n\nFFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。它包括了目前领先的音/视频编码库libavcodec.可以轻易地实现多种视频格式之间的相互转换，例如可以将摄录下的视频avi等转成现在视频网站所采用的flv格式\n\n### nginx+nginx-rtmp-moudle安装\n\n分别下载nginx和nginx-rtmp的源码然后进行编译即可.在此,为了方便我是直接使用的docker的tiangolo/nginx-rtmp镜像,docker安装参考上一篇初识docker文档\n\n`docker pull tiangolo/nginx-rtmp` // 拉取nginx-rtmp镜像\n\n`docker run -it --name nginx-rtmp tiangolo/nginx-rtmp -p 1935:1935` // 第一次运行容器,取个别名,后续可直接使用 `docker start nginx-rtmp`\n\n使用`netstat -tunlp | grep 1935` 检测1935端口是否正在监听,正常情况是正在监听中\n\n### ffmpeg安装\n\n`sudo apt install ffmpeg` // 安装ffmpeg(我当前环境deepin,仓库里面自带ffmpeg包)\n\n其他操作系统需要去官网下载对应的安装包即可或者按照官方文档添加对应系统的ppa进行安装即可.\n\nffmpeg参数:\n\n-re : 表示使用文件的原始帧率进行读取，因为ffmpeg读取视频帧的速度很快，如果不使用这个参数，ffmpeg可以在很短时间就把video.mp4中的视频帧全部读取完并进行推流，这样就无法体现出视频播放的效果了\n\n-i :这个参数表示输入 ，后面跟的路劲文件就是输入文件。\n\n-vcodec copy : -vcodec表示使用的视频编解码器 ，前缀v表示video。后面紧跟的copy 表示复制使用源文件的视频编解码器，比如原文件的编解码器(codec)是h264，则这里就使用h264\n\n-acodec copy : -acodec表示使用的音频编解码器，前缀a表示audio。后面的copy 表示使用源文件的音频编解码器\n\n-b:v 800k : -b:v表示视频的比特率(bitrate) ，为800k\n\n-b:a 32k : 表示音频的比特率为32k\n\n-f flv : -f表示format ，就是强制输出格式为flv，这一步其实也叫封装(mux)，封装要做的事就是把视频和音频混合在一起，进行同步。紧跟在后面的rtmp://xxx.xxx.xxx/xxx 表示输出的\"文件名\"，这个文件名可以是一个本地的文件，也可以指定为rtmp流媒体地址。指定为rtmp流媒体地址后，则ffmpeg就可以进行推流\n\n### ffmpeg将rtsp转码为rtmp\n\n使用ffmpeg命令,将rtsp转码为rtmp.ffmpeg参数项很多,未对其深究,直接参考网友的命令的.-i后面是rtsp流地址.\n\n`ffmpeg -re -rtsp_transport tcp -i \"rtsp://184.72.239.149/vod/mp4://BigBuckBunny_175k.mov\" -f flv -vcodec libx264 -vprofile baseline -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -r 10 -s 1280x720 -q 10 \"rtmp://127.0.0.1:1935/live/demo\"`\n\n    在执行转码命令过程中,可能会报信息类似 Past duration 0.999992 too large 的警告错误,经查询资料,是在-r参数后面\n    指定的视频帧率参数导致的.rtsp://184.72.239.149/vod/mp4://BigBuckBunny_175k.mov这个地址是网络上的地址,\n    可使用vlc media player查看源的帧率而设置\n\n#### 使用VLC media player测试播放转换后的rtmp地址\n\n打开VLC media player播放器.在工具栏\"媒体->打开网络串流\"然后输入rtmp://127.0.0.1:1935/live/demo点击确定即可进行直播预览转换后的rtmp视频流\n\n![](/images/rtmp-result.png)\n\n### ffmpeg将rtsp转码为hls\n\n使用ffmpeg命令,将rtsp转码为hls.ffmpeg参数项很多,未对其深究,直接参考网友的命令的.-i后面是rtsp流地址.\n\n`ffmpeg -f rtsp -rtsp_transport tcp -i rtsp://192.168.100.2/longzhu/demo_2 -r 23 -f hls -hls_time 4 -hls_list_size 5 -hls_wrap 10 /home/bz/Desktop/h5live/longzhuchao.m3u8`\n\n    在执行转码命令过程中,可能会报信息类似 Past duration 0.999992 too large 的警告错误,经查询资料,是在-r参数后面\n    指定的视频帧率参数导致的.rtsp://184.72.239.149/vod/mp4://BigBuckBunny_175k.mov这个地址是网络上的地址,\n    可使用vlc media player查看源的帧率而设置\n\n#### 使用VLC media player测试播放转换后的hls地址(m3u8文件)\n\n打开VLC media player播放器.在工具栏\"媒体->打开网络串流\"然后输入http://192.168.100.31/hlsvideo/longzhuchao.m3u8点击确定即可进行直播预览转换后的rtmp视频流,该地址是在nginx中配置了的\n\n![](/images/hls-result.png)\n\n### ffmpeg推送视频文件到rtsp服务器\n\n`ffmpeg -re -i ./龙珠超.布罗利.mp4 -vcodec copy -codec copy -f rtsp rtsp://192.168.252.1/longzhu/demo_2`\n\n    注:使用了easydarwin,rtsp://192.168.252.1地址就是启动easydarwin成功后的rtsp server地址\n\n#### 使用VLC media player测试播放推流后rtsp地址\n\n![](/images/push_to_rtsp.png)\n\n### ffmpeg推送视频文件到rtmp服务器\n\n`ffmpeg -re -i ./龙珠超.布罗利.mp4 -vcodec copy -acodec copy -b:v 800k -b:a 32k -f flv rtmp://192.168.100.31:1935/rtmplive_demo/demo_3`\n\n    注:rtmp地址中的rtmplive_demo必须和nginx中配置的application名称一致才能推流成功,192.168.100.31是我的一台虚拟机\n\n#### 使用VLC media player测试播放推流后rtmp地址\n\n![](/images/push_to_rtmp.png)\n\n### ffmpeg转发rtsp流\n\n`ffmpeg -i rtsp://192.168.100.2:8554/longzhu/live -codec copy -f rtsp rtsp://192.168.252.1/longzhu/demo_1`\n\n    第一个rtsp是源地址,第二个是新地址.但是必须保证新地址是能够支持rtsp协议的才行.我试过使用nginx+rtsp是不能够\n    成功的.所以换成了easydarwin,rtsp://192.168.252.1地址就是启动easydarwin成功后的rtsp server地址.\n\n效果图如下:\n\n![](/images/rtsp_to_rtsp.png)\n\n**注:关于测试rtsp地址问题,上面的地址我测试的时候能够使用,但是不能保证以后能够一直正常使用,所以有网友图文讲解了使用VLC media player自制rtsp流.小伙伴的力量强大!其地址如下:https://blog.csdn.net/taoerit/article/details/51920018 \n为了防止地址失效,我将页面截了一张完整图.图片如下:**\n\n![](/images/build_push_rtsp.jpg)","source":"_posts/nginx-rtmp-module-ffmpeg视频推流和rtsp转rtmp及hls.md","raw":"---\ntitle: nginx-rtmp-module-ffmpeg视频推流和rtsp转rtmp及hls\ndate: 2019-05-31 16:53:11\ntags:\n  - nginx\n  - rtmp\n  - rtsp\n  - ffmpeg\n---\n\n### RTSP、RTMP、HTTP协议比较\n\n#### 共同点\n\n1.都是用在应用层的协议\n\n2.理论上这三种协议都可以做直播和点播，但直播一般用RTSP和RTMP点播用HTTP\n\n#### 不同点\n\n1.HTTP协议（HyperText Transfer Protocol，超文本传输协议)，是因特网上应用最为广泛的一种网络传输协议，所有的WWW文件都必须遵守这个标准,HTTP是一个基于TCP/IP通信协议来传递数据(HTML 文件, 图片文件, 查询结果等).所以HTTP不是流媒体协议，RTMP和RTSP是流媒体协议\n\n2.RTMP是Real Time Messaging Protocol（实时消息传输协议）的首字母缩写。该协议基于TCP，是一个协议族，包括RTMP基本协议及RTMPT/RTMPS/RTMPE等多种变种。RTMP是一种设计用来进行实时数据通信的网络协议，主要用来在Flash/AIR平台和支持RTMP协议的流媒体/交互服务器之间进行音视频和数据通信,RTMP一般传输flv,f4v格式流.\n\n3.RTSP（Real Time Streaming Protocol），RFC2326，实时流传输协议.RTSP以客户端方式工作，对流媒体提供播放、暂停、后退、前进等操作.RTSP传输的一般是TS、MP4格式的流，其传输一般需要2~3个通道，命令和数据通道分离。使用RTSP协议传输流媒体数据需要有专门的媒体播放器和媒体服务器，也就是需要支持RTSP协议的客户端和服务器。\n\n### ffmpeg简介\n\nFFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。它包括了目前领先的音/视频编码库libavcodec.可以轻易地实现多种视频格式之间的相互转换，例如可以将摄录下的视频avi等转成现在视频网站所采用的flv格式\n\n### nginx+nginx-rtmp-moudle安装\n\n分别下载nginx和nginx-rtmp的源码然后进行编译即可.在此,为了方便我是直接使用的docker的tiangolo/nginx-rtmp镜像,docker安装参考上一篇初识docker文档\n\n`docker pull tiangolo/nginx-rtmp` // 拉取nginx-rtmp镜像\n\n`docker run -it --name nginx-rtmp tiangolo/nginx-rtmp -p 1935:1935` // 第一次运行容器,取个别名,后续可直接使用 `docker start nginx-rtmp`\n\n使用`netstat -tunlp | grep 1935` 检测1935端口是否正在监听,正常情况是正在监听中\n\n### ffmpeg安装\n\n`sudo apt install ffmpeg` // 安装ffmpeg(我当前环境deepin,仓库里面自带ffmpeg包)\n\n其他操作系统需要去官网下载对应的安装包即可或者按照官方文档添加对应系统的ppa进行安装即可.\n\nffmpeg参数:\n\n-re : 表示使用文件的原始帧率进行读取，因为ffmpeg读取视频帧的速度很快，如果不使用这个参数，ffmpeg可以在很短时间就把video.mp4中的视频帧全部读取完并进行推流，这样就无法体现出视频播放的效果了\n\n-i :这个参数表示输入 ，后面跟的路劲文件就是输入文件。\n\n-vcodec copy : -vcodec表示使用的视频编解码器 ，前缀v表示video。后面紧跟的copy 表示复制使用源文件的视频编解码器，比如原文件的编解码器(codec)是h264，则这里就使用h264\n\n-acodec copy : -acodec表示使用的音频编解码器，前缀a表示audio。后面的copy 表示使用源文件的音频编解码器\n\n-b:v 800k : -b:v表示视频的比特率(bitrate) ，为800k\n\n-b:a 32k : 表示音频的比特率为32k\n\n-f flv : -f表示format ，就是强制输出格式为flv，这一步其实也叫封装(mux)，封装要做的事就是把视频和音频混合在一起，进行同步。紧跟在后面的rtmp://xxx.xxx.xxx/xxx 表示输出的\"文件名\"，这个文件名可以是一个本地的文件，也可以指定为rtmp流媒体地址。指定为rtmp流媒体地址后，则ffmpeg就可以进行推流\n\n### ffmpeg将rtsp转码为rtmp\n\n使用ffmpeg命令,将rtsp转码为rtmp.ffmpeg参数项很多,未对其深究,直接参考网友的命令的.-i后面是rtsp流地址.\n\n`ffmpeg -re -rtsp_transport tcp -i \"rtsp://184.72.239.149/vod/mp4://BigBuckBunny_175k.mov\" -f flv -vcodec libx264 -vprofile baseline -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -r 10 -s 1280x720 -q 10 \"rtmp://127.0.0.1:1935/live/demo\"`\n\n    在执行转码命令过程中,可能会报信息类似 Past duration 0.999992 too large 的警告错误,经查询资料,是在-r参数后面\n    指定的视频帧率参数导致的.rtsp://184.72.239.149/vod/mp4://BigBuckBunny_175k.mov这个地址是网络上的地址,\n    可使用vlc media player查看源的帧率而设置\n\n#### 使用VLC media player测试播放转换后的rtmp地址\n\n打开VLC media player播放器.在工具栏\"媒体->打开网络串流\"然后输入rtmp://127.0.0.1:1935/live/demo点击确定即可进行直播预览转换后的rtmp视频流\n\n![](/images/rtmp-result.png)\n\n### ffmpeg将rtsp转码为hls\n\n使用ffmpeg命令,将rtsp转码为hls.ffmpeg参数项很多,未对其深究,直接参考网友的命令的.-i后面是rtsp流地址.\n\n`ffmpeg -f rtsp -rtsp_transport tcp -i rtsp://192.168.100.2/longzhu/demo_2 -r 23 -f hls -hls_time 4 -hls_list_size 5 -hls_wrap 10 /home/bz/Desktop/h5live/longzhuchao.m3u8`\n\n    在执行转码命令过程中,可能会报信息类似 Past duration 0.999992 too large 的警告错误,经查询资料,是在-r参数后面\n    指定的视频帧率参数导致的.rtsp://184.72.239.149/vod/mp4://BigBuckBunny_175k.mov这个地址是网络上的地址,\n    可使用vlc media player查看源的帧率而设置\n\n#### 使用VLC media player测试播放转换后的hls地址(m3u8文件)\n\n打开VLC media player播放器.在工具栏\"媒体->打开网络串流\"然后输入http://192.168.100.31/hlsvideo/longzhuchao.m3u8点击确定即可进行直播预览转换后的rtmp视频流,该地址是在nginx中配置了的\n\n![](/images/hls-result.png)\n\n### ffmpeg推送视频文件到rtsp服务器\n\n`ffmpeg -re -i ./龙珠超.布罗利.mp4 -vcodec copy -codec copy -f rtsp rtsp://192.168.252.1/longzhu/demo_2`\n\n    注:使用了easydarwin,rtsp://192.168.252.1地址就是启动easydarwin成功后的rtsp server地址\n\n#### 使用VLC media player测试播放推流后rtsp地址\n\n![](/images/push_to_rtsp.png)\n\n### ffmpeg推送视频文件到rtmp服务器\n\n`ffmpeg -re -i ./龙珠超.布罗利.mp4 -vcodec copy -acodec copy -b:v 800k -b:a 32k -f flv rtmp://192.168.100.31:1935/rtmplive_demo/demo_3`\n\n    注:rtmp地址中的rtmplive_demo必须和nginx中配置的application名称一致才能推流成功,192.168.100.31是我的一台虚拟机\n\n#### 使用VLC media player测试播放推流后rtmp地址\n\n![](/images/push_to_rtmp.png)\n\n### ffmpeg转发rtsp流\n\n`ffmpeg -i rtsp://192.168.100.2:8554/longzhu/live -codec copy -f rtsp rtsp://192.168.252.1/longzhu/demo_1`\n\n    第一个rtsp是源地址,第二个是新地址.但是必须保证新地址是能够支持rtsp协议的才行.我试过使用nginx+rtsp是不能够\n    成功的.所以换成了easydarwin,rtsp://192.168.252.1地址就是启动easydarwin成功后的rtsp server地址.\n\n效果图如下:\n\n![](/images/rtsp_to_rtsp.png)\n\n**注:关于测试rtsp地址问题,上面的地址我测试的时候能够使用,但是不能保证以后能够一直正常使用,所以有网友图文讲解了使用VLC media player自制rtsp流.小伙伴的力量强大!其地址如下:https://blog.csdn.net/taoerit/article/details/51920018 \n为了防止地址失效,我将页面截了一张完整图.图片如下:**\n\n![](/images/build_push_rtsp.jpg)","slug":"nginx-rtmp-module-ffmpeg视频推流和rtsp转rtmp及hls","published":1,"updated":"2019-09-02T07:37:22.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck024pnvy0013y6fg8uyaooha","content":"<h3 id=\"RTSP、RTMP、HTTP协议比较\"><a href=\"#RTSP、RTMP、HTTP协议比较\" class=\"headerlink\" title=\"RTSP、RTMP、HTTP协议比较\"></a>RTSP、RTMP、HTTP协议比较</h3><h4 id=\"共同点\"><a href=\"#共同点\" class=\"headerlink\" title=\"共同点\"></a>共同点</h4><p>1.都是用在应用层的协议</p>\n<p>2.理论上这三种协议都可以做直播和点播，但直播一般用RTSP和RTMP点播用HTTP</p>\n<h4 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h4><p>1.HTTP协议（HyperText Transfer Protocol，超文本传输协议)，是因特网上应用最为广泛的一种网络传输协议，所有的WWW文件都必须遵守这个标准,HTTP是一个基于TCP/IP通信协议来传递数据(HTML 文件, 图片文件, 查询结果等).所以HTTP不是流媒体协议，RTMP和RTSP是流媒体协议</p>\n<p>2.RTMP是Real Time Messaging Protocol（实时消息传输协议）的首字母缩写。该协议基于TCP，是一个协议族，包括RTMP基本协议及RTMPT/RTMPS/RTMPE等多种变种。RTMP是一种设计用来进行实时数据通信的网络协议，主要用来在Flash/AIR平台和支持RTMP协议的流媒体/交互服务器之间进行音视频和数据通信,RTMP一般传输flv,f4v格式流.</p>\n<p>3.RTSP（Real Time Streaming Protocol），RFC2326，实时流传输协议.RTSP以客户端方式工作，对流媒体提供播放、暂停、后退、前进等操作.RTSP传输的一般是TS、MP4格式的流，其传输一般需要2~3个通道，命令和数据通道分离。使用RTSP协议传输流媒体数据需要有专门的媒体播放器和媒体服务器，也就是需要支持RTSP协议的客户端和服务器。</p>\n<h3 id=\"ffmpeg简介\"><a href=\"#ffmpeg简介\" class=\"headerlink\" title=\"ffmpeg简介\"></a>ffmpeg简介</h3><p>FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。它包括了目前领先的音/视频编码库libavcodec.可以轻易地实现多种视频格式之间的相互转换，例如可以将摄录下的视频avi等转成现在视频网站所采用的flv格式</p>\n<h3 id=\"nginx-nginx-rtmp-moudle安装\"><a href=\"#nginx-nginx-rtmp-moudle安装\" class=\"headerlink\" title=\"nginx+nginx-rtmp-moudle安装\"></a>nginx+nginx-rtmp-moudle安装</h3><p>分别下载nginx和nginx-rtmp的源码然后进行编译即可.在此,为了方便我是直接使用的docker的tiangolo/nginx-rtmp镜像,docker安装参考上一篇初识docker文档</p>\n<p><code>docker pull tiangolo/nginx-rtmp</code> // 拉取nginx-rtmp镜像</p>\n<p><code>docker run -it --name nginx-rtmp tiangolo/nginx-rtmp -p 1935:1935</code> // 第一次运行容器,取个别名,后续可直接使用 <code>docker start nginx-rtmp</code></p>\n<p>使用<code>netstat -tunlp | grep 1935</code> 检测1935端口是否正在监听,正常情况是正在监听中</p>\n<h3 id=\"ffmpeg安装\"><a href=\"#ffmpeg安装\" class=\"headerlink\" title=\"ffmpeg安装\"></a>ffmpeg安装</h3><p><code>sudo apt install ffmpeg</code> // 安装ffmpeg(我当前环境deepin,仓库里面自带ffmpeg包)</p>\n<p>其他操作系统需要去官网下载对应的安装包即可或者按照官方文档添加对应系统的ppa进行安装即可.</p>\n<p>ffmpeg参数:</p>\n<p>-re : 表示使用文件的原始帧率进行读取，因为ffmpeg读取视频帧的速度很快，如果不使用这个参数，ffmpeg可以在很短时间就把video.mp4中的视频帧全部读取完并进行推流，这样就无法体现出视频播放的效果了</p>\n<p>-i :这个参数表示输入 ，后面跟的路劲文件就是输入文件。</p>\n<p>-vcodec copy : -vcodec表示使用的视频编解码器 ，前缀v表示video。后面紧跟的copy 表示复制使用源文件的视频编解码器，比如原文件的编解码器(codec)是h264，则这里就使用h264</p>\n<p>-acodec copy : -acodec表示使用的音频编解码器，前缀a表示audio。后面的copy 表示使用源文件的音频编解码器</p>\n<p>-b:v 800k : -b:v表示视频的比特率(bitrate) ，为800k</p>\n<p>-b:a 32k : 表示音频的比特率为32k</p>\n<p>-f flv : -f表示format ，就是强制输出格式为flv，这一步其实也叫封装(mux)，封装要做的事就是把视频和音频混合在一起，进行同步。紧跟在后面的rtmp://xxx.xxx.xxx/xxx 表示输出的”文件名”，这个文件名可以是一个本地的文件，也可以指定为rtmp流媒体地址。指定为rtmp流媒体地址后，则ffmpeg就可以进行推流</p>\n<h3 id=\"ffmpeg将rtsp转码为rtmp\"><a href=\"#ffmpeg将rtsp转码为rtmp\" class=\"headerlink\" title=\"ffmpeg将rtsp转码为rtmp\"></a>ffmpeg将rtsp转码为rtmp</h3><p>使用ffmpeg命令,将rtsp转码为rtmp.ffmpeg参数项很多,未对其深究,直接参考网友的命令的.-i后面是rtsp流地址.</p>\n<p><code>ffmpeg -re -rtsp_transport tcp -i &quot;rtsp://184.72.239.149/vod/mp4://BigBuckBunny_175k.mov&quot; -f flv -vcodec libx264 -vprofile baseline -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -r 10 -s 1280x720 -q 10 &quot;rtmp://127.0.0.1:1935/live/demo&quot;</code></p>\n<pre><code>在执行转码命令过程中,可能会报信息类似 Past duration 0.999992 too large 的警告错误,经查询资料,是在-r参数后面\n指定的视频帧率参数导致的.rtsp://184.72.239.149/vod/mp4://BigBuckBunny_175k.mov这个地址是网络上的地址,\n可使用vlc media player查看源的帧率而设置\n</code></pre><h4 id=\"使用VLC-media-player测试播放转换后的rtmp地址\"><a href=\"#使用VLC-media-player测试播放转换后的rtmp地址\" class=\"headerlink\" title=\"使用VLC media player测试播放转换后的rtmp地址\"></a>使用VLC media player测试播放转换后的rtmp地址</h4><p>打开VLC media player播放器.在工具栏”媒体-&gt;打开网络串流”然后输入rtmp://127.0.0.1:1935/live/demo点击确定即可进行直播预览转换后的rtmp视频流</p>\n<p><img src=\"/images/rtmp-result.png\" alt></p>\n<h3 id=\"ffmpeg将rtsp转码为hls\"><a href=\"#ffmpeg将rtsp转码为hls\" class=\"headerlink\" title=\"ffmpeg将rtsp转码为hls\"></a>ffmpeg将rtsp转码为hls</h3><p>使用ffmpeg命令,将rtsp转码为hls.ffmpeg参数项很多,未对其深究,直接参考网友的命令的.-i后面是rtsp流地址.</p>\n<p><code>ffmpeg -f rtsp -rtsp_transport tcp -i rtsp://192.168.100.2/longzhu/demo_2 -r 23 -f hls -hls_time 4 -hls_list_size 5 -hls_wrap 10 /home/bz/Desktop/h5live/longzhuchao.m3u8</code></p>\n<pre><code>在执行转码命令过程中,可能会报信息类似 Past duration 0.999992 too large 的警告错误,经查询资料,是在-r参数后面\n指定的视频帧率参数导致的.rtsp://184.72.239.149/vod/mp4://BigBuckBunny_175k.mov这个地址是网络上的地址,\n可使用vlc media player查看源的帧率而设置\n</code></pre><h4 id=\"使用VLC-media-player测试播放转换后的hls地址-m3u8文件\"><a href=\"#使用VLC-media-player测试播放转换后的hls地址-m3u8文件\" class=\"headerlink\" title=\"使用VLC media player测试播放转换后的hls地址(m3u8文件)\"></a>使用VLC media player测试播放转换后的hls地址(m3u8文件)</h4><p>打开VLC media player播放器.在工具栏”媒体-&gt;打开网络串流”然后输入<a href=\"http://192.168.100.31/hlsvideo/longzhuchao.m3u8点击确定即可进行直播预览转换后的rtmp视频流,该地址是在nginx中配置了的\" target=\"_blank\" rel=\"noopener\">http://192.168.100.31/hlsvideo/longzhuchao.m3u8点击确定即可进行直播预览转换后的rtmp视频流,该地址是在nginx中配置了的</a></p>\n<p><img src=\"/images/hls-result.png\" alt></p>\n<h3 id=\"ffmpeg推送视频文件到rtsp服务器\"><a href=\"#ffmpeg推送视频文件到rtsp服务器\" class=\"headerlink\" title=\"ffmpeg推送视频文件到rtsp服务器\"></a>ffmpeg推送视频文件到rtsp服务器</h3><p><code>ffmpeg -re -i ./龙珠超.布罗利.mp4 -vcodec copy -codec copy -f rtsp rtsp://192.168.252.1/longzhu/demo_2</code></p>\n<pre><code>注:使用了easydarwin,rtsp://192.168.252.1地址就是启动easydarwin成功后的rtsp server地址\n</code></pre><h4 id=\"使用VLC-media-player测试播放推流后rtsp地址\"><a href=\"#使用VLC-media-player测试播放推流后rtsp地址\" class=\"headerlink\" title=\"使用VLC media player测试播放推流后rtsp地址\"></a>使用VLC media player测试播放推流后rtsp地址</h4><p><img src=\"/images/push_to_rtsp.png\" alt></p>\n<h3 id=\"ffmpeg推送视频文件到rtmp服务器\"><a href=\"#ffmpeg推送视频文件到rtmp服务器\" class=\"headerlink\" title=\"ffmpeg推送视频文件到rtmp服务器\"></a>ffmpeg推送视频文件到rtmp服务器</h3><p><code>ffmpeg -re -i ./龙珠超.布罗利.mp4 -vcodec copy -acodec copy -b:v 800k -b:a 32k -f flv rtmp://192.168.100.31:1935/rtmplive_demo/demo_3</code></p>\n<pre><code>注:rtmp地址中的rtmplive_demo必须和nginx中配置的application名称一致才能推流成功,192.168.100.31是我的一台虚拟机\n</code></pre><h4 id=\"使用VLC-media-player测试播放推流后rtmp地址\"><a href=\"#使用VLC-media-player测试播放推流后rtmp地址\" class=\"headerlink\" title=\"使用VLC media player测试播放推流后rtmp地址\"></a>使用VLC media player测试播放推流后rtmp地址</h4><p><img src=\"/images/push_to_rtmp.png\" alt></p>\n<h3 id=\"ffmpeg转发rtsp流\"><a href=\"#ffmpeg转发rtsp流\" class=\"headerlink\" title=\"ffmpeg转发rtsp流\"></a>ffmpeg转发rtsp流</h3><p><code>ffmpeg -i rtsp://192.168.100.2:8554/longzhu/live -codec copy -f rtsp rtsp://192.168.252.1/longzhu/demo_1</code></p>\n<pre><code>第一个rtsp是源地址,第二个是新地址.但是必须保证新地址是能够支持rtsp协议的才行.我试过使用nginx+rtsp是不能够\n成功的.所以换成了easydarwin,rtsp://192.168.252.1地址就是启动easydarwin成功后的rtsp server地址.\n</code></pre><p>效果图如下:</p>\n<p><img src=\"/images/rtsp_to_rtsp.png\" alt></p>\n<p><strong>注:关于测试rtsp地址问题,上面的地址我测试的时候能够使用,但是不能保证以后能够一直正常使用,所以有网友图文讲解了使用VLC media player自制rtsp流.小伙伴的力量强大!其地址如下:<a href=\"https://blog.csdn.net/taoerit/article/details/51920018\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/taoerit/article/details/51920018</a><br>为了防止地址失效,我将页面截了一张完整图.图片如下:</strong></p>\n<p><img src=\"/images/build_push_rtsp.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"RTSP、RTMP、HTTP协议比较\"><a href=\"#RTSP、RTMP、HTTP协议比较\" class=\"headerlink\" title=\"RTSP、RTMP、HTTP协议比较\"></a>RTSP、RTMP、HTTP协议比较</h3><h4 id=\"共同点\"><a href=\"#共同点\" class=\"headerlink\" title=\"共同点\"></a>共同点</h4><p>1.都是用在应用层的协议</p>\n<p>2.理论上这三种协议都可以做直播和点播，但直播一般用RTSP和RTMP点播用HTTP</p>\n<h4 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h4><p>1.HTTP协议（HyperText Transfer Protocol，超文本传输协议)，是因特网上应用最为广泛的一种网络传输协议，所有的WWW文件都必须遵守这个标准,HTTP是一个基于TCP/IP通信协议来传递数据(HTML 文件, 图片文件, 查询结果等).所以HTTP不是流媒体协议，RTMP和RTSP是流媒体协议</p>\n<p>2.RTMP是Real Time Messaging Protocol（实时消息传输协议）的首字母缩写。该协议基于TCP，是一个协议族，包括RTMP基本协议及RTMPT/RTMPS/RTMPE等多种变种。RTMP是一种设计用来进行实时数据通信的网络协议，主要用来在Flash/AIR平台和支持RTMP协议的流媒体/交互服务器之间进行音视频和数据通信,RTMP一般传输flv,f4v格式流.</p>\n<p>3.RTSP（Real Time Streaming Protocol），RFC2326，实时流传输协议.RTSP以客户端方式工作，对流媒体提供播放、暂停、后退、前进等操作.RTSP传输的一般是TS、MP4格式的流，其传输一般需要2~3个通道，命令和数据通道分离。使用RTSP协议传输流媒体数据需要有专门的媒体播放器和媒体服务器，也就是需要支持RTSP协议的客户端和服务器。</p>\n<h3 id=\"ffmpeg简介\"><a href=\"#ffmpeg简介\" class=\"headerlink\" title=\"ffmpeg简介\"></a>ffmpeg简介</h3><p>FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。它包括了目前领先的音/视频编码库libavcodec.可以轻易地实现多种视频格式之间的相互转换，例如可以将摄录下的视频avi等转成现在视频网站所采用的flv格式</p>\n<h3 id=\"nginx-nginx-rtmp-moudle安装\"><a href=\"#nginx-nginx-rtmp-moudle安装\" class=\"headerlink\" title=\"nginx+nginx-rtmp-moudle安装\"></a>nginx+nginx-rtmp-moudle安装</h3><p>分别下载nginx和nginx-rtmp的源码然后进行编译即可.在此,为了方便我是直接使用的docker的tiangolo/nginx-rtmp镜像,docker安装参考上一篇初识docker文档</p>\n<p><code>docker pull tiangolo/nginx-rtmp</code> // 拉取nginx-rtmp镜像</p>\n<p><code>docker run -it --name nginx-rtmp tiangolo/nginx-rtmp -p 1935:1935</code> // 第一次运行容器,取个别名,后续可直接使用 <code>docker start nginx-rtmp</code></p>\n<p>使用<code>netstat -tunlp | grep 1935</code> 检测1935端口是否正在监听,正常情况是正在监听中</p>\n<h3 id=\"ffmpeg安装\"><a href=\"#ffmpeg安装\" class=\"headerlink\" title=\"ffmpeg安装\"></a>ffmpeg安装</h3><p><code>sudo apt install ffmpeg</code> // 安装ffmpeg(我当前环境deepin,仓库里面自带ffmpeg包)</p>\n<p>其他操作系统需要去官网下载对应的安装包即可或者按照官方文档添加对应系统的ppa进行安装即可.</p>\n<p>ffmpeg参数:</p>\n<p>-re : 表示使用文件的原始帧率进行读取，因为ffmpeg读取视频帧的速度很快，如果不使用这个参数，ffmpeg可以在很短时间就把video.mp4中的视频帧全部读取完并进行推流，这样就无法体现出视频播放的效果了</p>\n<p>-i :这个参数表示输入 ，后面跟的路劲文件就是输入文件。</p>\n<p>-vcodec copy : -vcodec表示使用的视频编解码器 ，前缀v表示video。后面紧跟的copy 表示复制使用源文件的视频编解码器，比如原文件的编解码器(codec)是h264，则这里就使用h264</p>\n<p>-acodec copy : -acodec表示使用的音频编解码器，前缀a表示audio。后面的copy 表示使用源文件的音频编解码器</p>\n<p>-b:v 800k : -b:v表示视频的比特率(bitrate) ，为800k</p>\n<p>-b:a 32k : 表示音频的比特率为32k</p>\n<p>-f flv : -f表示format ，就是强制输出格式为flv，这一步其实也叫封装(mux)，封装要做的事就是把视频和音频混合在一起，进行同步。紧跟在后面的rtmp://xxx.xxx.xxx/xxx 表示输出的”文件名”，这个文件名可以是一个本地的文件，也可以指定为rtmp流媒体地址。指定为rtmp流媒体地址后，则ffmpeg就可以进行推流</p>\n<h3 id=\"ffmpeg将rtsp转码为rtmp\"><a href=\"#ffmpeg将rtsp转码为rtmp\" class=\"headerlink\" title=\"ffmpeg将rtsp转码为rtmp\"></a>ffmpeg将rtsp转码为rtmp</h3><p>使用ffmpeg命令,将rtsp转码为rtmp.ffmpeg参数项很多,未对其深究,直接参考网友的命令的.-i后面是rtsp流地址.</p>\n<p><code>ffmpeg -re -rtsp_transport tcp -i &quot;rtsp://184.72.239.149/vod/mp4://BigBuckBunny_175k.mov&quot; -f flv -vcodec libx264 -vprofile baseline -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -r 10 -s 1280x720 -q 10 &quot;rtmp://127.0.0.1:1935/live/demo&quot;</code></p>\n<pre><code>在执行转码命令过程中,可能会报信息类似 Past duration 0.999992 too large 的警告错误,经查询资料,是在-r参数后面\n指定的视频帧率参数导致的.rtsp://184.72.239.149/vod/mp4://BigBuckBunny_175k.mov这个地址是网络上的地址,\n可使用vlc media player查看源的帧率而设置\n</code></pre><h4 id=\"使用VLC-media-player测试播放转换后的rtmp地址\"><a href=\"#使用VLC-media-player测试播放转换后的rtmp地址\" class=\"headerlink\" title=\"使用VLC media player测试播放转换后的rtmp地址\"></a>使用VLC media player测试播放转换后的rtmp地址</h4><p>打开VLC media player播放器.在工具栏”媒体-&gt;打开网络串流”然后输入rtmp://127.0.0.1:1935/live/demo点击确定即可进行直播预览转换后的rtmp视频流</p>\n<p><img src=\"/images/rtmp-result.png\" alt></p>\n<h3 id=\"ffmpeg将rtsp转码为hls\"><a href=\"#ffmpeg将rtsp转码为hls\" class=\"headerlink\" title=\"ffmpeg将rtsp转码为hls\"></a>ffmpeg将rtsp转码为hls</h3><p>使用ffmpeg命令,将rtsp转码为hls.ffmpeg参数项很多,未对其深究,直接参考网友的命令的.-i后面是rtsp流地址.</p>\n<p><code>ffmpeg -f rtsp -rtsp_transport tcp -i rtsp://192.168.100.2/longzhu/demo_2 -r 23 -f hls -hls_time 4 -hls_list_size 5 -hls_wrap 10 /home/bz/Desktop/h5live/longzhuchao.m3u8</code></p>\n<pre><code>在执行转码命令过程中,可能会报信息类似 Past duration 0.999992 too large 的警告错误,经查询资料,是在-r参数后面\n指定的视频帧率参数导致的.rtsp://184.72.239.149/vod/mp4://BigBuckBunny_175k.mov这个地址是网络上的地址,\n可使用vlc media player查看源的帧率而设置\n</code></pre><h4 id=\"使用VLC-media-player测试播放转换后的hls地址-m3u8文件\"><a href=\"#使用VLC-media-player测试播放转换后的hls地址-m3u8文件\" class=\"headerlink\" title=\"使用VLC media player测试播放转换后的hls地址(m3u8文件)\"></a>使用VLC media player测试播放转换后的hls地址(m3u8文件)</h4><p>打开VLC media player播放器.在工具栏”媒体-&gt;打开网络串流”然后输入<a href=\"http://192.168.100.31/hlsvideo/longzhuchao.m3u8点击确定即可进行直播预览转换后的rtmp视频流,该地址是在nginx中配置了的\" target=\"_blank\" rel=\"noopener\">http://192.168.100.31/hlsvideo/longzhuchao.m3u8点击确定即可进行直播预览转换后的rtmp视频流,该地址是在nginx中配置了的</a></p>\n<p><img src=\"/images/hls-result.png\" alt></p>\n<h3 id=\"ffmpeg推送视频文件到rtsp服务器\"><a href=\"#ffmpeg推送视频文件到rtsp服务器\" class=\"headerlink\" title=\"ffmpeg推送视频文件到rtsp服务器\"></a>ffmpeg推送视频文件到rtsp服务器</h3><p><code>ffmpeg -re -i ./龙珠超.布罗利.mp4 -vcodec copy -codec copy -f rtsp rtsp://192.168.252.1/longzhu/demo_2</code></p>\n<pre><code>注:使用了easydarwin,rtsp://192.168.252.1地址就是启动easydarwin成功后的rtsp server地址\n</code></pre><h4 id=\"使用VLC-media-player测试播放推流后rtsp地址\"><a href=\"#使用VLC-media-player测试播放推流后rtsp地址\" class=\"headerlink\" title=\"使用VLC media player测试播放推流后rtsp地址\"></a>使用VLC media player测试播放推流后rtsp地址</h4><p><img src=\"/images/push_to_rtsp.png\" alt></p>\n<h3 id=\"ffmpeg推送视频文件到rtmp服务器\"><a href=\"#ffmpeg推送视频文件到rtmp服务器\" class=\"headerlink\" title=\"ffmpeg推送视频文件到rtmp服务器\"></a>ffmpeg推送视频文件到rtmp服务器</h3><p><code>ffmpeg -re -i ./龙珠超.布罗利.mp4 -vcodec copy -acodec copy -b:v 800k -b:a 32k -f flv rtmp://192.168.100.31:1935/rtmplive_demo/demo_3</code></p>\n<pre><code>注:rtmp地址中的rtmplive_demo必须和nginx中配置的application名称一致才能推流成功,192.168.100.31是我的一台虚拟机\n</code></pre><h4 id=\"使用VLC-media-player测试播放推流后rtmp地址\"><a href=\"#使用VLC-media-player测试播放推流后rtmp地址\" class=\"headerlink\" title=\"使用VLC media player测试播放推流后rtmp地址\"></a>使用VLC media player测试播放推流后rtmp地址</h4><p><img src=\"/images/push_to_rtmp.png\" alt></p>\n<h3 id=\"ffmpeg转发rtsp流\"><a href=\"#ffmpeg转发rtsp流\" class=\"headerlink\" title=\"ffmpeg转发rtsp流\"></a>ffmpeg转发rtsp流</h3><p><code>ffmpeg -i rtsp://192.168.100.2:8554/longzhu/live -codec copy -f rtsp rtsp://192.168.252.1/longzhu/demo_1</code></p>\n<pre><code>第一个rtsp是源地址,第二个是新地址.但是必须保证新地址是能够支持rtsp协议的才行.我试过使用nginx+rtsp是不能够\n成功的.所以换成了easydarwin,rtsp://192.168.252.1地址就是启动easydarwin成功后的rtsp server地址.\n</code></pre><p>效果图如下:</p>\n<p><img src=\"/images/rtsp_to_rtsp.png\" alt></p>\n<p><strong>注:关于测试rtsp地址问题,上面的地址我测试的时候能够使用,但是不能保证以后能够一直正常使用,所以有网友图文讲解了使用VLC media player自制rtsp流.小伙伴的力量强大!其地址如下:<a href=\"https://blog.csdn.net/taoerit/article/details/51920018\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/taoerit/article/details/51920018</a><br>为了防止地址失效,我将页面截了一张完整图.图片如下:</strong></p>\n<p><img src=\"/images/build_push_rtsp.jpg\" alt></p>\n"},{"title":"pdfbox解析PDF文件","date":"2019-05-14T02:11:34.000Z","_content":"\n    摘要:\n      最近需要使用到对PDF文件内容进行解析,然后对文件的部分内容进行索引查询.在解析的PDF的时候Java语言有2个\n      开源的PDF工具:PDFbox和Itext.\n    \nPDFbox和Itext都能读取、解析pdf文件，并且可对文件进行修改.有小伙伴将2个工具对比总结出以下结论:  \n**在读取和解析PDF的时候使用PDFBox，较为简单，示例较为详细;修改PDF的时候使用Itext，支持粒度较细，比如控制文字字体等**\n\n### Itext\n\n  iText是著名的开放项目，是用于生成PDF文档的一个java类库。通过iText不仅可以生成PDF或rtf的文档，而且可以将XML、Html文件转化为PDF文件等.目前只是用到对PDF文档的解析,所以对于Itext具体使用暂未查看,\n\n    官网:https://itextpdf.com/\n    插入文字可以自定义字体，使用字库文件(ttf)\n\n### PDFBox\n\n#### 引入PDFBox工具库jar\n\n    <dependency>\n        <groupId>org.apache.pdfbox</groupId>\n        <artifactId>pdfbox</artifactId>\n        <version>2.0.15</version> <!--当前使用2.0.15的版本-->\n    </dependency>\n\n#### 编写PDFUtils类\n\n```java\nimport org.apache.pdfbox.cos.COSName;\nimport org.apache.pdfbox.io.RandomAccessBuffer;\nimport org.apache.pdfbox.pdfparser.PDFParser;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.PDPage;\nimport org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;\nimport org.apache.pdfbox.text.PDFTextStripper;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * pdf文档解析工具类\n *\n * @author bz\n */\npublic class PDFUtils {\n\n    private static final Logger logger = LoggerFactory.getLogger(PDFUtils.class);\n\n    /**\n     * @param pdfPath pdf文件路径\n     * @return\n     */\n    public static PDDocument initPDDocument(String pdfPath) throws Exception {\n        File pdfFile = Paths.get(pdfPath).toFile();\n        if (!pdfFile.exists()) {\n            logger.error(\"pdf文件不存在\");\n            return null;\n        }\n        // 新建一个PDF解析器对象\n        PDFParser pdfParser = new PDFParser(new RandomAccessBuffer(new FileInputStream(pdfFile)));\n        // 对PDF文件进行解析\n        pdfParser.parse();\n        // 获取解析后得到的PDF文档对象\n        PDDocument pdfdocument = pdfParser.getPDDocument();\n        return pdfdocument;\n    }\n\n    /**\n     * @param inputStream 输入流\n     * @return\n     */\n    public static PDDocument initPDDocument(InputStream inputStream) throws Exception {\n        // 新建一个PDF解析器对象\n        PDFParser pdfParser = new PDFParser(new RandomAccessBuffer(inputStream));\n        // 对PDF文件进行解析\n        pdfParser.parse();\n        // 获取解析后得到的PDF文档对象\n        PDDocument pdfdocument = pdfParser.getPDDocument();\n        return pdfdocument;\n    }\n\n    /**\n     * 解析pdf文档中的字符内容\n     *\n     * @param pdDocument\n     * @param startPage  开始页码\n     * @param endPage    结束页码\n     * @return\n     */\n    public static String getContent(PDDocument pdDocument, int startPage, int endPage) throws IOException {\n        if (endPage <= startPage) {\n            logger.error(\"页码参数不正确\");\n            return null;\n        }\n        // 新建一个PDF文本剥离器\n        PDFTextStripper stripper = new PDFTextStripper();\n        stripper.setStartPage(startPage); // 开始提取页数\n        stripper.setEndPage(endPage); // 结束提取页数\n        // 从PDF文档对象中剥离文本\n        String result = stripper.getText(pdDocument);\n        return result;\n    }\n\n    /**\n     * 解析pdf文档中的所有图片列表\n     *\n     * @param pdDocument\n     * @param startPage  开始页码\n     * @param endPage    结束页码\n     * @return\n     */\n    public static List<PDImageXObject> getImageList(PDDocument pdDocument, int startPage, int endPage) throws IOException {\n        if (endPage <= startPage) {\n            logger.error(\"页码参数不正确\");\n            return null;\n        }\n        List<PDImageXObject> imageList = new ArrayList<PDImageXObject>();\n        for (int i = startPage; i < endPage; i++) {\n            PDPage page = pdDocument.getPage(i);\n            Iterable<COSName> objectNames = page.getResources().getXObjectNames();\n            for (COSName imageObjectName : objectNames) {\n                if (page.getResources().isImageXObject(imageObjectName)) {\n                    PDImageXObject imageXObject = (PDImageXObject) page.getResources()\n                            .getXObject(imageObjectName);\n                    imageList.add(imageXObject);\n                }\n            }\n        }\n        return imageList;\n    }\n\n}\n```\n\n#### 调用PDFUtils类方法\n\n```java\n@Test\npublic void test4() throws Exception {\n    PDDocument pdDocument = PDFUtils.initPDDocument(\"/home/bz/Desktop/1.pdf\");\n    if (pdDocument != null) {\n        // 获取文档文本内容\n        String result = PDFUtils.getContent(pdDocument, 0, pdDocument.getNumberOfPages());\n        System.out.println(\"PDF文件的文本内容如下：\");\n        System.out.println(result);\n        // 获取文档中的所有图片\n        List<PDImageXObject> imageList = PDFUtils.getImageList(pdDocument, 0,pdDocument.getNumberOfPages());\n        for (int i = 0; i < imageList.size(); i++) {\n            PDImageXObject imageXObject = imageList.get(i);\n            BufferedImage bufferedImage = imageXObject.getImage();\n            ImageIO.write(bufferedImage, imageXObject.getSuffix(),\n                    new FileOutputStream(Paths\n                            .get(\"/home/bz/Desktop/\" + i + \".\" + imageXObject.getSuffix()).toFile()));\n        }\n    }\n}\n```\n","source":"_posts/pdfbox解析PDF文件.md","raw":"---\ntitle: pdfbox解析PDF文件\ndate: 2019-05-14 10:11:34\ntags:\n  - java\n  - pdfbox\n  - pdf\n---\n\n    摘要:\n      最近需要使用到对PDF文件内容进行解析,然后对文件的部分内容进行索引查询.在解析的PDF的时候Java语言有2个\n      开源的PDF工具:PDFbox和Itext.\n    \nPDFbox和Itext都能读取、解析pdf文件，并且可对文件进行修改.有小伙伴将2个工具对比总结出以下结论:  \n**在读取和解析PDF的时候使用PDFBox，较为简单，示例较为详细;修改PDF的时候使用Itext，支持粒度较细，比如控制文字字体等**\n\n### Itext\n\n  iText是著名的开放项目，是用于生成PDF文档的一个java类库。通过iText不仅可以生成PDF或rtf的文档，而且可以将XML、Html文件转化为PDF文件等.目前只是用到对PDF文档的解析,所以对于Itext具体使用暂未查看,\n\n    官网:https://itextpdf.com/\n    插入文字可以自定义字体，使用字库文件(ttf)\n\n### PDFBox\n\n#### 引入PDFBox工具库jar\n\n    <dependency>\n        <groupId>org.apache.pdfbox</groupId>\n        <artifactId>pdfbox</artifactId>\n        <version>2.0.15</version> <!--当前使用2.0.15的版本-->\n    </dependency>\n\n#### 编写PDFUtils类\n\n```java\nimport org.apache.pdfbox.cos.COSName;\nimport org.apache.pdfbox.io.RandomAccessBuffer;\nimport org.apache.pdfbox.pdfparser.PDFParser;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.PDPage;\nimport org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;\nimport org.apache.pdfbox.text.PDFTextStripper;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * pdf文档解析工具类\n *\n * @author bz\n */\npublic class PDFUtils {\n\n    private static final Logger logger = LoggerFactory.getLogger(PDFUtils.class);\n\n    /**\n     * @param pdfPath pdf文件路径\n     * @return\n     */\n    public static PDDocument initPDDocument(String pdfPath) throws Exception {\n        File pdfFile = Paths.get(pdfPath).toFile();\n        if (!pdfFile.exists()) {\n            logger.error(\"pdf文件不存在\");\n            return null;\n        }\n        // 新建一个PDF解析器对象\n        PDFParser pdfParser = new PDFParser(new RandomAccessBuffer(new FileInputStream(pdfFile)));\n        // 对PDF文件进行解析\n        pdfParser.parse();\n        // 获取解析后得到的PDF文档对象\n        PDDocument pdfdocument = pdfParser.getPDDocument();\n        return pdfdocument;\n    }\n\n    /**\n     * @param inputStream 输入流\n     * @return\n     */\n    public static PDDocument initPDDocument(InputStream inputStream) throws Exception {\n        // 新建一个PDF解析器对象\n        PDFParser pdfParser = new PDFParser(new RandomAccessBuffer(inputStream));\n        // 对PDF文件进行解析\n        pdfParser.parse();\n        // 获取解析后得到的PDF文档对象\n        PDDocument pdfdocument = pdfParser.getPDDocument();\n        return pdfdocument;\n    }\n\n    /**\n     * 解析pdf文档中的字符内容\n     *\n     * @param pdDocument\n     * @param startPage  开始页码\n     * @param endPage    结束页码\n     * @return\n     */\n    public static String getContent(PDDocument pdDocument, int startPage, int endPage) throws IOException {\n        if (endPage <= startPage) {\n            logger.error(\"页码参数不正确\");\n            return null;\n        }\n        // 新建一个PDF文本剥离器\n        PDFTextStripper stripper = new PDFTextStripper();\n        stripper.setStartPage(startPage); // 开始提取页数\n        stripper.setEndPage(endPage); // 结束提取页数\n        // 从PDF文档对象中剥离文本\n        String result = stripper.getText(pdDocument);\n        return result;\n    }\n\n    /**\n     * 解析pdf文档中的所有图片列表\n     *\n     * @param pdDocument\n     * @param startPage  开始页码\n     * @param endPage    结束页码\n     * @return\n     */\n    public static List<PDImageXObject> getImageList(PDDocument pdDocument, int startPage, int endPage) throws IOException {\n        if (endPage <= startPage) {\n            logger.error(\"页码参数不正确\");\n            return null;\n        }\n        List<PDImageXObject> imageList = new ArrayList<PDImageXObject>();\n        for (int i = startPage; i < endPage; i++) {\n            PDPage page = pdDocument.getPage(i);\n            Iterable<COSName> objectNames = page.getResources().getXObjectNames();\n            for (COSName imageObjectName : objectNames) {\n                if (page.getResources().isImageXObject(imageObjectName)) {\n                    PDImageXObject imageXObject = (PDImageXObject) page.getResources()\n                            .getXObject(imageObjectName);\n                    imageList.add(imageXObject);\n                }\n            }\n        }\n        return imageList;\n    }\n\n}\n```\n\n#### 调用PDFUtils类方法\n\n```java\n@Test\npublic void test4() throws Exception {\n    PDDocument pdDocument = PDFUtils.initPDDocument(\"/home/bz/Desktop/1.pdf\");\n    if (pdDocument != null) {\n        // 获取文档文本内容\n        String result = PDFUtils.getContent(pdDocument, 0, pdDocument.getNumberOfPages());\n        System.out.println(\"PDF文件的文本内容如下：\");\n        System.out.println(result);\n        // 获取文档中的所有图片\n        List<PDImageXObject> imageList = PDFUtils.getImageList(pdDocument, 0,pdDocument.getNumberOfPages());\n        for (int i = 0; i < imageList.size(); i++) {\n            PDImageXObject imageXObject = imageList.get(i);\n            BufferedImage bufferedImage = imageXObject.getImage();\n            ImageIO.write(bufferedImage, imageXObject.getSuffix(),\n                    new FileOutputStream(Paths\n                            .get(\"/home/bz/Desktop/\" + i + \".\" + imageXObject.getSuffix()).toFile()));\n        }\n    }\n}\n```\n","slug":"pdfbox解析PDF文件","published":1,"updated":"2019-09-02T07:37:22.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck024pnvz0016y6fggmvgn5ln","content":"<pre><code>摘要:\n  最近需要使用到对PDF文件内容进行解析,然后对文件的部分内容进行索引查询.在解析的PDF的时候Java语言有2个\n  开源的PDF工具:PDFbox和Itext.\n</code></pre><p>PDFbox和Itext都能读取、解析pdf文件，并且可对文件进行修改.有小伙伴将2个工具对比总结出以下结论:<br><strong>在读取和解析PDF的时候使用PDFBox，较为简单，示例较为详细;修改PDF的时候使用Itext，支持粒度较细，比如控制文字字体等</strong></p>\n<h3 id=\"Itext\"><a href=\"#Itext\" class=\"headerlink\" title=\"Itext\"></a>Itext</h3><p>  iText是著名的开放项目，是用于生成PDF文档的一个java类库。通过iText不仅可以生成PDF或rtf的文档，而且可以将XML、Html文件转化为PDF文件等.目前只是用到对PDF文档的解析,所以对于Itext具体使用暂未查看,</p>\n<pre><code>官网:https://itextpdf.com/\n插入文字可以自定义字体，使用字库文件(ttf)\n</code></pre><h3 id=\"PDFBox\"><a href=\"#PDFBox\" class=\"headerlink\" title=\"PDFBox\"></a>PDFBox</h3><h4 id=\"引入PDFBox工具库jar\"><a href=\"#引入PDFBox工具库jar\" class=\"headerlink\" title=\"引入PDFBox工具库jar\"></a>引入PDFBox工具库jar</h4><pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.apache.pdfbox&lt;/groupId&gt;\n    &lt;artifactId&gt;pdfbox&lt;/artifactId&gt;\n    &lt;version&gt;2.0.15&lt;/version&gt; &lt;!--当前使用2.0.15的版本--&gt;\n&lt;/dependency&gt;\n</code></pre><h4 id=\"编写PDFUtils类\"><a href=\"#编写PDFUtils类\" class=\"headerlink\" title=\"编写PDFUtils类\"></a>编写PDFUtils类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.pdfbox.cos.COSName;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.pdfbox.io.RandomAccessBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.pdfbox.pdfparser.PDFParser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.pdfbox.pdmodel.PDDocument;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.pdfbox.pdmodel.PDPage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.pdfbox.text.PDFTextStripper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Paths;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * pdf文档解析工具类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> bz</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PDFUtils</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(PDFUtils.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pdfPath pdf文件路径</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PDDocument <span class=\"title\">initPDDocument</span><span class=\"params\">(String pdfPath)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        File pdfFile = Paths.get(pdfPath).toFile();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!pdfFile.exists()) &#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"pdf文件不存在\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 新建一个PDF解析器对象</span></span><br><span class=\"line\">        PDFParser pdfParser = <span class=\"keyword\">new</span> PDFParser(<span class=\"keyword\">new</span> RandomAccessBuffer(<span class=\"keyword\">new</span> FileInputStream(pdfFile)));</span><br><span class=\"line\">        <span class=\"comment\">// 对PDF文件进行解析</span></span><br><span class=\"line\">        pdfParser.parse();</span><br><span class=\"line\">        <span class=\"comment\">// 获取解析后得到的PDF文档对象</span></span><br><span class=\"line\">        PDDocument pdfdocument = pdfParser.getPDDocument();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pdfdocument;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> inputStream 输入流</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PDDocument <span class=\"title\">initPDDocument</span><span class=\"params\">(InputStream inputStream)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 新建一个PDF解析器对象</span></span><br><span class=\"line\">        PDFParser pdfParser = <span class=\"keyword\">new</span> PDFParser(<span class=\"keyword\">new</span> RandomAccessBuffer(inputStream));</span><br><span class=\"line\">        <span class=\"comment\">// 对PDF文件进行解析</span></span><br><span class=\"line\">        pdfParser.parse();</span><br><span class=\"line\">        <span class=\"comment\">// 获取解析后得到的PDF文档对象</span></span><br><span class=\"line\">        PDDocument pdfdocument = pdfParser.getPDDocument();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pdfdocument;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解析pdf文档中的字符内容</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pdDocument</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> startPage  开始页码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> endPage    结束页码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getContent</span><span class=\"params\">(PDDocument pdDocument, <span class=\"keyword\">int</span> startPage, <span class=\"keyword\">int</span> endPage)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (endPage &lt;= startPage) &#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"页码参数不正确\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 新建一个PDF文本剥离器</span></span><br><span class=\"line\">        PDFTextStripper stripper = <span class=\"keyword\">new</span> PDFTextStripper();</span><br><span class=\"line\">        stripper.setStartPage(startPage); <span class=\"comment\">// 开始提取页数</span></span><br><span class=\"line\">        stripper.setEndPage(endPage); <span class=\"comment\">// 结束提取页数</span></span><br><span class=\"line\">        <span class=\"comment\">// 从PDF文档对象中剥离文本</span></span><br><span class=\"line\">        String result = stripper.getText(pdDocument);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解析pdf文档中的所有图片列表</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pdDocument</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> startPage  开始页码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> endPage    结束页码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;PDImageXObject&gt; <span class=\"title\">getImageList</span><span class=\"params\">(PDDocument pdDocument, <span class=\"keyword\">int</span> startPage, <span class=\"keyword\">int</span> endPage)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (endPage &lt;= startPage) &#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"页码参数不正确\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;PDImageXObject&gt; imageList = <span class=\"keyword\">new</span> ArrayList&lt;PDImageXObject&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = startPage; i &lt; endPage; i++) &#123;</span><br><span class=\"line\">            PDPage page = pdDocument.getPage(i);</span><br><span class=\"line\">            Iterable&lt;COSName&gt; objectNames = page.getResources().getXObjectNames();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (COSName imageObjectName : objectNames) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (page.getResources().isImageXObject(imageObjectName)) &#123;</span><br><span class=\"line\">                    PDImageXObject imageXObject = (PDImageXObject) page.getResources()</span><br><span class=\"line\">                            .getXObject(imageObjectName);</span><br><span class=\"line\">                    imageList.add(imageXObject);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> imageList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"调用PDFUtils类方法\"><a href=\"#调用PDFUtils类方法\" class=\"headerlink\" title=\"调用PDFUtils类方法\"></a>调用PDFUtils类方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test4</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    PDDocument pdDocument = PDFUtils.initPDDocument(<span class=\"string\">\"/home/bz/Desktop/1.pdf\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pdDocument != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取文档文本内容</span></span><br><span class=\"line\">        String result = PDFUtils.getContent(pdDocument, <span class=\"number\">0</span>, pdDocument.getNumberOfPages());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"PDF文件的文本内容如下：\"</span>);</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\">        <span class=\"comment\">// 获取文档中的所有图片</span></span><br><span class=\"line\">        List&lt;PDImageXObject&gt; imageList = PDFUtils.getImageList(pdDocument, <span class=\"number\">0</span>,pdDocument.getNumberOfPages());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; imageList.size(); i++) &#123;</span><br><span class=\"line\">            PDImageXObject imageXObject = imageList.get(i);</span><br><span class=\"line\">            BufferedImage bufferedImage = imageXObject.getImage();</span><br><span class=\"line\">            ImageIO.write(bufferedImage, imageXObject.getSuffix(),</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> FileOutputStream(Paths</span><br><span class=\"line\">                            .get(<span class=\"string\">\"/home/bz/Desktop/\"</span> + i + <span class=\"string\">\".\"</span> + imageXObject.getSuffix()).toFile()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>摘要:\n  最近需要使用到对PDF文件内容进行解析,然后对文件的部分内容进行索引查询.在解析的PDF的时候Java语言有2个\n  开源的PDF工具:PDFbox和Itext.\n</code></pre><p>PDFbox和Itext都能读取、解析pdf文件，并且可对文件进行修改.有小伙伴将2个工具对比总结出以下结论:<br><strong>在读取和解析PDF的时候使用PDFBox，较为简单，示例较为详细;修改PDF的时候使用Itext，支持粒度较细，比如控制文字字体等</strong></p>\n<h3 id=\"Itext\"><a href=\"#Itext\" class=\"headerlink\" title=\"Itext\"></a>Itext</h3><p>  iText是著名的开放项目，是用于生成PDF文档的一个java类库。通过iText不仅可以生成PDF或rtf的文档，而且可以将XML、Html文件转化为PDF文件等.目前只是用到对PDF文档的解析,所以对于Itext具体使用暂未查看,</p>\n<pre><code>官网:https://itextpdf.com/\n插入文字可以自定义字体，使用字库文件(ttf)\n</code></pre><h3 id=\"PDFBox\"><a href=\"#PDFBox\" class=\"headerlink\" title=\"PDFBox\"></a>PDFBox</h3><h4 id=\"引入PDFBox工具库jar\"><a href=\"#引入PDFBox工具库jar\" class=\"headerlink\" title=\"引入PDFBox工具库jar\"></a>引入PDFBox工具库jar</h4><pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.apache.pdfbox&lt;/groupId&gt;\n    &lt;artifactId&gt;pdfbox&lt;/artifactId&gt;\n    &lt;version&gt;2.0.15&lt;/version&gt; &lt;!--当前使用2.0.15的版本--&gt;\n&lt;/dependency&gt;\n</code></pre><h4 id=\"编写PDFUtils类\"><a href=\"#编写PDFUtils类\" class=\"headerlink\" title=\"编写PDFUtils类\"></a>编写PDFUtils类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.pdfbox.cos.COSName;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.pdfbox.io.RandomAccessBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.pdfbox.pdfparser.PDFParser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.pdfbox.pdmodel.PDDocument;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.pdfbox.pdmodel.PDPage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.pdfbox.text.PDFTextStripper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Paths;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * pdf文档解析工具类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> bz</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PDFUtils</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(PDFUtils.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pdfPath pdf文件路径</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PDDocument <span class=\"title\">initPDDocument</span><span class=\"params\">(String pdfPath)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        File pdfFile = Paths.get(pdfPath).toFile();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!pdfFile.exists()) &#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"pdf文件不存在\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 新建一个PDF解析器对象</span></span><br><span class=\"line\">        PDFParser pdfParser = <span class=\"keyword\">new</span> PDFParser(<span class=\"keyword\">new</span> RandomAccessBuffer(<span class=\"keyword\">new</span> FileInputStream(pdfFile)));</span><br><span class=\"line\">        <span class=\"comment\">// 对PDF文件进行解析</span></span><br><span class=\"line\">        pdfParser.parse();</span><br><span class=\"line\">        <span class=\"comment\">// 获取解析后得到的PDF文档对象</span></span><br><span class=\"line\">        PDDocument pdfdocument = pdfParser.getPDDocument();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pdfdocument;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> inputStream 输入流</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PDDocument <span class=\"title\">initPDDocument</span><span class=\"params\">(InputStream inputStream)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 新建一个PDF解析器对象</span></span><br><span class=\"line\">        PDFParser pdfParser = <span class=\"keyword\">new</span> PDFParser(<span class=\"keyword\">new</span> RandomAccessBuffer(inputStream));</span><br><span class=\"line\">        <span class=\"comment\">// 对PDF文件进行解析</span></span><br><span class=\"line\">        pdfParser.parse();</span><br><span class=\"line\">        <span class=\"comment\">// 获取解析后得到的PDF文档对象</span></span><br><span class=\"line\">        PDDocument pdfdocument = pdfParser.getPDDocument();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pdfdocument;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解析pdf文档中的字符内容</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pdDocument</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> startPage  开始页码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> endPage    结束页码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getContent</span><span class=\"params\">(PDDocument pdDocument, <span class=\"keyword\">int</span> startPage, <span class=\"keyword\">int</span> endPage)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (endPage &lt;= startPage) &#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"页码参数不正确\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 新建一个PDF文本剥离器</span></span><br><span class=\"line\">        PDFTextStripper stripper = <span class=\"keyword\">new</span> PDFTextStripper();</span><br><span class=\"line\">        stripper.setStartPage(startPage); <span class=\"comment\">// 开始提取页数</span></span><br><span class=\"line\">        stripper.setEndPage(endPage); <span class=\"comment\">// 结束提取页数</span></span><br><span class=\"line\">        <span class=\"comment\">// 从PDF文档对象中剥离文本</span></span><br><span class=\"line\">        String result = stripper.getText(pdDocument);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解析pdf文档中的所有图片列表</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pdDocument</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> startPage  开始页码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> endPage    结束页码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;PDImageXObject&gt; <span class=\"title\">getImageList</span><span class=\"params\">(PDDocument pdDocument, <span class=\"keyword\">int</span> startPage, <span class=\"keyword\">int</span> endPage)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (endPage &lt;= startPage) &#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">\"页码参数不正确\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;PDImageXObject&gt; imageList = <span class=\"keyword\">new</span> ArrayList&lt;PDImageXObject&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = startPage; i &lt; endPage; i++) &#123;</span><br><span class=\"line\">            PDPage page = pdDocument.getPage(i);</span><br><span class=\"line\">            Iterable&lt;COSName&gt; objectNames = page.getResources().getXObjectNames();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (COSName imageObjectName : objectNames) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (page.getResources().isImageXObject(imageObjectName)) &#123;</span><br><span class=\"line\">                    PDImageXObject imageXObject = (PDImageXObject) page.getResources()</span><br><span class=\"line\">                            .getXObject(imageObjectName);</span><br><span class=\"line\">                    imageList.add(imageXObject);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> imageList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"调用PDFUtils类方法\"><a href=\"#调用PDFUtils类方法\" class=\"headerlink\" title=\"调用PDFUtils类方法\"></a>调用PDFUtils类方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test4</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    PDDocument pdDocument = PDFUtils.initPDDocument(<span class=\"string\">\"/home/bz/Desktop/1.pdf\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pdDocument != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取文档文本内容</span></span><br><span class=\"line\">        String result = PDFUtils.getContent(pdDocument, <span class=\"number\">0</span>, pdDocument.getNumberOfPages());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"PDF文件的文本内容如下：\"</span>);</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\">        <span class=\"comment\">// 获取文档中的所有图片</span></span><br><span class=\"line\">        List&lt;PDImageXObject&gt; imageList = PDFUtils.getImageList(pdDocument, <span class=\"number\">0</span>,pdDocument.getNumberOfPages());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; imageList.size(); i++) &#123;</span><br><span class=\"line\">            PDImageXObject imageXObject = imageList.get(i);</span><br><span class=\"line\">            BufferedImage bufferedImage = imageXObject.getImage();</span><br><span class=\"line\">            ImageIO.write(bufferedImage, imageXObject.getSuffix(),</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> FileOutputStream(Paths</span><br><span class=\"line\">                            .get(<span class=\"string\">\"/home/bz/Desktop/\"</span> + i + <span class=\"string\">\".\"</span> + imageXObject.getSuffix()).toFile()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"tomcat解决java.lang.IllegalArgumentException: Invalid character异常","date":"2019-02-21T03:06:41.000Z","_content":"\n>tomcat新版添加了对于http头的验证。出现java.lang.IllegalArgumentException: Invalid character found in the request target. The valid char... 异常\n\n网上查找了几种方法归类\n\n1.更换tomcat版本,但是7,8,9的版本都更换过,问题依然.但是有网友确实可以解决,但是更换到具体什么版本未知.\n\n2.前端http请求的时候对参数进行URL编码处理,理论上是绝对可行的,但是已有的http请求数很多,一个一个修改工作量大.未试\n\n3.配置tomcat的catalina.properties 添加或者修改： tomcat.util.http.parser.HttpParser.requestTargetAllow=|{}\n\n4.使用Connector中relaxedPathChars和relaxedQueryChars属性可以解决问题.找到tomcat/conf/server.xml,在Connector中增加这两个配置.\n`<Connector port=\"8080\" protocol=\"HTTP/1.1\"    relaxedPathChars=\"[]{}|\\^\" relaxedQueryChars=\"[]{}|\\^\" />`","source":"_posts/tomcat解决java-lang-IllegalArgumentException-Invalid-character异常.md","raw":"---\ntitle: 'tomcat解决java.lang.IllegalArgumentException: Invalid character异常'\ndate: 2019-02-21 11:06:41\ntags: tomcat\n---\n\n>tomcat新版添加了对于http头的验证。出现java.lang.IllegalArgumentException: Invalid character found in the request target. The valid char... 异常\n\n网上查找了几种方法归类\n\n1.更换tomcat版本,但是7,8,9的版本都更换过,问题依然.但是有网友确实可以解决,但是更换到具体什么版本未知.\n\n2.前端http请求的时候对参数进行URL编码处理,理论上是绝对可行的,但是已有的http请求数很多,一个一个修改工作量大.未试\n\n3.配置tomcat的catalina.properties 添加或者修改： tomcat.util.http.parser.HttpParser.requestTargetAllow=|{}\n\n4.使用Connector中relaxedPathChars和relaxedQueryChars属性可以解决问题.找到tomcat/conf/server.xml,在Connector中增加这两个配置.\n`<Connector port=\"8080\" protocol=\"HTTP/1.1\"    relaxedPathChars=\"[]{}|\\^\" relaxedQueryChars=\"[]{}|\\^\" />`","slug":"tomcat解决java-lang-IllegalArgumentException-Invalid-character异常","published":1,"updated":"2019-09-02T07:37:22.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck024pnw10018y6fgvf3bqiu3","content":"<blockquote>\n<p>tomcat新版添加了对于http头的验证。出现java.lang.IllegalArgumentException: Invalid character found in the request target. The valid char… 异常</p>\n</blockquote>\n<p>网上查找了几种方法归类</p>\n<p>1.更换tomcat版本,但是7,8,9的版本都更换过,问题依然.但是有网友确实可以解决,但是更换到具体什么版本未知.</p>\n<p>2.前端http请求的时候对参数进行URL编码处理,理论上是绝对可行的,但是已有的http请求数很多,一个一个修改工作量大.未试</p>\n<p>3.配置tomcat的catalina.properties 添加或者修改： tomcat.util.http.parser.HttpParser.requestTargetAllow=|{}</p>\n<p>4.使用Connector中relaxedPathChars和relaxedQueryChars属性可以解决问题.找到tomcat/conf/server.xml,在Connector中增加这两个配置.<br><code>&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;    relaxedPathChars=&quot;[]{}|\\^&quot; relaxedQueryChars=&quot;[]{}|\\^&quot; /&gt;</code></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>tomcat新版添加了对于http头的验证。出现java.lang.IllegalArgumentException: Invalid character found in the request target. The valid char… 异常</p>\n</blockquote>\n<p>网上查找了几种方法归类</p>\n<p>1.更换tomcat版本,但是7,8,9的版本都更换过,问题依然.但是有网友确实可以解决,但是更换到具体什么版本未知.</p>\n<p>2.前端http请求的时候对参数进行URL编码处理,理论上是绝对可行的,但是已有的http请求数很多,一个一个修改工作量大.未试</p>\n<p>3.配置tomcat的catalina.properties 添加或者修改： tomcat.util.http.parser.HttpParser.requestTargetAllow=|{}</p>\n<p>4.使用Connector中relaxedPathChars和relaxedQueryChars属性可以解决问题.找到tomcat/conf/server.xml,在Connector中增加这两个配置.<br><code>&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;    relaxedPathChars=&quot;[]{}|\\^&quot; relaxedQueryChars=&quot;[]{}|\\^&quot; /&gt;</code></p>\n"},{"title":"vscode配置前端vue开发环境","date":"2018-12-13T06:05:39.000Z","_content":"\n    摘要:\n      使用vscode配置前端vue开发环境\n\n1.安装好vscode后,安装常用的几个插件\n\n    Auto Close Tag : 自动闭合标签插件\n\n    Beautify : 格式化js,json,css,sass,html等文件\n\n    ESLint : 使用eslint规范对代码进行处理\n\n    file-icons : 文件图标,便利区分不同类型的文件\n\n    Monokai Theme : 一款类似sublime text主流的主题设置,使界面美观,享受美好的编码心情\n\n    Path Intellisense : 自动提示文件路径插件\n\n    Prettier : 因为vscode默认的格式化是不能通过eslint校验规范的,需要改为此插件\n\n    Vetur : vscode的vue工具插件\n\n    HTML CSS Support : 在标签中class属性的时候,提示class的名称\n\n    px2rem : 将像素值转为rem插件\n\n    下面是markdown相关的插件\n\n    Markdown-TOC : 对markdown文档生成目录的插件,有2个,请选择作者为AlanWalk的\n\n2.安装好上述插件后,对其进行配置设置(2018-12-15更 v.1.30.0)\n\n    在文件->首选项->设置->用户设置里面写入以下配置\n\n  ```json\n  {\n    \"workbench.startupEditor\": \"newUntitledFile\",\n    \"window.title\": \"${dirty}${activeEditorLong}${separator}${rootName}${separator}${appName}\",\n    \"extensions.ignoreRecommendations\": false,\n    \"workbench.iconTheme\": \"file-icons\",\n    \"workbench.colorTheme\": \"Monokai\",\n    \"vetur.format.defaultFormatter.js\": \"vscode-typescript\",\n    \"extensions.autoUpdate\": false,\n    \"update.channel\": \"none\",\n    \"eslint.autoFixOnSave\": false,\n    \"files.autoSave\": \"off\",\n    \"eslint.validate\": [\n        \"javascript\",\n        \"javascriptreact\",\n        {\n            \"language\": \"vue\",\n            \"autoFix\": true\n        },\n        {\n            \"language\": \"html\",\n            \"autoFix\": true\n        },\n        \"vue\"\n    ],\n    \"eslint.options\": {\n        \"plugins\": [\n            \"html\"\n        ]\n    },\n    \"editor.tabSize\": 2,\n    \"prettier.eslintIntegration\": true,\n    \"vetur.format.defaultFormatterOptions\": {\n        \"html\": \"prettier\",\n        \"css\": \"prettier\",\n        \"postcss\": \"prettier\",\n        \"scss\": \"prettier\",\n        \"less\": \"prettier\",\n        \"js\": \"prettier\",\n        \"ts\": \"prettier\",\n        \"stylus\": \"stylus-supremacy\",\n        \"wrap_attributes\": \"force-aligned\",\n        \"prettier\": {\n            \"semi\": false,\n            \"singleQuote\": true\n        }\n    },\n    \"eslint.alwaysShowStatus\": true,\n    \"window.titleBarStyle\": \"custom\",\n    \"files.eol\": \"\\n\"\n}\n  ```\n3.vscode 1.29版本以上markdown-toc生成目录默认是有问题的,1.29版本以下能够直接正常使用\n\n        1.29版本以上,请在file->preferences->setting->text editor中找到Eol配置的地方,设置为\\n即可.\n        详细情况见 https://github.com/AlanWalk/markdown-toc/issues/65\n\n4.vscode 1.30版本在file->preferences->setting下找不到打开setting.json文件的入口了.如下图,可以在系统路径下找到该文件编辑即可.\n\n        文件路径\n        Windows: %APPDATA%\\Code\\User\\settings.json\n        macOS: $HOME/Library/Application Support/Code/User/settings.json\n        Linux: $HOME/.config/Code/User/settings.json\n\n![](/images/vscode.1.30.png)","source":"_posts/vscode配置前端vue开发环境.md","raw":"---\ntitle: vscode配置前端vue开发环境\ndate: 2018-12-13 14:05:39\ntags:\n  - vscode\n---\n\n    摘要:\n      使用vscode配置前端vue开发环境\n\n1.安装好vscode后,安装常用的几个插件\n\n    Auto Close Tag : 自动闭合标签插件\n\n    Beautify : 格式化js,json,css,sass,html等文件\n\n    ESLint : 使用eslint规范对代码进行处理\n\n    file-icons : 文件图标,便利区分不同类型的文件\n\n    Monokai Theme : 一款类似sublime text主流的主题设置,使界面美观,享受美好的编码心情\n\n    Path Intellisense : 自动提示文件路径插件\n\n    Prettier : 因为vscode默认的格式化是不能通过eslint校验规范的,需要改为此插件\n\n    Vetur : vscode的vue工具插件\n\n    HTML CSS Support : 在标签中class属性的时候,提示class的名称\n\n    px2rem : 将像素值转为rem插件\n\n    下面是markdown相关的插件\n\n    Markdown-TOC : 对markdown文档生成目录的插件,有2个,请选择作者为AlanWalk的\n\n2.安装好上述插件后,对其进行配置设置(2018-12-15更 v.1.30.0)\n\n    在文件->首选项->设置->用户设置里面写入以下配置\n\n  ```json\n  {\n    \"workbench.startupEditor\": \"newUntitledFile\",\n    \"window.title\": \"${dirty}${activeEditorLong}${separator}${rootName}${separator}${appName}\",\n    \"extensions.ignoreRecommendations\": false,\n    \"workbench.iconTheme\": \"file-icons\",\n    \"workbench.colorTheme\": \"Monokai\",\n    \"vetur.format.defaultFormatter.js\": \"vscode-typescript\",\n    \"extensions.autoUpdate\": false,\n    \"update.channel\": \"none\",\n    \"eslint.autoFixOnSave\": false,\n    \"files.autoSave\": \"off\",\n    \"eslint.validate\": [\n        \"javascript\",\n        \"javascriptreact\",\n        {\n            \"language\": \"vue\",\n            \"autoFix\": true\n        },\n        {\n            \"language\": \"html\",\n            \"autoFix\": true\n        },\n        \"vue\"\n    ],\n    \"eslint.options\": {\n        \"plugins\": [\n            \"html\"\n        ]\n    },\n    \"editor.tabSize\": 2,\n    \"prettier.eslintIntegration\": true,\n    \"vetur.format.defaultFormatterOptions\": {\n        \"html\": \"prettier\",\n        \"css\": \"prettier\",\n        \"postcss\": \"prettier\",\n        \"scss\": \"prettier\",\n        \"less\": \"prettier\",\n        \"js\": \"prettier\",\n        \"ts\": \"prettier\",\n        \"stylus\": \"stylus-supremacy\",\n        \"wrap_attributes\": \"force-aligned\",\n        \"prettier\": {\n            \"semi\": false,\n            \"singleQuote\": true\n        }\n    },\n    \"eslint.alwaysShowStatus\": true,\n    \"window.titleBarStyle\": \"custom\",\n    \"files.eol\": \"\\n\"\n}\n  ```\n3.vscode 1.29版本以上markdown-toc生成目录默认是有问题的,1.29版本以下能够直接正常使用\n\n        1.29版本以上,请在file->preferences->setting->text editor中找到Eol配置的地方,设置为\\n即可.\n        详细情况见 https://github.com/AlanWalk/markdown-toc/issues/65\n\n4.vscode 1.30版本在file->preferences->setting下找不到打开setting.json文件的入口了.如下图,可以在系统路径下找到该文件编辑即可.\n\n        文件路径\n        Windows: %APPDATA%\\Code\\User\\settings.json\n        macOS: $HOME/Library/Application Support/Code/User/settings.json\n        Linux: $HOME/.config/Code/User/settings.json\n\n![](/images/vscode.1.30.png)","slug":"vscode配置前端vue开发环境","published":1,"updated":"2019-09-02T07:37:22.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck024pnw20019y6fgcvrj171r","content":"<pre><code>摘要:\n  使用vscode配置前端vue开发环境\n</code></pre><p>1.安装好vscode后,安装常用的几个插件</p>\n<pre><code>Auto Close Tag : 自动闭合标签插件\n\nBeautify : 格式化js,json,css,sass,html等文件\n\nESLint : 使用eslint规范对代码进行处理\n\nfile-icons : 文件图标,便利区分不同类型的文件\n\nMonokai Theme : 一款类似sublime text主流的主题设置,使界面美观,享受美好的编码心情\n\nPath Intellisense : 自动提示文件路径插件\n\nPrettier : 因为vscode默认的格式化是不能通过eslint校验规范的,需要改为此插件\n\nVetur : vscode的vue工具插件\n\nHTML CSS Support : 在标签中class属性的时候,提示class的名称\n\npx2rem : 将像素值转为rem插件\n\n下面是markdown相关的插件\n\nMarkdown-TOC : 对markdown文档生成目录的插件,有2个,请选择作者为AlanWalk的\n</code></pre><p>2.安装好上述插件后,对其进行配置设置(2018-12-15更 v.1.30.0)</p>\n<pre><code>在文件-&gt;首选项-&gt;设置-&gt;用户设置里面写入以下配置\n</code></pre>  <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"workbench.startupEditor\"</span>: <span class=\"string\">\"newUntitledFile\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"window.title\"</span>: <span class=\"string\">\"$&#123;dirty&#125;$&#123;activeEditorLong&#125;$&#123;separator&#125;$&#123;rootName&#125;$&#123;separator&#125;$&#123;appName&#125;\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"extensions.ignoreRecommendations\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"workbench.iconTheme\"</span>: <span class=\"string\">\"file-icons\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"workbench.colorTheme\"</span>: <span class=\"string\">\"Monokai\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vetur.format.defaultFormatter.js\"</span>: <span class=\"string\">\"vscode-typescript\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"extensions.autoUpdate\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"update.channel\"</span>: <span class=\"string\">\"none\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint.autoFixOnSave\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"files.autoSave\"</span>: <span class=\"string\">\"off\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint.validate\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"javascript\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"javascriptreact\"</span>,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"language\"</span>: <span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"language\"</span>: <span class=\"string\">\"html\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"vue\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"eslint.options\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"plugins\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"html\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"editor.tabSize\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"prettier.eslintIntegration\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vetur.format.defaultFormatterOptions\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"html\"</span>: <span class=\"string\">\"prettier\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"css\"</span>: <span class=\"string\">\"prettier\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"postcss\"</span>: <span class=\"string\">\"prettier\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"scss\"</span>: <span class=\"string\">\"prettier\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"less\"</span>: <span class=\"string\">\"prettier\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"js\"</span>: <span class=\"string\">\"prettier\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"ts\"</span>: <span class=\"string\">\"prettier\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"stylus\"</span>: <span class=\"string\">\"stylus-supremacy\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"wrap_attributes\"</span>: <span class=\"string\">\"force-aligned\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"prettier\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"semi\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"singleQuote\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint.alwaysShowStatus\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"window.titleBarStyle\"</span>: <span class=\"string\">\"custom\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"files.eol\"</span>: <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.vscode 1.29版本以上markdown-toc生成目录默认是有问题的,1.29版本以下能够直接正常使用</p>\n<pre><code>1.29版本以上,请在file-&gt;preferences-&gt;setting-&gt;text editor中找到Eol配置的地方,设置为\\n即可.\n详细情况见 https://github.com/AlanWalk/markdown-toc/issues/65\n</code></pre><p>4.vscode 1.30版本在file-&gt;preferences-&gt;setting下找不到打开setting.json文件的入口了.如下图,可以在系统路径下找到该文件编辑即可.</p>\n<pre><code>文件路径\nWindows: %APPDATA%\\Code\\User\\settings.json\nmacOS: $HOME/Library/Application Support/Code/User/settings.json\nLinux: $HOME/.config/Code/User/settings.json\n</code></pre><p><img src=\"/images/vscode.1.30.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>摘要:\n  使用vscode配置前端vue开发环境\n</code></pre><p>1.安装好vscode后,安装常用的几个插件</p>\n<pre><code>Auto Close Tag : 自动闭合标签插件\n\nBeautify : 格式化js,json,css,sass,html等文件\n\nESLint : 使用eslint规范对代码进行处理\n\nfile-icons : 文件图标,便利区分不同类型的文件\n\nMonokai Theme : 一款类似sublime text主流的主题设置,使界面美观,享受美好的编码心情\n\nPath Intellisense : 自动提示文件路径插件\n\nPrettier : 因为vscode默认的格式化是不能通过eslint校验规范的,需要改为此插件\n\nVetur : vscode的vue工具插件\n\nHTML CSS Support : 在标签中class属性的时候,提示class的名称\n\npx2rem : 将像素值转为rem插件\n\n下面是markdown相关的插件\n\nMarkdown-TOC : 对markdown文档生成目录的插件,有2个,请选择作者为AlanWalk的\n</code></pre><p>2.安装好上述插件后,对其进行配置设置(2018-12-15更 v.1.30.0)</p>\n<pre><code>在文件-&gt;首选项-&gt;设置-&gt;用户设置里面写入以下配置\n</code></pre>  <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"workbench.startupEditor\"</span>: <span class=\"string\">\"newUntitledFile\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"window.title\"</span>: <span class=\"string\">\"$&#123;dirty&#125;$&#123;activeEditorLong&#125;$&#123;separator&#125;$&#123;rootName&#125;$&#123;separator&#125;$&#123;appName&#125;\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"extensions.ignoreRecommendations\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"workbench.iconTheme\"</span>: <span class=\"string\">\"file-icons\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"workbench.colorTheme\"</span>: <span class=\"string\">\"Monokai\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vetur.format.defaultFormatter.js\"</span>: <span class=\"string\">\"vscode-typescript\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"extensions.autoUpdate\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"update.channel\"</span>: <span class=\"string\">\"none\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint.autoFixOnSave\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"files.autoSave\"</span>: <span class=\"string\">\"off\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint.validate\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"javascript\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"javascriptreact\"</span>,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"language\"</span>: <span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"language\"</span>: <span class=\"string\">\"html\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"vue\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"eslint.options\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"plugins\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"html\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"editor.tabSize\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"prettier.eslintIntegration\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vetur.format.defaultFormatterOptions\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"html\"</span>: <span class=\"string\">\"prettier\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"css\"</span>: <span class=\"string\">\"prettier\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"postcss\"</span>: <span class=\"string\">\"prettier\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"scss\"</span>: <span class=\"string\">\"prettier\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"less\"</span>: <span class=\"string\">\"prettier\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"js\"</span>: <span class=\"string\">\"prettier\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"ts\"</span>: <span class=\"string\">\"prettier\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"stylus\"</span>: <span class=\"string\">\"stylus-supremacy\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"wrap_attributes\"</span>: <span class=\"string\">\"force-aligned\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"prettier\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"semi\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"singleQuote\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint.alwaysShowStatus\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"window.titleBarStyle\"</span>: <span class=\"string\">\"custom\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"files.eol\"</span>: <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.vscode 1.29版本以上markdown-toc生成目录默认是有问题的,1.29版本以下能够直接正常使用</p>\n<pre><code>1.29版本以上,请在file-&gt;preferences-&gt;setting-&gt;text editor中找到Eol配置的地方,设置为\\n即可.\n详细情况见 https://github.com/AlanWalk/markdown-toc/issues/65\n</code></pre><p>4.vscode 1.30版本在file-&gt;preferences-&gt;setting下找不到打开setting.json文件的入口了.如下图,可以在系统路径下找到该文件编辑即可.</p>\n<pre><code>文件路径\nWindows: %APPDATA%\\Code\\User\\settings.json\nmacOS: $HOME/Library/Application Support/Code/User/settings.json\nLinux: $HOME/.config/Code/User/settings.json\n</code></pre><p><img src=\"/images/vscode.1.30.png\" alt></p>\n"},{"title":"基于vue组件实现web端页面调用摄像头拍照","date":"2019-01-17T02:25:11.000Z","_content":"\n    摘要:\n      基于vue组件化方式实现PC web端页面调用摄像头拍照功能,测试是在chrome浏览器的环境下.\n\n1.封装TakePhoto 组件,组件里面暴露出始化摄像头,拍照并且返回拍照后图片的base64码的方法\n\nTakePhoto 组件的全部代码如下:\n\n\n```vue\n<template>\n  <div class=\"wrapper\">\n    <video\n      ref=\"video\"\n      :width=\"width\"\n      :height=\"height\"\n      autoplay\n      style=\"width= 100%; height=100%; object-fit: fill\"\n    ></video>\n    <canvas ref=\"canvas\" width=\"300\" height=\"400\" v-show=\"taked\"></canvas>\n  </div>\n</template>\n<script>\nexport default {\n  name: 'TakePhoto',\n  props: {\n    width: {\n      default: 300 // 不传默认300\n    },\n    height: {\n      default: 400 // 不传默认400\n    }\n  },\n  data() {\n    return {\n      video: null,\n      track: '',\n      taked: false\n    }\n  },\n  methods: {\n    init(call) {\n      this.taked = false\n      this.video = this.$refs.video\n      navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia\n      if (navigator.getUserMedia) {\n        navigator.getUserMedia({ video: true },\n          (stream) => {\n            this.track = stream.getTracks()[0]  // 通过这个关闭摄像头\n            try {\n              this.video.src = window.URL.createObjectURL(stream) // chrome版本<=70\n            } catch (e) {\n              this.video.srcObject = stream // chrome版本>70\n            }\n            this.video.onloadedmetadata = (e) => {\n              console.log(e)\n              this.video.play()\n              call(true)\n            }\n          }, (err) => {\n            console.log(err)\n            call(false)\n          }\n        )\n      } else {\n        call(false)\n      }\n    },\n    takePhoto(call) {\n      let canvas = this.$refs.canvas\n      let context2D = canvas.getContext('2d')\n      context2D.fillStyle = '#ffffff'\n      context2D.fillRect(0, 0, this.width, this.height)\n      context2D.drawImage(this.video, 0, 0, this.width, this.height)\n      let image_code = canvas.toDataURL('image/png')//图片的base64\n      this.taked = true\n      call(true, image_code)\n      if (null != this.track) {\n        this.track.stop()//关闭摄像头\n      }\n    }\n  },\n  destroyed() {\n    if (null != this.track) {\n      this.track.stop()//关闭摄像头\n    }\n  }\n}\n</script>\n<style scoped>\ncanvas {\nposition: absolute;\nleft: 0;\ntop: 0;\nz-index: 1000;\n}\n.wrapper {\nposition: relative;\n}\n</style>\n```\n\n    说明: 摄像区域的宽高由外部传入,不传采用默认的值.init()初始化摄像头,takePhoto()进行拍照操作\n\n2.调用TakePhoto组件里面的方法进行拍照\n\n调用TakePhoto 组件的关键代码如下:\n\n```vue\n<div>\n  <TakePhoto class=\"photo\" ref=\"photo\"></TakePhoto>\n  <div class=\"takePhoto-btn\" @click=\"handleTakePhoto\" {{statusMsg}}</div>\n</div>\n\nhandleTakePhoto() {\n  if (this.status === 1) { // 初始化摄像头\n    this.statusMsg = '查找设备中...'\n    this.$refs.photo.init((res) => {\n      if (res) {\n        this.status = 2\n        this.statusMsg = '拍照'\n      } else {\n        alert('未发现设备')\n      }\n    }) // 初始化摄像头\n  } else if (this.status === 2) { // 拍照\n    this.$refs.photo.takePhoto((res, img) => {\n      if (res) {\n        this.status = 3\n        console.log(img)\n        this.statusMsg = '重新拍'\n      }\n    })\n  } else if (this.status === 3) { // 重新拍\n    this.$refs.photo.init((res) => {\n      if (res) {\n        this.status = 2\n        this.statusMsg = '拍照'\n      } else {\n        alert('未发现设备')\n      }\n    }) // 初始化摄像头\n  }\n}\n```\n\n    说明:组件中定义statusMsg和status两个变量,statusMsg主要是改变整个流程中状态信息的提示,status是对应的状态码.\n\n3.实际效果图\n\n![](/images/photo.gif)","source":"_posts/基于vue组件实现web端页面调用摄像头拍照.md","raw":"---\ntitle: 基于vue组件实现web端页面调用摄像头拍照\ndate: 2019-01-17 10:25:11\ntags: \n  - vue\n  - web\n---\n\n    摘要:\n      基于vue组件化方式实现PC web端页面调用摄像头拍照功能,测试是在chrome浏览器的环境下.\n\n1.封装TakePhoto 组件,组件里面暴露出始化摄像头,拍照并且返回拍照后图片的base64码的方法\n\nTakePhoto 组件的全部代码如下:\n\n\n```vue\n<template>\n  <div class=\"wrapper\">\n    <video\n      ref=\"video\"\n      :width=\"width\"\n      :height=\"height\"\n      autoplay\n      style=\"width= 100%; height=100%; object-fit: fill\"\n    ></video>\n    <canvas ref=\"canvas\" width=\"300\" height=\"400\" v-show=\"taked\"></canvas>\n  </div>\n</template>\n<script>\nexport default {\n  name: 'TakePhoto',\n  props: {\n    width: {\n      default: 300 // 不传默认300\n    },\n    height: {\n      default: 400 // 不传默认400\n    }\n  },\n  data() {\n    return {\n      video: null,\n      track: '',\n      taked: false\n    }\n  },\n  methods: {\n    init(call) {\n      this.taked = false\n      this.video = this.$refs.video\n      navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia\n      if (navigator.getUserMedia) {\n        navigator.getUserMedia({ video: true },\n          (stream) => {\n            this.track = stream.getTracks()[0]  // 通过这个关闭摄像头\n            try {\n              this.video.src = window.URL.createObjectURL(stream) // chrome版本<=70\n            } catch (e) {\n              this.video.srcObject = stream // chrome版本>70\n            }\n            this.video.onloadedmetadata = (e) => {\n              console.log(e)\n              this.video.play()\n              call(true)\n            }\n          }, (err) => {\n            console.log(err)\n            call(false)\n          }\n        )\n      } else {\n        call(false)\n      }\n    },\n    takePhoto(call) {\n      let canvas = this.$refs.canvas\n      let context2D = canvas.getContext('2d')\n      context2D.fillStyle = '#ffffff'\n      context2D.fillRect(0, 0, this.width, this.height)\n      context2D.drawImage(this.video, 0, 0, this.width, this.height)\n      let image_code = canvas.toDataURL('image/png')//图片的base64\n      this.taked = true\n      call(true, image_code)\n      if (null != this.track) {\n        this.track.stop()//关闭摄像头\n      }\n    }\n  },\n  destroyed() {\n    if (null != this.track) {\n      this.track.stop()//关闭摄像头\n    }\n  }\n}\n</script>\n<style scoped>\ncanvas {\nposition: absolute;\nleft: 0;\ntop: 0;\nz-index: 1000;\n}\n.wrapper {\nposition: relative;\n}\n</style>\n```\n\n    说明: 摄像区域的宽高由外部传入,不传采用默认的值.init()初始化摄像头,takePhoto()进行拍照操作\n\n2.调用TakePhoto组件里面的方法进行拍照\n\n调用TakePhoto 组件的关键代码如下:\n\n```vue\n<div>\n  <TakePhoto class=\"photo\" ref=\"photo\"></TakePhoto>\n  <div class=\"takePhoto-btn\" @click=\"handleTakePhoto\" {{statusMsg}}</div>\n</div>\n\nhandleTakePhoto() {\n  if (this.status === 1) { // 初始化摄像头\n    this.statusMsg = '查找设备中...'\n    this.$refs.photo.init((res) => {\n      if (res) {\n        this.status = 2\n        this.statusMsg = '拍照'\n      } else {\n        alert('未发现设备')\n      }\n    }) // 初始化摄像头\n  } else if (this.status === 2) { // 拍照\n    this.$refs.photo.takePhoto((res, img) => {\n      if (res) {\n        this.status = 3\n        console.log(img)\n        this.statusMsg = '重新拍'\n      }\n    })\n  } else if (this.status === 3) { // 重新拍\n    this.$refs.photo.init((res) => {\n      if (res) {\n        this.status = 2\n        this.statusMsg = '拍照'\n      } else {\n        alert('未发现设备')\n      }\n    }) // 初始化摄像头\n  }\n}\n```\n\n    说明:组件中定义statusMsg和status两个变量,statusMsg主要是改变整个流程中状态信息的提示,status是对应的状态码.\n\n3.实际效果图\n\n![](/images/photo.gif)","slug":"基于vue组件实现web端页面调用摄像头拍照","published":1,"updated":"2019-09-02T07:37:22.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck024pnw4001cy6fgctdymrm0","content":"<pre><code>摘要:\n  基于vue组件化方式实现PC web端页面调用摄像头拍照功能,测试是在chrome浏览器的环境下.\n</code></pre><p>1.封装TakePhoto 组件,组件里面暴露出始化摄像头,拍照并且返回拍照后图片的base64码的方法</p>\n<p>TakePhoto 组件的全部代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">    &lt;video</span><br><span class=\"line\">      ref=&quot;video&quot;</span><br><span class=\"line\">      :width=&quot;width&quot;</span><br><span class=\"line\">      :height=&quot;height&quot;</span><br><span class=\"line\">      autoplay</span><br><span class=\"line\">      style=&quot;width= 100%; height=100%; object-fit: fill&quot;</span><br><span class=\"line\">    &gt;&lt;/video&gt;</span><br><span class=\"line\">    &lt;canvas ref=&quot;canvas&quot; width=&quot;300&quot; height=&quot;400&quot; v-show=&quot;taked&quot;&gt;&lt;/canvas&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &apos;TakePhoto&apos;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    width: &#123;</span><br><span class=\"line\">      default: 300 // 不传默认300</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    height: &#123;</span><br><span class=\"line\">      default: 400 // 不传默认400</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      video: null,</span><br><span class=\"line\">      track: &apos;&apos;,</span><br><span class=\"line\">      taked: false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    init(call) &#123;</span><br><span class=\"line\">      this.taked = false</span><br><span class=\"line\">      this.video = this.$refs.video</span><br><span class=\"line\">      navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia</span><br><span class=\"line\">      if (navigator.getUserMedia) &#123;</span><br><span class=\"line\">        navigator.getUserMedia(&#123; video: true &#125;,</span><br><span class=\"line\">          (stream) =&gt; &#123;</span><br><span class=\"line\">            this.track = stream.getTracks()[0]  // 通过这个关闭摄像头</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">              this.video.src = window.URL.createObjectURL(stream) // chrome版本&lt;=70</span><br><span class=\"line\">            &#125; catch (e) &#123;</span><br><span class=\"line\">              this.video.srcObject = stream // chrome版本&gt;70</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            this.video.onloadedmetadata = (e) =&gt; &#123;</span><br><span class=\"line\">              console.log(e)</span><br><span class=\"line\">              this.video.play()</span><br><span class=\"line\">              call(true)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, (err) =&gt; &#123;</span><br><span class=\"line\">            console.log(err)</span><br><span class=\"line\">            call(false)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        call(false)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    takePhoto(call) &#123;</span><br><span class=\"line\">      let canvas = this.$refs.canvas</span><br><span class=\"line\">      let context2D = canvas.getContext(&apos;2d&apos;)</span><br><span class=\"line\">      context2D.fillStyle = &apos;#ffffff&apos;</span><br><span class=\"line\">      context2D.fillRect(0, 0, this.width, this.height)</span><br><span class=\"line\">      context2D.drawImage(this.video, 0, 0, this.width, this.height)</span><br><span class=\"line\">      let image_code = canvas.toDataURL(&apos;image/png&apos;)//图片的base64</span><br><span class=\"line\">      this.taked = true</span><br><span class=\"line\">      call(true, image_code)</span><br><span class=\"line\">      if (null != this.track) &#123;</span><br><span class=\"line\">        this.track.stop()//关闭摄像头</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  destroyed() &#123;</span><br><span class=\"line\">    if (null != this.track) &#123;</span><br><span class=\"line\">      this.track.stop()//关闭摄像头</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">canvas &#123;</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">left: 0;</span><br><span class=\"line\">top: 0;</span><br><span class=\"line\">z-index: 1000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wrapper &#123;</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<pre><code>说明: 摄像区域的宽高由外部传入,不传采用默认的值.init()初始化摄像头,takePhoto()进行拍照操作\n</code></pre><p>2.调用TakePhoto组件里面的方法进行拍照</p>\n<p>调用TakePhoto 组件的关键代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;TakePhoto class=&quot;photo&quot; ref=&quot;photo&quot;&gt;&lt;/TakePhoto&gt;</span><br><span class=\"line\">  &lt;div class=&quot;takePhoto-btn&quot; @click=&quot;handleTakePhoto&quot; &#123;&#123;statusMsg&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">handleTakePhoto() &#123;</span><br><span class=\"line\">  if (this.status === 1) &#123; // 初始化摄像头</span><br><span class=\"line\">    this.statusMsg = &apos;查找设备中...&apos;</span><br><span class=\"line\">    this.$refs.photo.init((res) =&gt; &#123;</span><br><span class=\"line\">      if (res) &#123;</span><br><span class=\"line\">        this.status = 2</span><br><span class=\"line\">        this.statusMsg = &apos;拍照&apos;</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        alert(&apos;未发现设备&apos;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;) // 初始化摄像头</span><br><span class=\"line\">  &#125; else if (this.status === 2) &#123; // 拍照</span><br><span class=\"line\">    this.$refs.photo.takePhoto((res, img) =&gt; &#123;</span><br><span class=\"line\">      if (res) &#123;</span><br><span class=\"line\">        this.status = 3</span><br><span class=\"line\">        console.log(img)</span><br><span class=\"line\">        this.statusMsg = &apos;重新拍&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; else if (this.status === 3) &#123; // 重新拍</span><br><span class=\"line\">    this.$refs.photo.init((res) =&gt; &#123;</span><br><span class=\"line\">      if (res) &#123;</span><br><span class=\"line\">        this.status = 2</span><br><span class=\"line\">        this.statusMsg = &apos;拍照&apos;</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        alert(&apos;未发现设备&apos;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;) // 初始化摄像头</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>说明:组件中定义statusMsg和status两个变量,statusMsg主要是改变整个流程中状态信息的提示,status是对应的状态码.\n</code></pre><p>3.实际效果图</p>\n<p><img src=\"/images/photo.gif\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>摘要:\n  基于vue组件化方式实现PC web端页面调用摄像头拍照功能,测试是在chrome浏览器的环境下.\n</code></pre><p>1.封装TakePhoto 组件,组件里面暴露出始化摄像头,拍照并且返回拍照后图片的base64码的方法</p>\n<p>TakePhoto 组件的全部代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">    &lt;video</span><br><span class=\"line\">      ref=&quot;video&quot;</span><br><span class=\"line\">      :width=&quot;width&quot;</span><br><span class=\"line\">      :height=&quot;height&quot;</span><br><span class=\"line\">      autoplay</span><br><span class=\"line\">      style=&quot;width= 100%; height=100%; object-fit: fill&quot;</span><br><span class=\"line\">    &gt;&lt;/video&gt;</span><br><span class=\"line\">    &lt;canvas ref=&quot;canvas&quot; width=&quot;300&quot; height=&quot;400&quot; v-show=&quot;taked&quot;&gt;&lt;/canvas&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &apos;TakePhoto&apos;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    width: &#123;</span><br><span class=\"line\">      default: 300 // 不传默认300</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    height: &#123;</span><br><span class=\"line\">      default: 400 // 不传默认400</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      video: null,</span><br><span class=\"line\">      track: &apos;&apos;,</span><br><span class=\"line\">      taked: false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    init(call) &#123;</span><br><span class=\"line\">      this.taked = false</span><br><span class=\"line\">      this.video = this.$refs.video</span><br><span class=\"line\">      navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia</span><br><span class=\"line\">      if (navigator.getUserMedia) &#123;</span><br><span class=\"line\">        navigator.getUserMedia(&#123; video: true &#125;,</span><br><span class=\"line\">          (stream) =&gt; &#123;</span><br><span class=\"line\">            this.track = stream.getTracks()[0]  // 通过这个关闭摄像头</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">              this.video.src = window.URL.createObjectURL(stream) // chrome版本&lt;=70</span><br><span class=\"line\">            &#125; catch (e) &#123;</span><br><span class=\"line\">              this.video.srcObject = stream // chrome版本&gt;70</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            this.video.onloadedmetadata = (e) =&gt; &#123;</span><br><span class=\"line\">              console.log(e)</span><br><span class=\"line\">              this.video.play()</span><br><span class=\"line\">              call(true)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, (err) =&gt; &#123;</span><br><span class=\"line\">            console.log(err)</span><br><span class=\"line\">            call(false)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        call(false)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    takePhoto(call) &#123;</span><br><span class=\"line\">      let canvas = this.$refs.canvas</span><br><span class=\"line\">      let context2D = canvas.getContext(&apos;2d&apos;)</span><br><span class=\"line\">      context2D.fillStyle = &apos;#ffffff&apos;</span><br><span class=\"line\">      context2D.fillRect(0, 0, this.width, this.height)</span><br><span class=\"line\">      context2D.drawImage(this.video, 0, 0, this.width, this.height)</span><br><span class=\"line\">      let image_code = canvas.toDataURL(&apos;image/png&apos;)//图片的base64</span><br><span class=\"line\">      this.taked = true</span><br><span class=\"line\">      call(true, image_code)</span><br><span class=\"line\">      if (null != this.track) &#123;</span><br><span class=\"line\">        this.track.stop()//关闭摄像头</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  destroyed() &#123;</span><br><span class=\"line\">    if (null != this.track) &#123;</span><br><span class=\"line\">      this.track.stop()//关闭摄像头</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">canvas &#123;</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">left: 0;</span><br><span class=\"line\">top: 0;</span><br><span class=\"line\">z-index: 1000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wrapper &#123;</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<pre><code>说明: 摄像区域的宽高由外部传入,不传采用默认的值.init()初始化摄像头,takePhoto()进行拍照操作\n</code></pre><p>2.调用TakePhoto组件里面的方法进行拍照</p>\n<p>调用TakePhoto 组件的关键代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;TakePhoto class=&quot;photo&quot; ref=&quot;photo&quot;&gt;&lt;/TakePhoto&gt;</span><br><span class=\"line\">  &lt;div class=&quot;takePhoto-btn&quot; @click=&quot;handleTakePhoto&quot; &#123;&#123;statusMsg&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">handleTakePhoto() &#123;</span><br><span class=\"line\">  if (this.status === 1) &#123; // 初始化摄像头</span><br><span class=\"line\">    this.statusMsg = &apos;查找设备中...&apos;</span><br><span class=\"line\">    this.$refs.photo.init((res) =&gt; &#123;</span><br><span class=\"line\">      if (res) &#123;</span><br><span class=\"line\">        this.status = 2</span><br><span class=\"line\">        this.statusMsg = &apos;拍照&apos;</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        alert(&apos;未发现设备&apos;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;) // 初始化摄像头</span><br><span class=\"line\">  &#125; else if (this.status === 2) &#123; // 拍照</span><br><span class=\"line\">    this.$refs.photo.takePhoto((res, img) =&gt; &#123;</span><br><span class=\"line\">      if (res) &#123;</span><br><span class=\"line\">        this.status = 3</span><br><span class=\"line\">        console.log(img)</span><br><span class=\"line\">        this.statusMsg = &apos;重新拍&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; else if (this.status === 3) &#123; // 重新拍</span><br><span class=\"line\">    this.$refs.photo.init((res) =&gt; &#123;</span><br><span class=\"line\">      if (res) &#123;</span><br><span class=\"line\">        this.status = 2</span><br><span class=\"line\">        this.statusMsg = &apos;拍照&apos;</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        alert(&apos;未发现设备&apos;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;) // 初始化摄像头</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>说明:组件中定义statusMsg和status两个变量,statusMsg主要是改变整个流程中状态信息的提示,status是对应的状态码.\n</code></pre><p>3.实际效果图</p>\n<p><img src=\"/images/photo.gif\" alt></p>\n"},{"title":"编译安装nginx添加rtmp模块","date":"2019-06-01T03:30:17.000Z","_content":"\n    摘要:nginx源码编译添加rtmp模块实现视频推流服务器\n    环境:deepin linux 15.10.1(基于debian9)\n\n### 安装依赖库\n\n执行命令前,最好执行一次sudo apt update更新下仓库\n\n`sudo apt install autoconf automake`\n\n`sudo apt install libpcre3 libpcre3-dev`\n\n`sudo apt install openssl`\n\n`sudo apt install libssl-dev`\n\n### 下载nginx和nginx-rtmp-module源码\n\n进入到一个目录(可以自己新建),然后clone nginx和rtmp模块的源码,地址可在github上面查找对应的仓库,然后进行clone操作(需要安装git)\n\n`git clone https://github.com/nginx/nginx.git --depth=1` // clone nginx源码,指定克隆深度depth为1即表示只克隆最近一次commit(clone时间大幅缩短)\n\n`git clone https://github.com/arut/nginx-rtmp-module.git --depth=1` // clone nginx-rtmp-module源码\n\n进入到nginx源码目录,有一个auto文件夹，里面有一个名为configure的文件.通过命令参数调用该文件,生成MakeFile\n\n`cd nginx` // 进入到nginx源码目录\n\n`./auto/configure --prefix=/opt/nginx --with-http_ssl_module --with-http_v2_module --with-http_flv_module --with-http_mp4_module --add-module=../nginx-rtmp-module/`\n\n`ls -al` // 查看当前目录(nginx)下的文件,会有一个产生的MakeFile文件\n\n### 编译和安装\n\n当前目录还是位于上一步的nginx目录\n\n`make` // 编译\n\n`sudo make install` // 安装\n\n### 查看结果\n\n`ls -l /opt/nginx/` // 查看opt目录下nginx目录的内容\n\n`sudo /opt/nginx/sbin/nginx` // 启动nginx服务,默认只能用root启动,所以加sudo\n\n`sudo chmod u+s /opt/nginx/sbin/nginx` // 为nginx文件加上setuid标志.(setuid只对文件有效).设置后可以通过普通用户就可以启动\n\n\n* 关于chmod扩展:如果是一个可执行文件, 那么在执行时, 一般该文件只拥有调用该文件的用户具有的权限. 而setuid, setgid 可以来改变这种设置:\n\n  setuid: 设置使文件在执行阶段具有文件所有者的权限\n  \n  setgid: 该权限只对目录有效. 目录被设置该位后, 任何用户在此目录下创建的文件都具有和该目录所属的组相同的组.\n  \n  sticky bit: 该位可以理解为防删除位. 一个文件是否可以被某用户删除, 主要取决于该文件所属的组是否对该用户具有写权限. 如果没有写权限, 则这个目录下的所有文件都不能被删除, 同时也不能添加新的文件. 如果希望用户能够添加文件但同时不能删除文件, 则可以对文件使用sticky bit位. 设置该位后, 就算用户对目录具有写权限, 也不能删除该文件,该权限只对目录有效.\n\n  具体使用如下\n\n  chmod u+s temp — 为temp文件加上setuid标志. (setuid 只对文件有效)\n  \n  chmod g+s tempdir — 为tempdir目录加上setgid标志 (setgid 只对目录有效)\n  \n  chmod o+t temp — 为temp文件加上sticky标志 (sticky只对文件有效) *\n\n\n浏览器打开localhost,正常就能打开nginx默认的首页面\n\n### nginx 推流配置\n\n`sudo vim /opt/nginx/conf/nginx.conf`\n\n    rtmp {\n      server {\n          listen 1935;\n          application rtmplive_demo {\n              live on;\n              max_connections 1024;\n          }\n          application hlsvideo {\n              live on;\n              hls on;\n              hls_path /home/bz/Desktop/video/hlsvideo; # 推流存放文件夹,自定义\n              hls_fragment 1s;\n          }\n      }\n    }\n\n    location ^~ /hlsvideo {\n      types {\n        application/vnd.apple.mpegurl    m3u8;\n        video/mp2t ts;\n      }\n      root /home/bz/Desktop/video; # 此处不能写/home/bz/Desktop/video/hlsvideo,因为路径中带了一层hlsvideo了,如果写上hlsvideo会导致读取m3u8文件404\n      add_header Cache-Control    no-cache;\n    }\n\n`sudo /opt/nginx/sbin/nginx -t` // 测试配置文件是否ok\n\n`sudo /opt/nginx/sbin/nginx -s reload`\n\n#### 测试rtmp推流\n\n`ffmpeg -re -i ./龙珠超.布罗利.mp4 -vcodec libx264 -vprofile baseline -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -s 1280x720 -q 10 rtmp://192.168.100.31:1935/rtmplive_demo/longzhuchao`\n\n    注:rtmp://192.168.100.31:1935/rtmplive_demo/longzhuchao rtmp流地址,其中rtmplive_demo必须和nginx.conf中\n    application中的rtmplive_demo名称必须一致,否则导致推流不成功\n\n打开VLC Media Player测试\n\n在工具栏\"媒体->打开网络串流\"然后输入rtmp://192.168.100.31:1935/rtmplive_demo/longzhuchao点击确定即可进行直播预览转换后的rtmp视频流.效果如图\n\n![](/images/push_rtmp_res.png)\n\n\n#### 测试HLS推流\n\n`ffmpeg -re -i ./龙珠超.布罗利.mp4 -vcodec libx264 -vprofile baseline -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -s 1280x720 -q 10 rtmp://192.168.100.31:1935/hlsvideo/longzhuchao`\n\n    注:rtmp://192.168.100.31:1935/hlsvideo/longzhuchao,其中hlsvideo必须和nginx.conf中\n    application中hlsvideo名称必须一致,否则导致推流不成功\n\n打开VLC Media Player测试\n\nHLS测试地址是http协议的.访问路径是nginx中http节点下server节点配置的.此处是http://192.168.100.31/hlsvideo/longzhuchao.m3u8\n\n在工具栏\"媒体->打开网络串流\"然后输入http://192.168.100.31/hlsvideo/longzhuchao.m3u8点击确定即可进行直播预览转换后的rtmp视频流.效果如图\n\n![](/images/m3u8-res.png)","source":"_posts/编译安装nginx添加rtmp模块.md","raw":"---\ntitle: 编译安装nginx添加rtmp模块\ndate: 2019-06-01 11:30:17\ntags:\n  - nginx\n  - rtmp\n---\n\n    摘要:nginx源码编译添加rtmp模块实现视频推流服务器\n    环境:deepin linux 15.10.1(基于debian9)\n\n### 安装依赖库\n\n执行命令前,最好执行一次sudo apt update更新下仓库\n\n`sudo apt install autoconf automake`\n\n`sudo apt install libpcre3 libpcre3-dev`\n\n`sudo apt install openssl`\n\n`sudo apt install libssl-dev`\n\n### 下载nginx和nginx-rtmp-module源码\n\n进入到一个目录(可以自己新建),然后clone nginx和rtmp模块的源码,地址可在github上面查找对应的仓库,然后进行clone操作(需要安装git)\n\n`git clone https://github.com/nginx/nginx.git --depth=1` // clone nginx源码,指定克隆深度depth为1即表示只克隆最近一次commit(clone时间大幅缩短)\n\n`git clone https://github.com/arut/nginx-rtmp-module.git --depth=1` // clone nginx-rtmp-module源码\n\n进入到nginx源码目录,有一个auto文件夹，里面有一个名为configure的文件.通过命令参数调用该文件,生成MakeFile\n\n`cd nginx` // 进入到nginx源码目录\n\n`./auto/configure --prefix=/opt/nginx --with-http_ssl_module --with-http_v2_module --with-http_flv_module --with-http_mp4_module --add-module=../nginx-rtmp-module/`\n\n`ls -al` // 查看当前目录(nginx)下的文件,会有一个产生的MakeFile文件\n\n### 编译和安装\n\n当前目录还是位于上一步的nginx目录\n\n`make` // 编译\n\n`sudo make install` // 安装\n\n### 查看结果\n\n`ls -l /opt/nginx/` // 查看opt目录下nginx目录的内容\n\n`sudo /opt/nginx/sbin/nginx` // 启动nginx服务,默认只能用root启动,所以加sudo\n\n`sudo chmod u+s /opt/nginx/sbin/nginx` // 为nginx文件加上setuid标志.(setuid只对文件有效).设置后可以通过普通用户就可以启动\n\n\n* 关于chmod扩展:如果是一个可执行文件, 那么在执行时, 一般该文件只拥有调用该文件的用户具有的权限. 而setuid, setgid 可以来改变这种设置:\n\n  setuid: 设置使文件在执行阶段具有文件所有者的权限\n  \n  setgid: 该权限只对目录有效. 目录被设置该位后, 任何用户在此目录下创建的文件都具有和该目录所属的组相同的组.\n  \n  sticky bit: 该位可以理解为防删除位. 一个文件是否可以被某用户删除, 主要取决于该文件所属的组是否对该用户具有写权限. 如果没有写权限, 则这个目录下的所有文件都不能被删除, 同时也不能添加新的文件. 如果希望用户能够添加文件但同时不能删除文件, 则可以对文件使用sticky bit位. 设置该位后, 就算用户对目录具有写权限, 也不能删除该文件,该权限只对目录有效.\n\n  具体使用如下\n\n  chmod u+s temp — 为temp文件加上setuid标志. (setuid 只对文件有效)\n  \n  chmod g+s tempdir — 为tempdir目录加上setgid标志 (setgid 只对目录有效)\n  \n  chmod o+t temp — 为temp文件加上sticky标志 (sticky只对文件有效) *\n\n\n浏览器打开localhost,正常就能打开nginx默认的首页面\n\n### nginx 推流配置\n\n`sudo vim /opt/nginx/conf/nginx.conf`\n\n    rtmp {\n      server {\n          listen 1935;\n          application rtmplive_demo {\n              live on;\n              max_connections 1024;\n          }\n          application hlsvideo {\n              live on;\n              hls on;\n              hls_path /home/bz/Desktop/video/hlsvideo; # 推流存放文件夹,自定义\n              hls_fragment 1s;\n          }\n      }\n    }\n\n    location ^~ /hlsvideo {\n      types {\n        application/vnd.apple.mpegurl    m3u8;\n        video/mp2t ts;\n      }\n      root /home/bz/Desktop/video; # 此处不能写/home/bz/Desktop/video/hlsvideo,因为路径中带了一层hlsvideo了,如果写上hlsvideo会导致读取m3u8文件404\n      add_header Cache-Control    no-cache;\n    }\n\n`sudo /opt/nginx/sbin/nginx -t` // 测试配置文件是否ok\n\n`sudo /opt/nginx/sbin/nginx -s reload`\n\n#### 测试rtmp推流\n\n`ffmpeg -re -i ./龙珠超.布罗利.mp4 -vcodec libx264 -vprofile baseline -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -s 1280x720 -q 10 rtmp://192.168.100.31:1935/rtmplive_demo/longzhuchao`\n\n    注:rtmp://192.168.100.31:1935/rtmplive_demo/longzhuchao rtmp流地址,其中rtmplive_demo必须和nginx.conf中\n    application中的rtmplive_demo名称必须一致,否则导致推流不成功\n\n打开VLC Media Player测试\n\n在工具栏\"媒体->打开网络串流\"然后输入rtmp://192.168.100.31:1935/rtmplive_demo/longzhuchao点击确定即可进行直播预览转换后的rtmp视频流.效果如图\n\n![](/images/push_rtmp_res.png)\n\n\n#### 测试HLS推流\n\n`ffmpeg -re -i ./龙珠超.布罗利.mp4 -vcodec libx264 -vprofile baseline -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -s 1280x720 -q 10 rtmp://192.168.100.31:1935/hlsvideo/longzhuchao`\n\n    注:rtmp://192.168.100.31:1935/hlsvideo/longzhuchao,其中hlsvideo必须和nginx.conf中\n    application中hlsvideo名称必须一致,否则导致推流不成功\n\n打开VLC Media Player测试\n\nHLS测试地址是http协议的.访问路径是nginx中http节点下server节点配置的.此处是http://192.168.100.31/hlsvideo/longzhuchao.m3u8\n\n在工具栏\"媒体->打开网络串流\"然后输入http://192.168.100.31/hlsvideo/longzhuchao.m3u8点击确定即可进行直播预览转换后的rtmp视频流.效果如图\n\n![](/images/m3u8-res.png)","slug":"编译安装nginx添加rtmp模块","published":1,"updated":"2019-09-02T07:37:22.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck024pnw5001ey6fgv4ay3jx7","content":"<pre><code>摘要:nginx源码编译添加rtmp模块实现视频推流服务器\n环境:deepin linux 15.10.1(基于debian9)\n</code></pre><h3 id=\"安装依赖库\"><a href=\"#安装依赖库\" class=\"headerlink\" title=\"安装依赖库\"></a>安装依赖库</h3><p>执行命令前,最好执行一次sudo apt update更新下仓库</p>\n<p><code>sudo apt install autoconf automake</code></p>\n<p><code>sudo apt install libpcre3 libpcre3-dev</code></p>\n<p><code>sudo apt install openssl</code></p>\n<p><code>sudo apt install libssl-dev</code></p>\n<h3 id=\"下载nginx和nginx-rtmp-module源码\"><a href=\"#下载nginx和nginx-rtmp-module源码\" class=\"headerlink\" title=\"下载nginx和nginx-rtmp-module源码\"></a>下载nginx和nginx-rtmp-module源码</h3><p>进入到一个目录(可以自己新建),然后clone nginx和rtmp模块的源码,地址可在github上面查找对应的仓库,然后进行clone操作(需要安装git)</p>\n<p><code>git clone https://github.com/nginx/nginx.git --depth=1</code> // clone nginx源码,指定克隆深度depth为1即表示只克隆最近一次commit(clone时间大幅缩短)</p>\n<p><code>git clone https://github.com/arut/nginx-rtmp-module.git --depth=1</code> // clone nginx-rtmp-module源码</p>\n<p>进入到nginx源码目录,有一个auto文件夹，里面有一个名为configure的文件.通过命令参数调用该文件,生成MakeFile</p>\n<p><code>cd nginx</code> // 进入到nginx源码目录</p>\n<p><code>./auto/configure --prefix=/opt/nginx --with-http_ssl_module --with-http_v2_module --with-http_flv_module --with-http_mp4_module --add-module=../nginx-rtmp-module/</code></p>\n<p><code>ls -al</code> // 查看当前目录(nginx)下的文件,会有一个产生的MakeFile文件</p>\n<h3 id=\"编译和安装\"><a href=\"#编译和安装\" class=\"headerlink\" title=\"编译和安装\"></a>编译和安装</h3><p>当前目录还是位于上一步的nginx目录</p>\n<p><code>make</code> // 编译</p>\n<p><code>sudo make install</code> // 安装</p>\n<h3 id=\"查看结果\"><a href=\"#查看结果\" class=\"headerlink\" title=\"查看结果\"></a>查看结果</h3><p><code>ls -l /opt/nginx/</code> // 查看opt目录下nginx目录的内容</p>\n<p><code>sudo /opt/nginx/sbin/nginx</code> // 启动nginx服务,默认只能用root启动,所以加sudo</p>\n<p><code>sudo chmod u+s /opt/nginx/sbin/nginx</code> // 为nginx文件加上setuid标志.(setuid只对文件有效).设置后可以通过普通用户就可以启动</p>\n<ul>\n<li><p>关于chmod扩展:如果是一个可执行文件, 那么在执行时, 一般该文件只拥有调用该文件的用户具有的权限. 而setuid, setgid 可以来改变这种设置:</p>\n<p>setuid: 设置使文件在执行阶段具有文件所有者的权限</p>\n<p>setgid: 该权限只对目录有效. 目录被设置该位后, 任何用户在此目录下创建的文件都具有和该目录所属的组相同的组.</p>\n<p>sticky bit: 该位可以理解为防删除位. 一个文件是否可以被某用户删除, 主要取决于该文件所属的组是否对该用户具有写权限. 如果没有写权限, 则这个目录下的所有文件都不能被删除, 同时也不能添加新的文件. 如果希望用户能够添加文件但同时不能删除文件, 则可以对文件使用sticky bit位. 设置该位后, 就算用户对目录具有写权限, 也不能删除该文件,该权限只对目录有效.</p>\n<p>具体使用如下</p>\n<p>chmod u+s temp — 为temp文件加上setuid标志. (setuid 只对文件有效)</p>\n<p>chmod g+s tempdir — 为tempdir目录加上setgid标志 (setgid 只对目录有效)</p>\n<p>chmod o+t temp — 为temp文件加上sticky标志 (sticky只对文件有效) *</p>\n</li>\n</ul>\n<p>浏览器打开localhost,正常就能打开nginx默认的首页面</p>\n<h3 id=\"nginx-推流配置\"><a href=\"#nginx-推流配置\" class=\"headerlink\" title=\"nginx 推流配置\"></a>nginx 推流配置</h3><p><code>sudo vim /opt/nginx/conf/nginx.conf</code></p>\n<pre><code>rtmp {\n  server {\n      listen 1935;\n      application rtmplive_demo {\n          live on;\n          max_connections 1024;\n      }\n      application hlsvideo {\n          live on;\n          hls on;\n          hls_path /home/bz/Desktop/video/hlsvideo; # 推流存放文件夹,自定义\n          hls_fragment 1s;\n      }\n  }\n}\n\nlocation ^~ /hlsvideo {\n  types {\n    application/vnd.apple.mpegurl    m3u8;\n    video/mp2t ts;\n  }\n  root /home/bz/Desktop/video; # 此处不能写/home/bz/Desktop/video/hlsvideo,因为路径中带了一层hlsvideo了,如果写上hlsvideo会导致读取m3u8文件404\n  add_header Cache-Control    no-cache;\n}\n</code></pre><p><code>sudo /opt/nginx/sbin/nginx -t</code> // 测试配置文件是否ok</p>\n<p><code>sudo /opt/nginx/sbin/nginx -s reload</code></p>\n<h4 id=\"测试rtmp推流\"><a href=\"#测试rtmp推流\" class=\"headerlink\" title=\"测试rtmp推流\"></a>测试rtmp推流</h4><p><code>ffmpeg -re -i ./龙珠超.布罗利.mp4 -vcodec libx264 -vprofile baseline -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -s 1280x720 -q 10 rtmp://192.168.100.31:1935/rtmplive_demo/longzhuchao</code></p>\n<pre><code>注:rtmp://192.168.100.31:1935/rtmplive_demo/longzhuchao rtmp流地址,其中rtmplive_demo必须和nginx.conf中\napplication中的rtmplive_demo名称必须一致,否则导致推流不成功\n</code></pre><p>打开VLC Media Player测试</p>\n<p>在工具栏”媒体-&gt;打开网络串流”然后输入rtmp://192.168.100.31:1935/rtmplive_demo/longzhuchao点击确定即可进行直播预览转换后的rtmp视频流.效果如图</p>\n<p><img src=\"/images/push_rtmp_res.png\" alt></p>\n<h4 id=\"测试HLS推流\"><a href=\"#测试HLS推流\" class=\"headerlink\" title=\"测试HLS推流\"></a>测试HLS推流</h4><p><code>ffmpeg -re -i ./龙珠超.布罗利.mp4 -vcodec libx264 -vprofile baseline -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -s 1280x720 -q 10 rtmp://192.168.100.31:1935/hlsvideo/longzhuchao</code></p>\n<pre><code>注:rtmp://192.168.100.31:1935/hlsvideo/longzhuchao,其中hlsvideo必须和nginx.conf中\napplication中hlsvideo名称必须一致,否则导致推流不成功\n</code></pre><p>打开VLC Media Player测试</p>\n<p>HLS测试地址是http协议的.访问路径是nginx中http节点下server节点配置的.此处是<a href=\"http://192.168.100.31/hlsvideo/longzhuchao.m3u8\" target=\"_blank\" rel=\"noopener\">http://192.168.100.31/hlsvideo/longzhuchao.m3u8</a></p>\n<p>在工具栏”媒体-&gt;打开网络串流”然后输入<a href=\"http://192.168.100.31/hlsvideo/longzhuchao.m3u8点击确定即可进行直播预览转换后的rtmp视频流.效果如图\" target=\"_blank\" rel=\"noopener\">http://192.168.100.31/hlsvideo/longzhuchao.m3u8点击确定即可进行直播预览转换后的rtmp视频流.效果如图</a></p>\n<p><img src=\"/images/m3u8-res.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>摘要:nginx源码编译添加rtmp模块实现视频推流服务器\n环境:deepin linux 15.10.1(基于debian9)\n</code></pre><h3 id=\"安装依赖库\"><a href=\"#安装依赖库\" class=\"headerlink\" title=\"安装依赖库\"></a>安装依赖库</h3><p>执行命令前,最好执行一次sudo apt update更新下仓库</p>\n<p><code>sudo apt install autoconf automake</code></p>\n<p><code>sudo apt install libpcre3 libpcre3-dev</code></p>\n<p><code>sudo apt install openssl</code></p>\n<p><code>sudo apt install libssl-dev</code></p>\n<h3 id=\"下载nginx和nginx-rtmp-module源码\"><a href=\"#下载nginx和nginx-rtmp-module源码\" class=\"headerlink\" title=\"下载nginx和nginx-rtmp-module源码\"></a>下载nginx和nginx-rtmp-module源码</h3><p>进入到一个目录(可以自己新建),然后clone nginx和rtmp模块的源码,地址可在github上面查找对应的仓库,然后进行clone操作(需要安装git)</p>\n<p><code>git clone https://github.com/nginx/nginx.git --depth=1</code> // clone nginx源码,指定克隆深度depth为1即表示只克隆最近一次commit(clone时间大幅缩短)</p>\n<p><code>git clone https://github.com/arut/nginx-rtmp-module.git --depth=1</code> // clone nginx-rtmp-module源码</p>\n<p>进入到nginx源码目录,有一个auto文件夹，里面有一个名为configure的文件.通过命令参数调用该文件,生成MakeFile</p>\n<p><code>cd nginx</code> // 进入到nginx源码目录</p>\n<p><code>./auto/configure --prefix=/opt/nginx --with-http_ssl_module --with-http_v2_module --with-http_flv_module --with-http_mp4_module --add-module=../nginx-rtmp-module/</code></p>\n<p><code>ls -al</code> // 查看当前目录(nginx)下的文件,会有一个产生的MakeFile文件</p>\n<h3 id=\"编译和安装\"><a href=\"#编译和安装\" class=\"headerlink\" title=\"编译和安装\"></a>编译和安装</h3><p>当前目录还是位于上一步的nginx目录</p>\n<p><code>make</code> // 编译</p>\n<p><code>sudo make install</code> // 安装</p>\n<h3 id=\"查看结果\"><a href=\"#查看结果\" class=\"headerlink\" title=\"查看结果\"></a>查看结果</h3><p><code>ls -l /opt/nginx/</code> // 查看opt目录下nginx目录的内容</p>\n<p><code>sudo /opt/nginx/sbin/nginx</code> // 启动nginx服务,默认只能用root启动,所以加sudo</p>\n<p><code>sudo chmod u+s /opt/nginx/sbin/nginx</code> // 为nginx文件加上setuid标志.(setuid只对文件有效).设置后可以通过普通用户就可以启动</p>\n<ul>\n<li><p>关于chmod扩展:如果是一个可执行文件, 那么在执行时, 一般该文件只拥有调用该文件的用户具有的权限. 而setuid, setgid 可以来改变这种设置:</p>\n<p>setuid: 设置使文件在执行阶段具有文件所有者的权限</p>\n<p>setgid: 该权限只对目录有效. 目录被设置该位后, 任何用户在此目录下创建的文件都具有和该目录所属的组相同的组.</p>\n<p>sticky bit: 该位可以理解为防删除位. 一个文件是否可以被某用户删除, 主要取决于该文件所属的组是否对该用户具有写权限. 如果没有写权限, 则这个目录下的所有文件都不能被删除, 同时也不能添加新的文件. 如果希望用户能够添加文件但同时不能删除文件, 则可以对文件使用sticky bit位. 设置该位后, 就算用户对目录具有写权限, 也不能删除该文件,该权限只对目录有效.</p>\n<p>具体使用如下</p>\n<p>chmod u+s temp — 为temp文件加上setuid标志. (setuid 只对文件有效)</p>\n<p>chmod g+s tempdir — 为tempdir目录加上setgid标志 (setgid 只对目录有效)</p>\n<p>chmod o+t temp — 为temp文件加上sticky标志 (sticky只对文件有效) *</p>\n</li>\n</ul>\n<p>浏览器打开localhost,正常就能打开nginx默认的首页面</p>\n<h3 id=\"nginx-推流配置\"><a href=\"#nginx-推流配置\" class=\"headerlink\" title=\"nginx 推流配置\"></a>nginx 推流配置</h3><p><code>sudo vim /opt/nginx/conf/nginx.conf</code></p>\n<pre><code>rtmp {\n  server {\n      listen 1935;\n      application rtmplive_demo {\n          live on;\n          max_connections 1024;\n      }\n      application hlsvideo {\n          live on;\n          hls on;\n          hls_path /home/bz/Desktop/video/hlsvideo; # 推流存放文件夹,自定义\n          hls_fragment 1s;\n      }\n  }\n}\n\nlocation ^~ /hlsvideo {\n  types {\n    application/vnd.apple.mpegurl    m3u8;\n    video/mp2t ts;\n  }\n  root /home/bz/Desktop/video; # 此处不能写/home/bz/Desktop/video/hlsvideo,因为路径中带了一层hlsvideo了,如果写上hlsvideo会导致读取m3u8文件404\n  add_header Cache-Control    no-cache;\n}\n</code></pre><p><code>sudo /opt/nginx/sbin/nginx -t</code> // 测试配置文件是否ok</p>\n<p><code>sudo /opt/nginx/sbin/nginx -s reload</code></p>\n<h4 id=\"测试rtmp推流\"><a href=\"#测试rtmp推流\" class=\"headerlink\" title=\"测试rtmp推流\"></a>测试rtmp推流</h4><p><code>ffmpeg -re -i ./龙珠超.布罗利.mp4 -vcodec libx264 -vprofile baseline -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -s 1280x720 -q 10 rtmp://192.168.100.31:1935/rtmplive_demo/longzhuchao</code></p>\n<pre><code>注:rtmp://192.168.100.31:1935/rtmplive_demo/longzhuchao rtmp流地址,其中rtmplive_demo必须和nginx.conf中\napplication中的rtmplive_demo名称必须一致,否则导致推流不成功\n</code></pre><p>打开VLC Media Player测试</p>\n<p>在工具栏”媒体-&gt;打开网络串流”然后输入rtmp://192.168.100.31:1935/rtmplive_demo/longzhuchao点击确定即可进行直播预览转换后的rtmp视频流.效果如图</p>\n<p><img src=\"/images/push_rtmp_res.png\" alt></p>\n<h4 id=\"测试HLS推流\"><a href=\"#测试HLS推流\" class=\"headerlink\" title=\"测试HLS推流\"></a>测试HLS推流</h4><p><code>ffmpeg -re -i ./龙珠超.布罗利.mp4 -vcodec libx264 -vprofile baseline -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -s 1280x720 -q 10 rtmp://192.168.100.31:1935/hlsvideo/longzhuchao</code></p>\n<pre><code>注:rtmp://192.168.100.31:1935/hlsvideo/longzhuchao,其中hlsvideo必须和nginx.conf中\napplication中hlsvideo名称必须一致,否则导致推流不成功\n</code></pre><p>打开VLC Media Player测试</p>\n<p>HLS测试地址是http协议的.访问路径是nginx中http节点下server节点配置的.此处是<a href=\"http://192.168.100.31/hlsvideo/longzhuchao.m3u8\" target=\"_blank\" rel=\"noopener\">http://192.168.100.31/hlsvideo/longzhuchao.m3u8</a></p>\n<p>在工具栏”媒体-&gt;打开网络串流”然后输入<a href=\"http://192.168.100.31/hlsvideo/longzhuchao.m3u8点击确定即可进行直播预览转换后的rtmp视频流.效果如图\" target=\"_blank\" rel=\"noopener\">http://192.168.100.31/hlsvideo/longzhuchao.m3u8点击确定即可进行直播预览转换后的rtmp视频流.效果如图</a></p>\n<p><img src=\"/images/m3u8-res.png\" alt></p>\n"},{"title":"远程tomcat配置jconsole连接监测jvm参数","date":"2018-08-20T03:10:30.000Z","_content":"\n    摘要:\n    \n      jconsole是Java 自带性能监控工具，监视和管理控制台 jconsole，它可以提供 Java 某个进程的内存、线程、类加载、\n      jvm 概要以及 MBean 等的实时信息.\n      Jvisualvm是jdk1.6 update 7 才有，是jconsole的升级工具，功能更强大，最大好处是支持插件安装。所以Jvisualvm远程\n      JMX连接方式和jconsole远程连接方式一样\n\n1.在tomcat的bin目录下catalina.sh文件首部增加以下配置(注意:不用换行)\n\n    CATALINA_OPTS=\"-Dfile.encoding=UTF-8 -server -Xms256m -Xmx256m -Djava.rmi.server.hostname=0.0.0.0 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=10001 -Dcom.sun.management.jmxremote.rmi.port=10001 -Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.password.file=./conf/jmxremote.password -Dcom.sun.management.jmxremote.access.file=./conf/jmxremote.access\"\n\n    其中-Xms256m -Xmx256m是配置jvm虚拟机参数的,最小堆内存和最大堆内存,推荐保持一致,如果不一致会增加gc回收次数,\n    对性能有严重影响.\n    -Djava.rmi.server.hostname:本机的ip地址,可设置为0.0.0.0\n    -Dcom.sun.management.jmxremote.port:监控的端口.不能和其他运行的端口相冲突\n    -Dcom.sun.management.jmxremote.authenticate:需要授权才能进行连接\n    -Dcom.sun.management.jmxremote.password.file:指定配置授权的密码文件存放位置,推荐放入到tomcat的conf目录下\n    -Dcom.sun.management.jmxremote.access.file:指定配置授权账户的权限的文件存放位置,推荐放入到tomcat的conf目录下\n\n\n2.在tomcat的bin目录下startup.sh文件首部增加以下配置\n\n    JAVA_OPTS=\"-Djava.rmi.server.hostname=0.0.0.0\"\n\n3.启动本地的jconsole即可,输入远程ip和端口,username和password即可连接\n\n注意:\n\n    1.配置授权的2个文件是在系统的%JAVA_HOME%/jre/lib/management目录下可以找到对应的模板.将其复制到tomcat的conf目录下,\n    并将jmxremote.password.template重命名为jmxremote.password\n    2.jmxremote.access用户权限分readonly和readwrite两种，在jmxremote.access尾部添加用户权限\"admin  readwrite\",\n    其中admin代表远程授权的用户名\n    3.在jmxremote.password尾部添加用户密码\"admin 123456\"其中admin代表用户名,123456代表对应的密码\n    4.对jmxremote.access和jmxremote.password文件进行授权,chmod 600  jmxremote.access和\n    chmod 600 jmxremote.password\n    5.针对为什么在startup.sh文件中增加对应的-Djava.rmi.server.hostname=0.0.0.0配置,主要是因为在不加配置的情况下,\n    用shutdown.sh关闭tomcat的时候会报该端口已经被占用,因为关闭tomcat时候，还会读取catalina.sh.所以推荐在startup.sh文件中配置\n    6.一般情况下远程服务器系统是开启防火墙的,所以还需要将10001端口配置为允许访问\n    7.如果配置一切无误,还是连接不上的话,请将0.0.0.0换成对应的IP地址.因为亲测在Ubuntu下0.0.0.0能连接成功,\n    但是在centos7下连接不成功\n\n","source":"_posts/远程tomcat配置jconsole连接监测jvm参数.md","raw":"---\ntitle: 远程tomcat配置jconsole连接监测jvm参数\ndate: 2018-08-20 11:10:30\ntags:\n  - java\n  - jconsole\n  - jvm\n  - tomcat\n---\n\n    摘要:\n    \n      jconsole是Java 自带性能监控工具，监视和管理控制台 jconsole，它可以提供 Java 某个进程的内存、线程、类加载、\n      jvm 概要以及 MBean 等的实时信息.\n      Jvisualvm是jdk1.6 update 7 才有，是jconsole的升级工具，功能更强大，最大好处是支持插件安装。所以Jvisualvm远程\n      JMX连接方式和jconsole远程连接方式一样\n\n1.在tomcat的bin目录下catalina.sh文件首部增加以下配置(注意:不用换行)\n\n    CATALINA_OPTS=\"-Dfile.encoding=UTF-8 -server -Xms256m -Xmx256m -Djava.rmi.server.hostname=0.0.0.0 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=10001 -Dcom.sun.management.jmxremote.rmi.port=10001 -Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.password.file=./conf/jmxremote.password -Dcom.sun.management.jmxremote.access.file=./conf/jmxremote.access\"\n\n    其中-Xms256m -Xmx256m是配置jvm虚拟机参数的,最小堆内存和最大堆内存,推荐保持一致,如果不一致会增加gc回收次数,\n    对性能有严重影响.\n    -Djava.rmi.server.hostname:本机的ip地址,可设置为0.0.0.0\n    -Dcom.sun.management.jmxremote.port:监控的端口.不能和其他运行的端口相冲突\n    -Dcom.sun.management.jmxremote.authenticate:需要授权才能进行连接\n    -Dcom.sun.management.jmxremote.password.file:指定配置授权的密码文件存放位置,推荐放入到tomcat的conf目录下\n    -Dcom.sun.management.jmxremote.access.file:指定配置授权账户的权限的文件存放位置,推荐放入到tomcat的conf目录下\n\n\n2.在tomcat的bin目录下startup.sh文件首部增加以下配置\n\n    JAVA_OPTS=\"-Djava.rmi.server.hostname=0.0.0.0\"\n\n3.启动本地的jconsole即可,输入远程ip和端口,username和password即可连接\n\n注意:\n\n    1.配置授权的2个文件是在系统的%JAVA_HOME%/jre/lib/management目录下可以找到对应的模板.将其复制到tomcat的conf目录下,\n    并将jmxremote.password.template重命名为jmxremote.password\n    2.jmxremote.access用户权限分readonly和readwrite两种，在jmxremote.access尾部添加用户权限\"admin  readwrite\",\n    其中admin代表远程授权的用户名\n    3.在jmxremote.password尾部添加用户密码\"admin 123456\"其中admin代表用户名,123456代表对应的密码\n    4.对jmxremote.access和jmxremote.password文件进行授权,chmod 600  jmxremote.access和\n    chmod 600 jmxremote.password\n    5.针对为什么在startup.sh文件中增加对应的-Djava.rmi.server.hostname=0.0.0.0配置,主要是因为在不加配置的情况下,\n    用shutdown.sh关闭tomcat的时候会报该端口已经被占用,因为关闭tomcat时候，还会读取catalina.sh.所以推荐在startup.sh文件中配置\n    6.一般情况下远程服务器系统是开启防火墙的,所以还需要将10001端口配置为允许访问\n    7.如果配置一切无误,还是连接不上的话,请将0.0.0.0换成对应的IP地址.因为亲测在Ubuntu下0.0.0.0能连接成功,\n    但是在centos7下连接不成功\n\n","slug":"远程tomcat配置jconsole连接监测jvm参数","published":1,"updated":"2019-09-02T07:37:22.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck024pnw6001gy6fg5w186zeg","content":"<pre><code>摘要:\n\n  jconsole是Java 自带性能监控工具，监视和管理控制台 jconsole，它可以提供 Java 某个进程的内存、线程、类加载、\n  jvm 概要以及 MBean 等的实时信息.\n  Jvisualvm是jdk1.6 update 7 才有，是jconsole的升级工具，功能更强大，最大好处是支持插件安装。所以Jvisualvm远程\n  JMX连接方式和jconsole远程连接方式一样\n</code></pre><p>1.在tomcat的bin目录下catalina.sh文件首部增加以下配置(注意:不用换行)</p>\n<pre><code>CATALINA_OPTS=&quot;-Dfile.encoding=UTF-8 -server -Xms256m -Xmx256m -Djava.rmi.server.hostname=0.0.0.0 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=10001 -Dcom.sun.management.jmxremote.rmi.port=10001 -Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.password.file=./conf/jmxremote.password -Dcom.sun.management.jmxremote.access.file=./conf/jmxremote.access&quot;\n\n其中-Xms256m -Xmx256m是配置jvm虚拟机参数的,最小堆内存和最大堆内存,推荐保持一致,如果不一致会增加gc回收次数,\n对性能有严重影响.\n-Djava.rmi.server.hostname:本机的ip地址,可设置为0.0.0.0\n-Dcom.sun.management.jmxremote.port:监控的端口.不能和其他运行的端口相冲突\n-Dcom.sun.management.jmxremote.authenticate:需要授权才能进行连接\n-Dcom.sun.management.jmxremote.password.file:指定配置授权的密码文件存放位置,推荐放入到tomcat的conf目录下\n-Dcom.sun.management.jmxremote.access.file:指定配置授权账户的权限的文件存放位置,推荐放入到tomcat的conf目录下\n</code></pre><p>2.在tomcat的bin目录下startup.sh文件首部增加以下配置</p>\n<pre><code>JAVA_OPTS=&quot;-Djava.rmi.server.hostname=0.0.0.0&quot;\n</code></pre><p>3.启动本地的jconsole即可,输入远程ip和端口,username和password即可连接</p>\n<p>注意:</p>\n<pre><code>1.配置授权的2个文件是在系统的%JAVA_HOME%/jre/lib/management目录下可以找到对应的模板.将其复制到tomcat的conf目录下,\n并将jmxremote.password.template重命名为jmxremote.password\n2.jmxremote.access用户权限分readonly和readwrite两种，在jmxremote.access尾部添加用户权限&quot;admin  readwrite&quot;,\n其中admin代表远程授权的用户名\n3.在jmxremote.password尾部添加用户密码&quot;admin 123456&quot;其中admin代表用户名,123456代表对应的密码\n4.对jmxremote.access和jmxremote.password文件进行授权,chmod 600  jmxremote.access和\nchmod 600 jmxremote.password\n5.针对为什么在startup.sh文件中增加对应的-Djava.rmi.server.hostname=0.0.0.0配置,主要是因为在不加配置的情况下,\n用shutdown.sh关闭tomcat的时候会报该端口已经被占用,因为关闭tomcat时候，还会读取catalina.sh.所以推荐在startup.sh文件中配置\n6.一般情况下远程服务器系统是开启防火墙的,所以还需要将10001端口配置为允许访问\n7.如果配置一切无误,还是连接不上的话,请将0.0.0.0换成对应的IP地址.因为亲测在Ubuntu下0.0.0.0能连接成功,\n但是在centos7下连接不成功\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>摘要:\n\n  jconsole是Java 自带性能监控工具，监视和管理控制台 jconsole，它可以提供 Java 某个进程的内存、线程、类加载、\n  jvm 概要以及 MBean 等的实时信息.\n  Jvisualvm是jdk1.6 update 7 才有，是jconsole的升级工具，功能更强大，最大好处是支持插件安装。所以Jvisualvm远程\n  JMX连接方式和jconsole远程连接方式一样\n</code></pre><p>1.在tomcat的bin目录下catalina.sh文件首部增加以下配置(注意:不用换行)</p>\n<pre><code>CATALINA_OPTS=&quot;-Dfile.encoding=UTF-8 -server -Xms256m -Xmx256m -Djava.rmi.server.hostname=0.0.0.0 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=10001 -Dcom.sun.management.jmxremote.rmi.port=10001 -Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.password.file=./conf/jmxremote.password -Dcom.sun.management.jmxremote.access.file=./conf/jmxremote.access&quot;\n\n其中-Xms256m -Xmx256m是配置jvm虚拟机参数的,最小堆内存和最大堆内存,推荐保持一致,如果不一致会增加gc回收次数,\n对性能有严重影响.\n-Djava.rmi.server.hostname:本机的ip地址,可设置为0.0.0.0\n-Dcom.sun.management.jmxremote.port:监控的端口.不能和其他运行的端口相冲突\n-Dcom.sun.management.jmxremote.authenticate:需要授权才能进行连接\n-Dcom.sun.management.jmxremote.password.file:指定配置授权的密码文件存放位置,推荐放入到tomcat的conf目录下\n-Dcom.sun.management.jmxremote.access.file:指定配置授权账户的权限的文件存放位置,推荐放入到tomcat的conf目录下\n</code></pre><p>2.在tomcat的bin目录下startup.sh文件首部增加以下配置</p>\n<pre><code>JAVA_OPTS=&quot;-Djava.rmi.server.hostname=0.0.0.0&quot;\n</code></pre><p>3.启动本地的jconsole即可,输入远程ip和端口,username和password即可连接</p>\n<p>注意:</p>\n<pre><code>1.配置授权的2个文件是在系统的%JAVA_HOME%/jre/lib/management目录下可以找到对应的模板.将其复制到tomcat的conf目录下,\n并将jmxremote.password.template重命名为jmxremote.password\n2.jmxremote.access用户权限分readonly和readwrite两种，在jmxremote.access尾部添加用户权限&quot;admin  readwrite&quot;,\n其中admin代表远程授权的用户名\n3.在jmxremote.password尾部添加用户密码&quot;admin 123456&quot;其中admin代表用户名,123456代表对应的密码\n4.对jmxremote.access和jmxremote.password文件进行授权,chmod 600  jmxremote.access和\nchmod 600 jmxremote.password\n5.针对为什么在startup.sh文件中增加对应的-Djava.rmi.server.hostname=0.0.0.0配置,主要是因为在不加配置的情况下,\n用shutdown.sh关闭tomcat的时候会报该端口已经被占用,因为关闭tomcat时候，还会读取catalina.sh.所以推荐在startup.sh文件中配置\n6.一般情况下远程服务器系统是开启防火墙的,所以还需要将10001端口配置为允许访问\n7.如果配置一切无误,还是连接不上的话,请将0.0.0.0换成对应的IP地址.因为亲测在Ubuntu下0.0.0.0能连接成功,\n但是在centos7下连接不成功\n</code></pre>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck024pnus0000y6fga2a8fngc","tag_id":"ck024pnv00002y6fg3b93y3x0","_id":"ck024pnvc000by6fgxj8x2smk"},{"post_id":"ck024pnus0000y6fga2a8fngc","tag_id":"ck024pnv60006y6fge6xl6qmn","_id":"ck024pnvf000dy6fgulzr0yqk"},{"post_id":"ck024pnuy0001y6fg0m4li3aj","tag_id":"ck024pnv00002y6fg3b93y3x0","_id":"ck024pnvh000gy6fgikxbnbdm"},{"post_id":"ck024pnv20003y6fgtl2zm936","tag_id":"ck024pnv00002y6fg3b93y3x0","_id":"ck024pnvo000ny6fgmda3xx6p"},{"post_id":"ck024pnv20003y6fgtl2zm936","tag_id":"ck024pnvj000iy6fgm6l5zfax","_id":"ck024pnvq000py6fgwt1n3pyf"},{"post_id":"ck024pnvl000ky6fgn306cmay","tag_id":"ck024pnv00002y6fg3b93y3x0","_id":"ck024pnvs000sy6fgba70u9gr"},{"post_id":"ck024pnv40004y6fgthkv24un","tag_id":"ck024pnvm000ly6fgszxzsrsk","_id":"ck024pnvt000uy6fg4c8exm61"},{"post_id":"ck024pnv50005y6fg1ctu28f7","tag_id":"ck024pnvm000ly6fgszxzsrsk","_id":"ck024pnvv000xy6fgosy817e3"},{"post_id":"ck024pnvu000wy6fg3gqr080q","tag_id":"ck024pnv00002y6fg3b93y3x0","_id":"ck024pnvw000zy6fgmg0m8gnv"},{"post_id":"ck024pnv70007y6fgctp8mi6m","tag_id":"ck024pnvm000ly6fgszxzsrsk","_id":"ck024pnvy0012y6fg5p77vrrt"},{"post_id":"ck024pnvx0011y6fga6vp7lwx","tag_id":"ck024pnv00002y6fg3b93y3x0","_id":"ck024pnvz0014y6fg27lgvool"},{"post_id":"ck024pnv80008y6fgkko2j8k5","tag_id":"ck024pnvm000ly6fgszxzsrsk","_id":"ck024pnw10017y6fgllpgjqsr"},{"post_id":"ck024pnvb000ay6fgwbt8ks0z","tag_id":"ck024pnv00002y6fg3b93y3x0","_id":"ck024pnw3001by6fgd6vfwo8a"},{"post_id":"ck024pnvb000ay6fgwbt8ks0z","tag_id":"ck024pnvz0015y6fgrhxlbw5m","_id":"ck024pnw5001dy6fg1kh04w1l"},{"post_id":"ck024pnvd000cy6fgl32k52rd","tag_id":"ck024pnv00002y6fg3b93y3x0","_id":"ck024pnw8001iy6fgy0e5iouh"},{"post_id":"ck024pnvd000cy6fgl32k52rd","tag_id":"ck024pnw3001ay6fg1sclxf0n","_id":"ck024pnw8001jy6fg8cnqmrdv"},{"post_id":"ck024pnvd000cy6fgl32k52rd","tag_id":"ck024pnw6001fy6fgpiolb943","_id":"ck024pnw9001ly6fgjxrpbo3x"},{"post_id":"ck024pnvg000fy6fgyj6qy0ts","tag_id":"ck024pnw3001ay6fg1sclxf0n","_id":"ck024pnw9001ny6fgwil1h7w6"},{"post_id":"ck024pnvg000fy6fgyj6qy0ts","tag_id":"ck024pnv00002y6fg3b93y3x0","_id":"ck024pnwa001oy6fgavvrpsny"},{"post_id":"ck024pnvg000fy6fgyj6qy0ts","tag_id":"ck024pnw8001ky6fg7gnu34e0","_id":"ck024pnwa001qy6fgg58m7j40"},{"post_id":"ck024pnvi000hy6fgo5wl9cz3","tag_id":"ck024pnw9001my6fgpwqsyr3c","_id":"ck024pnwa001ry6fgupyvsmfo"},{"post_id":"ck024pnvk000jy6fgkxyvqgpk","tag_id":"ck024pnwa001py6fgj0r2mpsl","_id":"ck024pnwd001vy6fguqkjc71r"},{"post_id":"ck024pnvk000jy6fgkxyvqgpk","tag_id":"ck024pnwb001sy6fg7k9qqf4o","_id":"ck024pnwe001wy6fgzvb5fb45"},{"post_id":"ck024pnvk000jy6fgkxyvqgpk","tag_id":"ck024pnw3001ay6fg1sclxf0n","_id":"ck024pnwe001yy6fgyguzop7i"},{"post_id":"ck024pnvn000my6fg57cv3zvb","tag_id":"ck024pnv00002y6fg3b93y3x0","_id":"ck024pnwf001zy6fgvzpeglfr"},{"post_id":"ck024pnvn000my6fg57cv3zvb","tag_id":"ck024pnwd001uy6fg96nwjw55","_id":"ck024pnwg0021y6fgu0sa3anl"},{"post_id":"ck024pnvp000oy6fg338x0rfw","tag_id":"ck024pnwe001xy6fgobhpi7gi","_id":"ck024pnwg0022y6fg3w3aiv2z"},{"post_id":"ck024pnvq000ry6fg1l2av12m","tag_id":"ck024pnw3001ay6fg1sclxf0n","_id":"ck024pnwh0024y6fg4iwlzatl"},{"post_id":"ck024pnvs000ty6fg7uo9xt2x","tag_id":"ck024pnv00002y6fg3b93y3x0","_id":"ck024pnwj0026y6fgug166ple"},{"post_id":"ck024pnvs000ty6fg7uo9xt2x","tag_id":"ck024pnwg0023y6fgcytzof5r","_id":"ck024pnwk0027y6fgqx9xn3t6"},{"post_id":"ck024pnvv000yy6fghtt7hqrt","tag_id":"ck024pnwg0023y6fgcytzof5r","_id":"ck024pnwk0029y6fg9i4gojx0"},{"post_id":"ck024pnvy0013y6fg8uyaooha","tag_id":"ck024pnwg0023y6fgcytzof5r","_id":"ck024pnwm002ey6fg8neq31w5"},{"post_id":"ck024pnvy0013y6fg8uyaooha","tag_id":"ck024pnwl002ay6fgovvcdanm","_id":"ck024pnwm002fy6fg0l3c9xle"},{"post_id":"ck024pnvy0013y6fg8uyaooha","tag_id":"ck024pnwl002by6fg1lo7bc0v","_id":"ck024pnwm002hy6fgqekl4p5k"},{"post_id":"ck024pnvy0013y6fg8uyaooha","tag_id":"ck024pnwl002cy6fgvh4ax954","_id":"ck024pnwm002iy6fgonniargo"},{"post_id":"ck024pnvz0016y6fggmvgn5ln","tag_id":"ck024pnw3001ay6fg1sclxf0n","_id":"ck024pnwn002ly6fgjna5mnv0"},{"post_id":"ck024pnvz0016y6fggmvgn5ln","tag_id":"ck024pnwm002gy6fgl0mcrzpn","_id":"ck024pnwo002my6fgh8ll5bx5"},{"post_id":"ck024pnvz0016y6fggmvgn5ln","tag_id":"ck024pnwn002jy6fgepbh2pxo","_id":"ck024pnwo002oy6fgjt811lzh"},{"post_id":"ck024pnw10018y6fgvf3bqiu3","tag_id":"ck024pnwn002ky6fgew0y7zw6","_id":"ck024pnwo002py6fg4dw6ntr5"},{"post_id":"ck024pnw20019y6fgcvrj171r","tag_id":"ck024pnwo002ny6fg9vv04p1t","_id":"ck024pnwp002ry6fg6qkzp6kc"},{"post_id":"ck024pnw4001cy6fgctdymrm0","tag_id":"ck024pnwo002qy6fgycn5k4hw","_id":"ck024pnwp002uy6fg1zbyrzkr"},{"post_id":"ck024pnw4001cy6fgctdymrm0","tag_id":"ck024pnwp002sy6fghomziaqd","_id":"ck024pnwq002vy6fgdgn1x91z"},{"post_id":"ck024pnw5001ey6fgv4ay3jx7","tag_id":"ck024pnwg0023y6fgcytzof5r","_id":"ck024pnwr002yy6fg6ob6vkda"},{"post_id":"ck024pnw5001ey6fgv4ay3jx7","tag_id":"ck024pnwl002ay6fgovvcdanm","_id":"ck024pnwr002zy6fg6r7168jg"},{"post_id":"ck024pnw6001gy6fg5w186zeg","tag_id":"ck024pnw3001ay6fg1sclxf0n","_id":"ck024pnws0032y6fga0i92j10"},{"post_id":"ck024pnw6001gy6fg5w186zeg","tag_id":"ck024pnwq002xy6fg6p7ngv9l","_id":"ck024pnws0033y6fgo4zej9yd"},{"post_id":"ck024pnw6001gy6fg5w186zeg","tag_id":"ck024pnwr0030y6fgf2z31fry","_id":"ck024pnws0034y6fgtjhbcp7j"},{"post_id":"ck024pnw6001gy6fg5w186zeg","tag_id":"ck024pnwn002ky6fgew0y7zw6","_id":"ck024pnws0035y6fggezyh518"}],"Tag":[{"name":"linux","_id":"ck024pnv00002y6fg3b93y3x0"},{"name":"nodejs","_id":"ck024pnv60006y6fge6xl6qmn"},{"name":"swap","_id":"ck024pnvj000iy6fgm6l5zfax"},{"name":"MySQL","_id":"ck024pnvm000ly6fgszxzsrsk"},{"name":"shell","_id":"ck024pnvz0015y6fgrhxlbw5m"},{"name":"java","_id":"ck024pnw3001ay6fg1sclxf0n"},{"name":"jdk","_id":"ck024pnw6001fy6fgpiolb943"},{"name":"maven","_id":"ck024pnw8001ky6fg7gnu34e0"},{"name":"atom","_id":"ck024pnw9001my6fgpwqsyr3c"},{"name":"axis2","_id":"ck024pnwa001py6fgj0r2mpsl"},{"name":"WebService","_id":"ck024pnwb001sy6fg7k9qqf4o"},{"name":"docker","_id":"ck024pnwd001uy6fg96nwjw55"},{"name":"Git","_id":"ck024pnwe001xy6fgobhpi7gi"},{"name":"nginx","_id":"ck024pnwg0023y6fgcytzof5r"},{"name":"rtmp","_id":"ck024pnwl002ay6fgovvcdanm"},{"name":"rtsp","_id":"ck024pnwl002by6fg1lo7bc0v"},{"name":"ffmpeg","_id":"ck024pnwl002cy6fgvh4ax954"},{"name":"pdfbox","_id":"ck024pnwm002gy6fgl0mcrzpn"},{"name":"pdf","_id":"ck024pnwn002jy6fgepbh2pxo"},{"name":"tomcat","_id":"ck024pnwn002ky6fgew0y7zw6"},{"name":"vscode","_id":"ck024pnwo002ny6fg9vv04p1t"},{"name":"vue","_id":"ck024pnwo002qy6fgycn5k4hw"},{"name":"web","_id":"ck024pnwp002sy6fghomziaqd"},{"name":"jconsole","_id":"ck024pnwq002xy6fg6p7ngv9l"},{"name":"jvm","_id":"ck024pnwr0030y6fgf2z31fry"}]}}